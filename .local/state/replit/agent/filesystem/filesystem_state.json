{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AI Talent Match Platform\n\n## Overview\n\nAI Talent Match is a modern recruiting platform that connects job seekers with recruiters using AI-powered matching and semantic search. The system uses Elasticsearch as the primary data store, provides real-time chat capabilities, and includes ML-powered resume parsing and candidate ranking. The platform supports job posting, application management, interview scheduling, and intelligent matching between candidates and positions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React SPA**: Built with React and TypeScript using Vite as the build tool\n- **UI Framework**: shadcn/ui components with Radix UI primitives and Tailwind CSS\n- **State Management**: TanStack Query for server state, React Context for authentication\n- **Routing**: Wouter for client-side routing\n- **Real-time Features**: WebSocket integration for chat functionality\n\n### Backend Architecture\n- **Express Backend**: \n  - Node.js/Express server for API routes, development proxy, and static file serving\n  - Direct authentication implementation with JWT-style tokens\n  - In-memory storage for development and demo purposes\n- **Authentication**: Simple token-based authentication for demo functionality\n- **File Storage**: Configurable storage (local filesystem or S3) for resume uploads\n- **Real-time Communication**: WebSocket support planned for chat functionality\n\n### Migration Status (August 17, 2025)\n- **Migrated from Django hybrid to Express-only**: Replaced Django backend proxy with direct Express API implementation\n- **Authentication Working**: Registration and login endpoints functional with in-memory storage and session management\n- **Frontend Issues Resolved**: Fixed JSX syntax errors, CSS compilation issues, and React component map errors\n- **API Routes Implemented**: Added authentication, user profile, and placeholder routes for jobs/applications\n- **Demo Ready**: Basic authentication and dashboard functionality working with proper session handling\n\n### Data Storage\n- **Primary Database**: Elasticsearch as the sole data store (no traditional SQL/NoSQL database)\n- **Search Indices**: Separate indices for users, jobs, applications, interviews, and events\n- **Vector Storage**: Dense vector fields in Elasticsearch for semantic search using 384-dimensional embeddings\n- **File Storage**: Separate file storage system for resume PDFs and documents\n\n### ML and AI Components\n- **Resume Parsing**: Automatic extraction of skills, experience, and contact information from PDF/DOCX files\n- **Semantic Matching**: Sentence transformer models for generating embeddings and calculating similarity\n- **Hybrid Ranking**: Combines BM25 lexical search, semantic similarity, and rule-based scoring\n- **Skills Extraction**: NLP-based skill identification and categorization\n\n### Authentication and Authorization\n- **JWT Tokens**: Stateless authentication with configurable expiration\n- **Role-Based Access**: Support for job seekers, recruiters, and admin roles\n- **Middleware Protection**: API endpoints protected based on user roles and permissions\n\n## External Dependencies\n\n### Core Infrastructure\n- **Elasticsearch**: Primary data store for all application data including vector embeddings\n- **Redis**: Optional caching layer and session storage for Django Channels\n- **PostgreSQL**: Fallback database option (configured but not actively used per architecture spec)\n\n### Machine Learning Services\n- **Sentence Transformers**: For generating semantic embeddings (model: all-MiniLM-L6-v2)\n- **spaCy**: NLP processing for resume parsing and text analysis\n- **scikit-learn**: Additional ML utilities for ranking and classification\n\n### File Processing\n- **PyPDF2**: PDF text extraction for resume parsing\n- **python-docx**: Microsoft Word document processing\n- **Pillow**: Image processing capabilities\n\n### Cloud Services (Optional)\n- **AWS S3/Google Cloud Storage**: Configurable cloud file storage via django-storages\n- **boto3**: AWS SDK integration for S3 operations\n\n### Development and Deployment\n- **Neon Database**: Serverless PostgreSQL service (configured in Drizzle but not primary storage)\n- **Replit Integration**: Development environment optimizations and error handling\n- **Vite**: Frontend build tool with development server and HMR\n\n### Communication\n- **Email Services**: Configured for notifications (implementation-dependent)\n- **Video Meeting Integration**: Placeholder for external video meeting services\n- **Real-time Messaging**: WebSocket-based chat system via Django Channels","size_bytes":4621},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"backend/manage.py":{"content":"#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    \n    # Custom commands for the AI Talent Match platform\n    if len(sys.argv) > 1:\n        command = sys.argv[1]\n        \n        # Initialize Elasticsearch indices\n        if command == 'init_es':\n            from es.indices import initialize_indices\n            from es.client import check_elasticsearch_connection\n            \n            print(\"Checking Elasticsearch connection...\")\n            if check_elasticsearch_connection():\n                print(\"✓ Connected to Elasticsearch\")\n                print(\"Initializing indices...\")\n                if initialize_indices():\n                    print(\"✓ All indices initialized successfully\")\n                else:\n                    print(\"✗ Failed to initialize some indices\")\n                    sys.exit(1)\n            else:\n                print(\"✗ Failed to connect to Elasticsearch\")\n                sys.exit(1)\n            return\n        \n        # Check system status\n        elif command == 'status':\n            from es.client import check_elasticsearch_connection\n            from ml.embeddings import EmbeddingGenerator\n            \n            print(\"=== AI Talent Match System Status ===\")\n            \n            # Check Elasticsearch\n            print(\"\\n1. Elasticsearch Connection:\")\n            if check_elasticsearch_connection():\n                print(\"   ✓ Connected\")\n            else:\n                print(\"   ✗ Not connected\")\n            \n            # Check ML models\n            print(\"\\n2. ML Models:\")\n            try:\n                embedding_gen = EmbeddingGenerator()\n                if embedding_gen.is_model_available():\n                    print(\"   ✓ Embedding model available\")\n                else:\n                    print(\"   ⚠ Using fallback embedding method\")\n            except Exception as e:\n                print(f\"   ✗ Error: {e}\")\n            \n            # Check file storage\n            print(\"\\n3. File Storage:\")\n            try:\n                from django.conf import settings\n                import os\n                if os.path.exists(settings.MEDIA_ROOT):\n                    print(\"   ✓ Media directory exists\")\n                else:\n                    print(\"   ✗ Media directory not found\")\n            except Exception as e:\n                print(f\"   ✗ Error: {e}\")\n            \n            print(\"\\n=== End Status ===\")\n            return\n        \n        # Load sample data (for development)\n        elif command == 'load_sample_data':\n            print(\"Loading sample data...\")\n            # This would be implemented to load test data\n            print(\"Sample data loading not implemented yet\")\n            return\n    \n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n","size_bytes":3340},"server/auth.ts":{"content":"import jwt from 'jsonwebtoken';\nimport type { Request, Response, NextFunction } from 'express';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n\nexport interface AuthenticatedRequest extends Request {\n  userId?: string;\n  userRole?: string;\n}\n\nexport function generateToken(userId: string, role: string): string {\n  return jwt.sign(\n    { userId, role },\n    JWT_SECRET,\n    { expiresIn: '24h' }\n  );\n}\n\nexport function verifyToken(token: string): { userId: string; role: string } | null {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    return { userId: decoded.userId, role: decoded.role };\n  } catch (error) {\n    return null;\n  }\n}\n\nexport function authMiddleware(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({ error: 'No token provided' });\n  }\n\n  const token = authHeader.substring(7);\n  const decoded = verifyToken(token);\n\n  if (!decoded) {\n    return res.status(401).json({ error: 'Invalid token' });\n  }\n\n  req.userId = decoded.userId;\n  req.userRole = decoded.role;\n  next();\n}\n\nexport function requireRole(roles: string[]) {\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    if (!req.userRole || !roles.includes(req.userRole)) {\n      return res.status(403).json({ error: 'Insufficient permissions' });\n    }\n    next();\n  };\n}\n","size_bytes":1470},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { createServer } from \"http\";\nimport { WebSocketServer } from \"ws\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { setupWebSocket } from \"./websocket\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// CORS middleware\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Methods\", \"GET,PUT,POST,DELETE,OPTIONS\");\n  res.header(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\n  if (req.method === \"OPTIONS\") {\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n});\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n  \n  // Setup WebSocket server\n  setupWebSocket(server);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Setup Vite or static serving\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2216},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { registerSchema, loginSchema, type User } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const userData = registerSchema.parse(req.body);\n      const existingUser = await storage.getUserByUsername(userData.email);\n      \n      if (existingUser) {\n        return res.status(400).json({ error: 'User already exists' });\n      }\n\n      const user = await storage.createUser(userData);\n      const token = randomUUID(); // Simple token for demo\n      storage.setSession(token, user.id);\n      \n      res.json({ \n        user: {\n          id: user.id,\n          email: user.email,\n          full_name: user.full_name,\n          role: user.role,\n          headline: user.headline,\n          location: user.location,\n          skills: user.skills\n        }, \n        token \n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(400).json({ error: 'Invalid registration data' });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      const user = await storage.getUserByUsername(email);\n      \n      if (!user || user.password_hash !== password) {\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n\n      const token = randomUUID(); // Simple token for demo\n      storage.setSession(token, user.id);\n      \n      res.json({ \n        user: {\n          id: user.id,\n          email: user.email,\n          full_name: user.full_name,\n          role: user.role,\n          headline: user.headline,\n          location: user.location,\n          skills: user.skills\n        }, \n        token \n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(400).json({ error: 'Invalid login data' });\n    }\n  });\n\n  // User profile route\n  app.get('/api/me', async (req, res) => {\n    const token = req.headers.authorization?.replace('Bearer ', '');\n    if (!token) {\n      return res.status(401).json({ error: 'No token provided' });\n    }\n\n    const user = await storage.getUserByToken(token);\n    if (!user) {\n      return res.status(401).json({ error: 'Invalid token' });\n    }\n\n    res.json({\n      id: user.id,\n      email: user.email,\n      full_name: user.full_name,\n      role: user.role,\n      headline: user.headline,\n      location: user.location,\n      skills: user.skills,\n      resume_file_path: user.resume_file_path\n    });\n  });\n\n  // Jobs routes\n  app.get('/api/jobs', (req, res) => {\n    res.json([]);\n  });\n\n  app.get('/api/jobs/recommendations', (req, res) => {\n    // Return empty array for now\n    res.json([]);\n  });\n\n  app.post('/api/jobs', (req, res) => {\n    res.status(501).json({ error: 'Not implemented yet' });\n  });\n\n  // Applications routes\n  app.get('/api/applications', (req, res) => {\n    res.json([]);\n  });\n\n  app.get('/api/applications/me', (req, res) => {\n    // Return empty array for applications\n    res.json([]);\n  });\n\n  app.post('/api/applications', (req, res) => {\n    res.status(501).json({ error: 'Not implemented yet' });\n  });\n\n  // Interviews routes\n  app.get('/api/interviews/me', (req, res) => {\n    // Return empty array for interviews\n    res.json([]);\n  });\n\n  // Job search route\n  app.get('/api/jobs/search', (req, res) => {\n    // Return empty array for now\n    res.json([]);\n  });\n\n  // Resume upload route\n  app.post('/api/me/resume', async (req, res) => {\n    const token = req.headers.authorization?.replace('Bearer ', '');\n    if (!token) {\n      return res.status(401).json({ error: 'No token provided' });\n    }\n\n    const user = await storage.getUserByToken(token);\n    if (!user) {\n      return res.status(401).json({ error: 'Invalid token' });\n    }\n\n    // Mock successful upload for now\n    res.json({ message: 'Resume uploaded successfully' });\n  });\n\n  // Chat/WebSocket will be handled separately\n  app.use('/ws', (req, res) => {\n    res.status(404).json({ error: 'WebSocket connections not yet implemented' });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":4342},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// This storage interface is kept for compatibility but the actual\n// data storage is handled by Django backend with Elasticsearch\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private sessions: Map<string, string>; // token -> userId\n\n  constructor() {\n    this.users = new Map();\n    this.sessions = new Map();\n  }\n\n  setSession(token: string, userId: string) {\n    this.sessions.set(token, userId);\n  }\n\n  getUserByToken(token: string): Promise<User | undefined> {\n    const userId = this.sessions.get(token);\n    if (!userId) return Promise.resolve(undefined);\n    return this.getUser(userId);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      password_hash: insertUser.password, // This would be hashed in real implementation\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      skills: insertUser.skills || [],\n    };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1668},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/websocket.ts":{"content":"import { Server as HttpServer } from 'http';\nimport { WebSocketServer, WebSocket } from 'ws';\nimport { parse } from 'url';\n\ninterface ChatMessage {\n  id: string;\n  applicationId: string;\n  senderId: string;\n  senderName: string;\n  senderRole: string;\n  content: string;\n  timestamp: string;\n}\n\ninterface ClientConnection {\n  ws: WebSocket;\n  userId: string;\n  applicationId: string;\n}\n\nexport function setupWebSocket(server: HttpServer) {\n  const wss = new WebSocketServer({ server, path: '/ws' });\n  const clients = new Map<string, ClientConnection[]>();\n\n  wss.on('connection', (ws: WebSocket, request) => {\n    const url = parse(request.url || '', true);\n    const pathParts = url.pathname?.split('/') || [];\n    \n    if (pathParts[1] !== 'ws' || pathParts[2] !== 'chat') {\n      ws.close(4000, 'Invalid path');\n      return;\n    }\n\n    const applicationId = pathParts[3];\n    if (!applicationId) {\n      ws.close(4000, 'Missing application ID');\n      return;\n    }\n\n    // In a real implementation, you would verify authentication here\n    const userId = url.query.userId as string;\n    if (!userId) {\n      ws.close(4001, 'Authentication required');\n      return;\n    }\n\n    // Add client to room\n    if (!clients.has(applicationId)) {\n      clients.set(applicationId, []);\n    }\n    \n    const connection: ClientConnection = { ws, userId, applicationId };\n    clients.get(applicationId)!.push(connection);\n\n    console.log(`Client ${userId} connected to chat ${applicationId}`);\n\n    // Send connection confirmation\n    ws.send(JSON.stringify({\n      type: 'connection',\n      message: 'Connected to chat'\n    }));\n\n    ws.on('message', (data: Buffer) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'chat_message') {\n          const chatMessage: ChatMessage = {\n            id: generateId(),\n            applicationId,\n            senderId: userId,\n            senderName: message.senderName || 'User',\n            senderRole: message.senderRole || 'user',\n            content: message.content,\n            timestamp: new Date().toISOString()\n          };\n\n          // Broadcast to all clients in the room\n          const roomClients = clients.get(applicationId) || [];\n          roomClients.forEach(client => {\n            if (client.ws.readyState === WebSocket.OPEN) {\n              client.ws.send(JSON.stringify({\n                type: 'message',\n                message: chatMessage\n              }));\n            }\n          });\n        }\n        \n        if (message.type === 'typing') {\n          // Broadcast typing indicator to other clients\n          const roomClients = clients.get(applicationId) || [];\n          roomClients.forEach(client => {\n            if (client.ws.readyState === WebSocket.OPEN && client.userId !== userId) {\n              client.ws.send(JSON.stringify({\n                type: 'typing',\n                userId,\n                isTyping: message.isTyping\n              }));\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error handling WebSocket message:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      // Remove client from room\n      const roomClients = clients.get(applicationId);\n      if (roomClients) {\n        const index = roomClients.findIndex(c => c.ws === ws);\n        if (index !== -1) {\n          roomClients.splice(index, 1);\n        }\n        \n        if (roomClients.length === 0) {\n          clients.delete(applicationId);\n        }\n      }\n      \n      console.log(`Client ${userId} disconnected from chat ${applicationId}`);\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n    });\n  });\n\n  return wss;\n}\n\nfunction generateId(): string {\n  return Math.random().toString(36).substr(2, 9);\n}\n","size_bytes":3802},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// User schemas\nexport const userRoles = [\"seeker\", \"recruiter\", \"admin\"] as const;\n\nexport const userSchema = z.object({\n  id: z.string(),\n  role: z.enum(userRoles),\n  email: z.string().email(),\n  password_hash: z.string(),\n  full_name: z.string(),\n  headline: z.string().optional(),\n  skills: z.array(z.string()).default([]),\n  experience_years: z.number().optional(),\n  location: z.string().optional(),\n  resume_file_path: z.string().optional(),\n  resume_text: z.string().optional(),\n  resume_vec: z.array(z.number()).optional(),\n  created_at: z.string().datetime(),\n  updated_at: z.string().datetime(),\n});\n\nexport const insertUserSchema = userSchema.omit({\n  id: true,\n  password_hash: true,\n  created_at: true,\n  updated_at: true,\n}).extend({\n  password: z.string().min(8),\n});\n\nexport type User = z.infer<typeof userSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\n// Job schemas\nexport const jobStatuses = [\"open\", \"closed\"] as const;\nexport const employmentTypes = [\"full-time\", \"part-time\", \"contract\", \"internship\"] as const;\n\nexport const jobSchema = z.object({\n  id: z.string(),\n  recruiter_id: z.string(),\n  title: z.string(),\n  description: z.string(),\n  company: z.string(),\n  skills_required: z.array(z.string()).default([]),\n  min_exp: z.number().optional(),\n  location: z.string().optional(),\n  employment_type: z.enum(employmentTypes).optional(),\n  job_vec: z.array(z.number()).optional(),\n  created_at: z.string().datetime(),\n  status: z.enum(jobStatuses).default(\"open\"),\n});\n\nexport const insertJobSchema = jobSchema.omit({\n  id: true,\n  recruiter_id: true,\n  created_at: true,\n});\n\nexport type Job = z.infer<typeof jobSchema>;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\n\n// Application schemas\nexport const applicationStatuses = [\n  \"applied\",\n  \"screening\",\n  \"shortlisted\",\n  \"interviewed\",\n  \"offered\",\n  \"rejected\"\n] as const;\n\nexport const applicationScoreSchema = z.object({\n  bm25: z.number(),\n  semantic: z.number(),\n  rule_boost: z.number(),\n  final: z.number(),\n});\n\nexport const applicationSchema = z.object({\n  id: z.string(),\n  job_id: z.string(),\n  seeker_id: z.string(),\n  status: z.enum(applicationStatuses).default(\"applied\"),\n  scores: applicationScoreSchema,\n  created_at: z.string().datetime(),\n  updated_at: z.string().datetime(),\n});\n\nexport const insertApplicationSchema = applicationSchema.omit({\n  id: true,\n  created_at: true,\n  updated_at: true,\n});\n\nexport type Application = z.infer<typeof applicationSchema>;\nexport type InsertApplication = z.infer<typeof insertApplicationSchema>;\nexport type ApplicationScore = z.infer<typeof applicationScoreSchema>;\n\n// Interview schemas\nexport const interviewStatuses = [\n  \"scheduled\",\n  \"rescheduled\", \n  \"cancelled\",\n  \"completed\"\n] as const;\n\nexport const interviewSchema = z.object({\n  id: z.string(),\n  job_id: z.string(),\n  seeker_id: z.string(),\n  recruiter_id: z.string(),\n  start_time: z.string().datetime(),\n  end_time: z.string().datetime(),\n  meeting_link: z.string().optional(),\n  status: z.enum(interviewStatuses).default(\"scheduled\"),\n  notes: z.string().optional(),\n});\n\nexport const insertInterviewSchema = interviewSchema.omit({\n  id: true,\n});\n\nexport type Interview = z.infer<typeof interviewSchema>;\nexport type InsertInterview = z.infer<typeof insertInterviewSchema>;\n\n// Event/Analytics schemas\nexport const eventSchema = z.object({\n  id: z.string(),\n  actor_id: z.string(),\n  type: z.string(),\n  payload: z.record(z.any()),\n  ts: z.string().datetime(),\n});\n\nexport type Event = z.infer<typeof eventSchema>;\n\n// Auth schemas\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nexport const registerSchema = insertUserSchema;\n\nexport type LoginRequest = z.infer<typeof loginSchema>;\nexport type RegisterRequest = z.infer<typeof registerSchema>;\n\n// Chat message schema\nexport const messageSchema = z.object({\n  id: z.string(),\n  application_id: z.string(),\n  sender_id: z.string(),\n  content: z.string(),\n  timestamp: z.string().datetime(),\n});\n\nexport type Message = z.infer<typeof messageSchema>;\n","size_bytes":4125},"backend/api/__init__.py":{"content":"","size_bytes":0},"backend/api/applications.py":{"content":"from django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_http_methods\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework import status\nfrom datetime import datetime\nimport json\n\nfrom es.repositories import ApplicationRepository, JobRepository, UserRepository\nfrom ml.ranking import RankingService\nfrom common.utils import generate_uuid\n\napplication_repo = ApplicationRepository()\njob_repo = JobRepository()\nuser_repo = UserRepository()\nranking_service = RankingService()\n\n@api_view(['POST'])\ndef apply_to_job(request, job_id):\n    \"\"\"Apply to a job\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user or user['role'] != 'seeker':\n            return Response({'error': 'Only job seekers can apply to jobs'}, status=status.HTTP_403_FORBIDDEN)\n        \n        job = job_repo.get_by_id(job_id)\n        if not job:\n            return Response({'error': 'Job not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        if job['status'] != 'open':\n            return Response({'error': 'This job is no longer accepting applications'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        # Check if already applied\n        existing_application = application_repo.get_by_job_and_seeker(job_id, user_id)\n        if existing_application:\n            return Response({'error': 'You have already applied to this job'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        # Calculate match scores\n        scores = {'bm25': 0.0, 'semantic': 0.0, 'rule_boost': 0.0, 'final': 0.0}\n        \n        if user.get('resume_vec') and job.get('job_vec'):\n            # Calculate hybrid score\n            final_score = ranking_service.calculate_hybrid_score(\n                resume_text=user.get('resume_text', ''),\n                resume_vec=user['resume_vec'],\n                job_text=f\"{job['title']} {job['description']}\",\n                job_vec=job['job_vec'],\n                resume_skills=user.get('skills', []),\n                job_skills=job.get('skills_required', []),\n                resume_exp=user.get('experience_years'),\n                job_min_exp=job.get('min_exp'),\n                same_location=(user.get('location', '').lower() == job.get('location', '').lower())\n            )\n            \n            # Break down scores (simplified)\n            scores = {\n                'bm25': ranking_service.calculate_bm25_score(user.get('resume_text', ''), f\"{job['title']} {job['description']}\"),\n                'semantic': ranking_service.calculate_semantic_score(user['resume_vec'], job['job_vec']),\n                'rule_boost': ranking_service.calculate_rule_boost(\n                    user.get('skills', []), job.get('skills_required', []),\n                    user.get('experience_years'), job.get('min_exp'),\n                    user.get('location', '').lower() == job.get('location', '').lower()\n                ),\n                'final': final_score\n            }\n        \n        # Create application\n        application_data = {\n            'id': generate_uuid(),\n            'job_id': job_id,\n            'seeker_id': user_id,\n            'status': 'applied',\n            'scores': scores,\n            'created_at': datetime.utcnow().isoformat(),\n            'updated_at': datetime.utcnow().isoformat()\n        }\n        \n        created_application = application_repo.create(application_data)\n        \n        return Response(created_application, status=status.HTTP_201_CREATED)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['GET'])\ndef get_my_applications(request):\n    \"\"\"Get applications for current job seeker\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user or user['role'] != 'seeker':\n            return Response({'error': 'Only job seekers can view their applications'}, status=status.HTTP_403_FORBIDDEN)\n        \n        applications = application_repo.get_by_seeker(user_id)\n        \n        # Enrich with job data\n        for application in applications:\n            job = job_repo.get_by_id(application['job_id'])\n            if job:\n                application['job'] = job\n        \n        return Response(applications, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['GET'])\ndef get_job_applications(request):\n    \"\"\"Get applications for recruiter's jobs\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user or user['role'] != 'recruiter':\n            return Response({'error': 'Only recruiters can view job applications'}, status=status.HTTP_403_FORBIDDEN)\n        \n        # Get all recruiter's jobs\n        jobs = job_repo.get_by_recruiter(user_id)\n        job_ids = [job['id'] for job in jobs]\n        \n        # Get applications for these jobs\n        applications = application_repo.get_by_jobs(job_ids)\n        \n        # Enrich with job and seeker data\n        for application in applications:\n            job = job_repo.get_by_id(application['job_id'])\n            if job:\n                application['job'] = job\n            \n            seeker = user_repo.get_by_id(application['seeker_id'])\n            if seeker:\n                # Remove sensitive data\n                seeker_data = {k: v for k, v in seeker.items() if k not in ['password_hash', 'resume_text', 'resume_vec']}\n                application['seeker'] = seeker_data\n        \n        return Response(applications, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['GET'])\ndef get_job_applications_by_id(request, job_id):\n    \"\"\"Get applications for a specific job\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        job = job_repo.get_by_id(job_id)\n        if not job:\n            return Response({'error': 'Job not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        # Check if user owns this job\n        if job['recruiter_id'] != user_id:\n            return Response({'error': 'You can only view applications for your own jobs'}, status=status.HTTP_403_FORBIDDEN)\n        \n        applications = application_repo.get_by_job(job_id)\n        \n        # Sort by final score (highest first)\n        applications.sort(key=lambda x: x.get('scores', {}).get('final', 0), reverse=True)\n        \n        # Enrich with seeker data\n        for application in applications:\n            seeker = user_repo.get_by_id(application['seeker_id'])\n            if seeker:\n                # Remove sensitive data\n                seeker_data = {k: v for k, v in seeker.items() if k not in ['password_hash', 'resume_text', 'resume_vec']}\n                application['seeker'] = seeker_data\n        \n        return Response(applications, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['PUT'])\ndef update_application_status(request, application_id):\n    \"\"\"Update application status (for recruiters)\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user or user['role'] != 'recruiter':\n            return Response({'error': 'Only recruiters can update application status'}, status=status.HTTP_403_FORBIDDEN)\n        \n        application = application_repo.get_by_id(application_id)\n        if not application:\n            return Response({'error': 'Application not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        job = job_repo.get_by_id(application['job_id'])\n        if not job or job['recruiter_id'] != user_id:\n            return Response({'error': 'You can only update applications for your own jobs'}, status=status.HTTP_403_FORBIDDEN)\n        \n        data = request.data\n        new_status = data.get('status')\n        \n        if new_status not in ['applied', 'screening', 'shortlisted', 'interviewed', 'offered', 'rejected']:\n            return Response({'error': 'Invalid status'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        update_data = {\n            'status': new_status,\n            'updated_at': datetime.utcnow().isoformat()\n        }\n        \n        updated_application = application_repo.update(application_id, update_data)\n        \n        return Response(updated_application, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['POST'])\ndef bulk_rank_candidates(request, job_id):\n    \"\"\"Re-rank all candidates for a job\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        job = job_repo.get_by_id(job_id)\n        if not job:\n            return Response({'error': 'Job not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        # Check if user owns this job\n        if job['recruiter_id'] != user_id:\n            return Response({'error': 'You can only rank candidates for your own jobs'}, status=status.HTTP_403_FORBIDDEN)\n        \n        applications = application_repo.get_by_job(job_id)\n        \n        updated_count = 0\n        for application in applications:\n            seeker = user_repo.get_by_id(application['seeker_id'])\n            if seeker and seeker.get('resume_vec') and job.get('job_vec'):\n                # Recalculate scores\n                final_score = ranking_service.calculate_hybrid_score(\n                    resume_text=seeker.get('resume_text', ''),\n                    resume_vec=seeker['resume_vec'],\n                    job_text=f\"{job['title']} {job['description']}\",\n                    job_vec=job['job_vec'],\n                    resume_skills=seeker.get('skills', []),\n                    job_skills=job.get('skills_required', []),\n                    resume_exp=seeker.get('experience_years'),\n                    job_min_exp=job.get('min_exp'),\n                    same_location=(seeker.get('location', '').lower() == job.get('location', '').lower())\n                )\n                \n                scores = {\n                    'bm25': ranking_service.calculate_bm25_score(seeker.get('resume_text', ''), f\"{job['title']} {job['description']}\"),\n                    'semantic': ranking_service.calculate_semantic_score(seeker['resume_vec'], job['job_vec']),\n                    'rule_boost': ranking_service.calculate_rule_boost(\n                        seeker.get('skills', []), job.get('skills_required', []),\n                        seeker.get('experience_years'), job.get('min_exp'),\n                        seeker.get('location', '').lower() == job.get('location', '').lower()\n                    ),\n                    'final': final_score\n                }\n                \n                application_repo.update(application['id'], {\n                    'scores': scores,\n                    'updated_at': datetime.utcnow().isoformat()\n                })\n                updated_count += 1\n        \n        return Response({\n            'message': f'Re-ranked {updated_count} applications',\n            'updated_count': updated_count\n        }, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n","size_bytes":12504},"backend/api/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass ApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'api'\n    verbose_name = 'API'\n\n    def ready(self):\n        \"\"\"Initialize API when app is ready\"\"\"\n        from es.indices import initialize_indices\n        try:\n            initialize_indices()\n        except Exception as e:\n            print(f\"Warning: Failed to initialize Elasticsearch indices: {e}\")\n","size_bytes":438},"backend/api/auth.py":{"content":"import jwt\nfrom datetime import datetime, timedelta\nfrom django.conf import settings\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_http_methods\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import AllowAny\nfrom rest_framework.response import Response\nfrom rest_framework import status\nimport json\nimport hashlib\nimport secrets\n\nfrom common.security import hash_password, verify_password\nfrom es.repositories import UserRepository\nfrom common.utils import generate_uuid\n\nuser_repo = UserRepository()\n\ndef generate_jwt_token(user_data):\n    \"\"\"Generate JWT token for user\"\"\"\n    payload = {\n        'user_id': user_data['id'],\n        'email': user_data['email'],\n        'role': user_data['role'],\n        'exp': datetime.utcnow() + timedelta(seconds=settings.JWT_EXPIRATION_DELTA),\n        'iat': datetime.utcnow()\n    }\n    return jwt.encode(payload, settings.JWT_SECRET_KEY, algorithm=settings.JWT_ALGORITHM)\n\ndef decode_jwt_token(token):\n    \"\"\"Decode and verify JWT token\"\"\"\n    try:\n        payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=[settings.JWT_ALGORITHM])\n        return payload\n    except jwt.ExpiredSignatureError:\n        return None\n    except jwt.InvalidTokenError:\n        return None\n\n@api_view(['POST'])\n@permission_classes([AllowAny])\ndef register(request):\n    \"\"\"Register a new user\"\"\"\n    try:\n        data = request.data\n        \n        # Validate required fields\n        required_fields = ['email', 'password', 'full_name', 'role']\n        for field in required_fields:\n            if not data.get(field):\n                return Response({'error': f'{field} is required'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        # Check if user already exists\n        existing_user = user_repo.get_by_email(data['email'])\n        if existing_user:\n            return Response({'error': 'User with this email already exists'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        # Validate role\n        if data['role'] not in ['seeker', 'recruiter', 'admin']:\n            return Response({'error': 'Invalid role'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        # Create user\n        user_data = {\n            'id': generate_uuid(),\n            'email': data['email'],\n            'password_hash': hash_password(data['password']),\n            'full_name': data['full_name'],\n            'role': data['role'],\n            'headline': data.get('headline', ''),\n            'skills': data.get('skills', []),\n            'experience_years': data.get('experience_years'),\n            'location': data.get('location', ''),\n            'created_at': datetime.utcnow().isoformat(),\n            'updated_at': datetime.utcnow().isoformat()\n        }\n        \n        # Save user to Elasticsearch\n        created_user = user_repo.create(user_data)\n        \n        # Generate JWT token\n        token = generate_jwt_token(created_user)\n        \n        # Remove password hash from response\n        user_response = {k: v for k, v in created_user.items() if k != 'password_hash'}\n        \n        return Response({\n            'user': user_response,\n            'token': token\n        }, status=status.HTTP_201_CREATED)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['POST'])\n@permission_classes([AllowAny])\ndef login(request):\n    \"\"\"Login user\"\"\"\n    try:\n        data = request.data\n        \n        email = data.get('email')\n        password = data.get('password')\n        \n        if not email or not password:\n            return Response({'error': 'Email and password are required'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        # Get user by email\n        user = user_repo.get_by_email(email)\n        if not user:\n            return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        # Verify password\n        if not verify_password(password, user['password_hash']):\n            return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        # Generate JWT token\n        token = generate_jwt_token(user)\n        \n        # Remove password hash from response\n        user_response = {k: v for k, v in user.items() if k != 'password_hash'}\n        \n        return Response({\n            'user': user_response,\n            'token': token\n        }, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['POST'])\ndef logout(request):\n    \"\"\"Logout user (client-side token removal)\"\"\"\n    return Response({'message': 'Logout successful'}, status=status.HTTP_200_OK)\n\n@api_view(['GET'])\ndef me(request):\n    \"\"\"Get current user profile\"\"\"\n    try:\n        # Get user from token (middleware should set this)\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user:\n            return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        # Remove password hash from response\n        user_response = {k: v for k, v in user.items() if k != 'password_hash'}\n        \n        return Response(user_response, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n","size_bytes":5660},"backend/api/chat.py":{"content":"import json\nfrom channels.generic.websocket import AsyncWebsocketConsumer\nfrom channels.db import database_sync_to_async\nfrom datetime import datetime\nimport asyncio\n\nfrom es.repositories import ApplicationRepository, UserRepository\nfrom common.utils import generate_uuid\n\nclass ChatConsumer(AsyncWebsocketConsumer):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.application_repo = ApplicationRepository()\n        self.user_repo = UserRepository()\n        self.room_group_name = None\n        self.application_id = None\n        self.user_id = None\n\n    async def connect(self):\n        self.application_id = self.scope['url_route']['kwargs']['application_id']\n        self.room_group_name = f'chat_{self.application_id}'\n        \n        # Get user from token (simplified - you'd need proper auth middleware)\n        self.user_id = self.scope.get('user_id')\n        \n        if not self.user_id:\n            await self.close()\n            return\n        \n        # Verify user has access to this chat\n        try:\n            application = await self.get_application(self.application_id)\n            user = await self.get_user(self.user_id)\n            \n            if not application or not user:\n                await self.close()\n                return\n            \n            # Check if user is either the job seeker or recruiter for this application\n            if user['role'] == 'seeker' and application['seeker_id'] != self.user_id:\n                await self.close()\n                return\n            elif user['role'] == 'recruiter':\n                job = await self.get_job(application['job_id'])\n                if not job or job['recruiter_id'] != self.user_id:\n                    await self.close()\n                    return\n            \n            # Join room group\n            await self.channel_layer.group_add(\n                self.room_group_name,\n                self.channel_name\n            )\n            \n            await self.accept()\n            \n            # Send connection confirmation\n            await self.send(text_data=json.dumps({\n                'type': 'connection',\n                'message': 'Connected to chat'\n            }))\n            \n        except Exception as e:\n            await self.close()\n\n    async def disconnect(self, close_code):\n        # Leave room group\n        if self.room_group_name:\n            await self.channel_layer.group_discard(\n                self.room_group_name,\n                self.channel_name\n            )\n\n    async def receive(self, text_data):\n        try:\n            text_data_json = json.loads(text_data)\n            message_type = text_data_json.get('type')\n            \n            if message_type == 'chat_message':\n                message_content = text_data_json.get('message', '').strip()\n                \n                if not message_content:\n                    return\n                \n                # Get user info\n                user = await self.get_user(self.user_id)\n                if not user:\n                    return\n                \n                # Create message data\n                message_data = {\n                    'id': generate_uuid(),\n                    'application_id': self.application_id,\n                    'sender_id': self.user_id,\n                    'sender_name': user['full_name'],\n                    'sender_role': user['role'],\n                    'content': message_content,\n                    'timestamp': datetime.utcnow().isoformat()\n                }\n                \n                # Store message (you might want to create a MessageRepository)\n                # For now, we'll just broadcast it\n                \n                # Send message to room group\n                await self.channel_layer.group_send(\n                    self.room_group_name,\n                    {\n                        'type': 'chat_message',\n                        'message': message_data\n                    }\n                )\n            \n            elif message_type == 'typing':\n                # Handle typing indicators\n                user = await self.get_user(self.user_id)\n                if user:\n                    await self.channel_layer.group_send(\n                        self.room_group_name,\n                        {\n                            'type': 'typing_indicator',\n                            'user_id': self.user_id,\n                            'user_name': user['full_name'],\n                            'is_typing': text_data_json.get('is_typing', False)\n                        }\n                    )\n                    \n        except json.JSONDecodeError:\n            pass\n\n    async def chat_message(self, event):\n        # Send message to WebSocket\n        await self.send(text_data=json.dumps({\n            'type': 'message',\n            'message': event['message']\n        }))\n\n    async def typing_indicator(self, event):\n        # Don't send typing indicator back to the sender\n        if event['user_id'] != self.user_id:\n            await self.send(text_data=json.dumps({\n                'type': 'typing',\n                'user_id': event['user_id'],\n                'user_name': event['user_name'],\n                'is_typing': event['is_typing']\n            }))\n\n    @database_sync_to_async\n    def get_application(self, application_id):\n        try:\n            return self.application_repo.get_by_id(application_id)\n        except:\n            return None\n\n    @database_sync_to_async\n    def get_user(self, user_id):\n        try:\n            return self.user_repo.get_by_id(user_id)\n        except:\n            return None\n\n    @database_sync_to_async\n    def get_job(self, job_id):\n        try:\n            from es.repositories import JobRepository\n            job_repo = JobRepository()\n            return job_repo.get_by_id(job_id)\n        except:\n            return None\n\n# URL routing for WebSocket\nfrom django.urls import re_path\n\nwebsocket_urlpatterns = [\n    re_path(r'ws/chat/(?P<application_id>[^/]+)/$', ChatConsumer.as_asgi()),\n]\n\n# Create routing.py file\nrouting_content = '''from django.urls import re_path\nfrom . import chat\n\nwebsocket_urlpatterns = [\n    re_path(r'ws/chat/(?P<application_id>[^/]+)/$', chat.ChatConsumer.as_asgi()),\n]\n'''\n\n# REST API endpoints for chat history\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\n@api_view(['GET'])\ndef get_chat_history(request, application_id):\n    \"\"\"Get chat history for an application\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        # Verify user has access to this chat\n        application_repo = ApplicationRepository()\n        user_repo = UserRepository()\n        \n        application = application_repo.get_by_id(application_id)\n        if not application:\n            return Response({'error': 'Application not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user:\n            return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        # Check access permissions\n        if user['role'] == 'seeker' and application['seeker_id'] != user_id:\n            return Response({'error': 'Access denied'}, status=status.HTTP_403_FORBIDDEN)\n        elif user['role'] == 'recruiter':\n            from es.repositories import JobRepository\n            job_repo = JobRepository()\n            job = job_repo.get_by_id(application['job_id'])\n            if not job or job['recruiter_id'] != user_id:\n                return Response({'error': 'Access denied'}, status=status.HTTP_403_FORBIDDEN)\n        \n        # For now, return empty chat history\n        # In a real implementation, you'd have a MessageRepository\n        return Response({\n            'messages': [],\n            'application_id': application_id\n        }, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n","size_bytes":8278},"backend/api/interviews.py":{"content":"from django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_http_methods\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework import status\nfrom datetime import datetime, timedelta\nimport json\nimport uuid\n\nfrom es.repositories import InterviewRepository, ApplicationRepository, JobRepository, UserRepository\nfrom common.utils import generate_uuid\n\ninterview_repo = InterviewRepository()\napplication_repo = ApplicationRepository()\njob_repo = JobRepository()\nuser_repo = UserRepository()\n\ndef generate_meeting_link():\n    \"\"\"Generate a meeting link (placeholder - integrate with actual video service)\"\"\"\n    meeting_id = str(uuid.uuid4())[:8]\n    return f\"https://meet.example.com/{meeting_id}\"\n\n@api_view(['POST'])\ndef schedule_interview(request):\n    \"\"\"Schedule an interview\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user or user['role'] != 'recruiter':\n            return Response({'error': 'Only recruiters can schedule interviews'}, status=status.HTTP_403_FORBIDDEN)\n        \n        data = request.data\n        \n        # Validate required fields\n        required_fields = ['job_id', 'seeker_id', 'start_time', 'end_time']\n        for field in required_fields:\n            if not data.get(field):\n                return Response({'error': f'{field} is required'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        job_id = data['job_id']\n        seeker_id = data['seeker_id']\n        \n        # Verify job exists and belongs to recruiter\n        job = job_repo.get_by_id(job_id)\n        if not job:\n            return Response({'error': 'Job not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        if job['recruiter_id'] != user_id:\n            return Response({'error': 'You can only schedule interviews for your own jobs'}, status=status.HTTP_403_FORBIDDEN)\n        \n        # Verify seeker exists\n        seeker = user_repo.get_by_id(seeker_id)\n        if not seeker or seeker['role'] != 'seeker':\n            return Response({'error': 'Job seeker not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        # Verify application exists\n        application = application_repo.get_by_job_and_seeker(job_id, seeker_id)\n        if not application:\n            return Response({'error': 'No application found for this job and candidate'}, status=status.HTTP_404_NOT_FOUND)\n        \n        # Validate datetime format\n        try:\n            start_time = datetime.fromisoformat(data['start_time'].replace('Z', '+00:00'))\n            end_time = datetime.fromisoformat(data['end_time'].replace('Z', '+00:00'))\n        except ValueError:\n            return Response({'error': 'Invalid datetime format'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        # Validate interview duration\n        if end_time <= start_time:\n            return Response({'error': 'End time must be after start time'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        duration = end_time - start_time\n        if duration > timedelta(hours=4):\n            return Response({'error': 'Interview duration cannot exceed 4 hours'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        # Generate meeting link\n        meeting_link = data.get('meeting_link') or generate_meeting_link()\n        \n        # Create interview\n        interview_data = {\n            'id': generate_uuid(),\n            'job_id': job_id,\n            'seeker_id': seeker_id,\n            'recruiter_id': user_id,\n            'start_time': start_time.isoformat(),\n            'end_time': end_time.isoformat(),\n            'meeting_link': meeting_link,\n            'status': 'scheduled',\n            'notes': data.get('notes', '')\n        }\n        \n        created_interview = interview_repo.create(interview_data)\n        \n        # Update application status to interviewed if it's not already\n        if application['status'] in ['applied', 'screening', 'shortlisted']:\n            application_repo.update(application['id'], {\n                'status': 'interviewed',\n                'updated_at': datetime.utcnow().isoformat()\n            })\n        \n        return Response(created_interview, status=status.HTTP_201_CREATED)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['GET'])\ndef get_my_interviews(request):\n    \"\"\"Get interviews for current user\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user:\n            return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        if user['role'] == 'recruiter':\n            interviews = interview_repo.get_by_recruiter(user_id)\n        elif user['role'] == 'seeker':\n            interviews = interview_repo.get_by_seeker(user_id)\n        else:\n            return Response({'error': 'Invalid user role'}, status=status.HTTP_403_FORBIDDEN)\n        \n        # Enrich with additional data\n        for interview in interviews:\n            job = job_repo.get_by_id(interview['job_id'])\n            if job:\n                interview['job'] = job\n            \n            if user['role'] == 'recruiter':\n                seeker = user_repo.get_by_id(interview['seeker_id'])\n                if seeker:\n                    # Remove sensitive data\n                    seeker_data = {k: v for k, v in seeker.items() if k not in ['password_hash', 'resume_text', 'resume_vec']}\n                    interview['seeker'] = seeker_data\n            else:\n                recruiter = user_repo.get_by_id(interview['recruiter_id'])\n                if recruiter:\n                    # Remove sensitive data\n                    recruiter_data = {k: v for k, v in recruiter.items() if k not in ['password_hash']}\n                    interview['recruiter'] = recruiter_data\n        \n        return Response(interviews, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['PUT'])\ndef update_interview(request, interview_id):\n    \"\"\"Update an interview\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        interview = interview_repo.get_by_id(interview_id)\n        if not interview:\n            return Response({'error': 'Interview not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        user = user_repo.get_by_id(user_id)\n        \n        # Only recruiter who created interview or the seeker can update it\n        if user['role'] == 'recruiter':\n            if interview['recruiter_id'] != user_id:\n                return Response({'error': 'You can only update your own interviews'}, status=status.HTTP_403_FORBIDDEN)\n        elif user['role'] == 'seeker':\n            if interview['seeker_id'] != user_id:\n                return Response({'error': 'You can only update your own interviews'}, status=status.HTTP_403_FORBIDDEN)\n        else:\n            return Response({'error': 'Invalid user role'}, status=status.HTTP_403_FORBIDDEN)\n        \n        data = request.data\n        update_data = {}\n        \n        # Update allowed fields based on user role\n        if user['role'] == 'recruiter':\n            allowed_fields = ['start_time', 'end_time', 'meeting_link', 'status', 'notes']\n        else:\n            allowed_fields = ['status']  # Job seekers can only update status (e.g., to reschedule)\n        \n        for field in allowed_fields:\n            if field in data:\n                if field in ['start_time', 'end_time']:\n                    try:\n                        update_data[field] = datetime.fromisoformat(data[field].replace('Z', '+00:00')).isoformat()\n                    except ValueError:\n                        return Response({'error': f'Invalid {field} format'}, status=status.HTTP_400_BAD_REQUEST)\n                else:\n                    update_data[field] = data[field]\n        \n        # Validate status\n        if 'status' in update_data:\n            valid_statuses = ['scheduled', 'rescheduled', 'cancelled', 'completed']\n            if update_data['status'] not in valid_statuses:\n                return Response({'error': 'Invalid status'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        if update_data:\n            updated_interview = interview_repo.update(interview_id, update_data)\n            return Response(updated_interview, status=status.HTTP_200_OK)\n        \n        return Response({'message': 'No fields to update'}, status=status.HTTP_400_BAD_REQUEST)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['DELETE'])\ndef cancel_interview(request, interview_id):\n    \"\"\"Cancel an interview\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        interview = interview_repo.get_by_id(interview_id)\n        if not interview:\n            return Response({'error': 'Interview not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        user = user_repo.get_by_id(user_id)\n        \n        # Only recruiter who created interview or the seeker can cancel it\n        if user['role'] == 'recruiter':\n            if interview['recruiter_id'] != user_id:\n                return Response({'error': 'You can only cancel your own interviews'}, status=status.HTTP_403_FORBIDDEN)\n        elif user['role'] == 'seeker':\n            if interview['seeker_id'] != user_id:\n                return Response({'error': 'You can only cancel your own interviews'}, status=status.HTTP_403_FORBIDDEN)\n        else:\n            return Response({'error': 'Invalid user role'}, status=status.HTTP_403_FORBIDDEN)\n        \n        # Update status to cancelled instead of deleting\n        updated_interview = interview_repo.update(interview_id, {\n            'status': 'cancelled'\n        })\n        \n        return Response({'message': 'Interview cancelled successfully'}, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['GET'])\ndef get_interview_availability(request):\n    \"\"\"Get available time slots for interviews\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user:\n            return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        # Get date range from query params\n        start_date = request.GET.get('start_date')\n        end_date = request.GET.get('end_date')\n        \n        if not start_date or not end_date:\n            return Response({'error': 'start_date and end_date are required'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        try:\n            start_dt = datetime.fromisoformat(start_date)\n            end_dt = datetime.fromisoformat(end_date)\n        except ValueError:\n            return Response({'error': 'Invalid date format'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        # Get user's interviews in the date range\n        if user['role'] == 'recruiter':\n            interviews = interview_repo.get_by_recruiter_and_date_range(user_id, start_dt, end_dt)\n        else:\n            interviews = interview_repo.get_by_seeker_and_date_range(user_id, start_dt, end_dt)\n        \n        # Filter out cancelled interviews\n        active_interviews = [i for i in interviews if i['status'] != 'cancelled']\n        \n        # Generate available slots (this is a simplified version)\n        available_slots = []\n        current_date = start_dt.date()\n        end_date = end_dt.date()\n        \n        while current_date <= end_date:\n            # Generate slots from 9 AM to 5 PM (business hours)\n            for hour in range(9, 17):\n                slot_start = datetime.combine(current_date, datetime.min.time().replace(hour=hour))\n                slot_end = slot_start + timedelta(hours=1)\n                \n                # Check if slot conflicts with existing interviews\n                has_conflict = any(\n                    datetime.fromisoformat(interview['start_time']) < slot_end and\n                    datetime.fromisoformat(interview['end_time']) > slot_start\n                    for interview in active_interviews\n                )\n                \n                if not has_conflict:\n                    available_slots.append({\n                        'start_time': slot_start.isoformat(),\n                        'end_time': slot_end.isoformat()\n                    })\n            \n            current_date += timedelta(days=1)\n        \n        return Response({\n            'available_slots': available_slots,\n            'busy_slots': [\n                {\n                    'start_time': interview['start_time'],\n                    'end_time': interview['end_time']\n                } for interview in active_interviews\n            ]\n        }, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n","size_bytes":13907},"backend/api/jobs.py":{"content":"from django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_http_methods\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework import status\nfrom datetime import datetime\nimport json\n\nfrom es.repositories import JobRepository, UserRepository\nfrom ml.embeddings import EmbeddingGenerator\nfrom ml.ranking import RankingService\nfrom common.utils import generate_uuid\n\njob_repo = JobRepository()\nuser_repo = UserRepository()\nembedding_generator = EmbeddingGenerator()\nranking_service = RankingService()\n\n@api_view(['POST'])\ndef create_job(request):\n    \"\"\"Create a new job posting\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user or user['role'] != 'recruiter':\n            return Response({'error': 'Only recruiters can create jobs'}, status=status.HTTP_403_FORBIDDEN)\n        \n        data = request.data\n        \n        # Validate required fields\n        required_fields = ['title', 'description', 'company']\n        for field in required_fields:\n            if not data.get(field):\n                return Response({'error': f'{field} is required'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        # Create job text for embedding\n        job_text = f\"{data['title']} {data['description']} {' '.join(data.get('skills_required', []))}\"\n        job_embedding = embedding_generator.generate_embedding(job_text)\n        \n        # Create job data\n        job_data = {\n            'id': generate_uuid(),\n            'recruiter_id': user_id,\n            'title': data['title'],\n            'description': data['description'],\n            'company': data['company'],\n            'skills_required': data.get('skills_required', []),\n            'min_exp': data.get('min_exp'),\n            'location': data.get('location', ''),\n            'employment_type': data.get('employment_type', 'full-time'),\n            'job_vec': job_embedding,\n            'created_at': datetime.utcnow().isoformat(),\n            'status': 'open'\n        }\n        \n        # Save job to Elasticsearch\n        created_job = job_repo.create(job_data)\n        \n        return Response(created_job, status=status.HTTP_201_CREATED)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['GET'])\ndef get_jobs(request):\n    \"\"\"Get jobs for current recruiter\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user or user['role'] != 'recruiter':\n            return Response({'error': 'Only recruiters can view their jobs'}, status=status.HTTP_403_FORBIDDEN)\n        \n        jobs = job_repo.get_by_recruiter(user_id)\n        return Response(jobs, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['GET'])\ndef search_jobs(request):\n    \"\"\"Search jobs for job seekers\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user or user['role'] != 'seeker':\n            return Response({'error': 'Only job seekers can search jobs'}, status=status.HTTP_403_FORBIDDEN)\n        \n        query = request.GET.get('q', '')\n        location = request.GET.get('location', '')\n        employment_type = request.GET.get('employment_type', '')\n        \n        # Search jobs\n        jobs = job_repo.search_jobs(\n            query=query,\n            location=location,\n            employment_type=employment_type\n        )\n        \n        # If user has resume, calculate match scores\n        if user.get('resume_vec'):\n            for job in jobs:\n                if job.get('job_vec'):\n                    # Calculate hybrid score\n                    score = ranking_service.calculate_hybrid_score(\n                        resume_text=user.get('resume_text', ''),\n                        resume_vec=user['resume_vec'],\n                        job_text=f\"{job['title']} {job['description']}\",\n                        job_vec=job['job_vec'],\n                        resume_skills=user.get('skills', []),\n                        job_skills=job.get('skills_required', []),\n                        resume_exp=user.get('experience_years'),\n                        job_min_exp=job.get('min_exp'),\n                        same_location=(user.get('location', '').lower() == job.get('location', '').lower())\n                    )\n                    job['matchScore'] = score * 100  # Convert to percentage\n        \n        return Response(jobs, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['GET'])\ndef get_recommendations(request):\n    \"\"\"Get job recommendations for job seekers\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user or user['role'] != 'seeker':\n            return Response({'error': 'Only job seekers can get recommendations'}, status=status.HTTP_403_FORBIDDEN)\n        \n        # Get all open jobs\n        jobs = job_repo.get_open_jobs()\n        \n        # If user has resume, calculate match scores and sort by relevance\n        if user.get('resume_vec'):\n            scored_jobs = []\n            for job in jobs:\n                if job.get('job_vec'):\n                    # Calculate hybrid score\n                    score = ranking_service.calculate_hybrid_score(\n                        resume_text=user.get('resume_text', ''),\n                        resume_vec=user['resume_vec'],\n                        job_text=f\"{job['title']} {job['description']}\",\n                        job_vec=job['job_vec'],\n                        resume_skills=user.get('skills', []),\n                        job_skills=job.get('skills_required', []),\n                        resume_exp=user.get('experience_years'),\n                        job_min_exp=job.get('min_exp'),\n                        same_location=(user.get('location', '').lower() == job.get('location', '').lower())\n                    )\n                    job['matchScore'] = score * 100  # Convert to percentage\n                    scored_jobs.append(job)\n            \n            # Sort by match score and return top recommendations\n            scored_jobs.sort(key=lambda x: x.get('matchScore', 0), reverse=True)\n            return Response(scored_jobs[:10], status=status.HTTP_200_OK)\n        else:\n            # Return recent jobs if no resume\n            return Response(jobs[:10], status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['PUT'])\ndef update_job(request, job_id):\n    \"\"\"Update a job posting\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        job = job_repo.get_by_id(job_id)\n        if not job:\n            return Response({'error': 'Job not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        # Check if user owns this job\n        if job['recruiter_id'] != user_id:\n            return Response({'error': 'You can only update your own jobs'}, status=status.HTTP_403_FORBIDDEN)\n        \n        data = request.data\n        \n        # Update allowed fields\n        allowed_fields = ['title', 'description', 'company', 'skills_required', 'min_exp', 'location', 'employment_type', 'status']\n        update_data = {}\n        \n        for field in allowed_fields:\n            if field in data:\n                update_data[field] = data[field]\n        \n        # If job content changed, regenerate embedding\n        if any(field in update_data for field in ['title', 'description', 'skills_required']):\n            job_text = f\"{update_data.get('title', job['title'])} {update_data.get('description', job['description'])} {' '.join(update_data.get('skills_required', job.get('skills_required', [])))}\"\n            update_data['job_vec'] = embedding_generator.generate_embedding(job_text)\n        \n        if update_data:\n            updated_job = job_repo.update(job_id, update_data)\n            return Response(updated_job, status=status.HTTP_200_OK)\n        \n        return Response({'message': 'No fields to update'}, status=status.HTTP_400_BAD_REQUEST)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['DELETE'])\ndef delete_job(request, job_id):\n    \"\"\"Delete a job posting\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        job = job_repo.get_by_id(job_id)\n        if not job:\n            return Response({'error': 'Job not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        # Check if user owns this job\n        if job['recruiter_id'] != user_id:\n            return Response({'error': 'You can only delete your own jobs'}, status=status.HTTP_403_FORBIDDEN)\n        \n        job_repo.delete(job_id)\n        return Response({'message': 'Job deleted successfully'}, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n","size_bytes":10235},"backend/api/middleware.py":{"content":"import jwt\nfrom django.conf import settings\nfrom django.http import JsonResponse\nfrom django.utils.deprecation import MiddlewareMixin\nfrom es.repositories import UserRepository\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass JWTAuthenticationMiddleware(MiddlewareMixin):\n    \"\"\"Middleware to handle JWT authentication for API requests\"\"\"\n    \n    def __init__(self, get_response):\n        self.get_response = get_response\n        self.user_repo = UserRepository()\n        super().__init__(get_response)\n    \n    def process_request(self, request):\n        # Skip authentication for auth endpoints\n        if request.path.startswith('/api/auth/'):\n            return None\n        \n        # Skip authentication for non-API requests\n        if not request.path.startswith('/api/'):\n            return None\n        \n        # Skip authentication for OPTIONS requests (CORS preflight)\n        if request.method == 'OPTIONS':\n            return None\n        \n        # Get authorization header\n        auth_header = request.META.get('HTTP_AUTHORIZATION')\n        \n        if not auth_header or not auth_header.startswith('Bearer '):\n            return JsonResponse({'error': 'Authentication required'}, status=401)\n        \n        # Extract token\n        token = auth_header.split(' ')[1]\n        \n        try:\n            # Decode JWT token\n            payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=[settings.JWT_ALGORITHM])\n            user_id = payload.get('user_id')\n            \n            if not user_id:\n                return JsonResponse({'error': 'Invalid token'}, status=401)\n            \n            # Get user from Elasticsearch\n            user = self.user_repo.get_by_id(user_id)\n            if not user:\n                return JsonResponse({'error': 'User not found'}, status=401)\n            \n            # Add user info to request\n            request.user_id = user_id\n            request.user_role = user.get('role')\n            request.user_data = user\n            \n        except jwt.ExpiredSignatureError:\n            return JsonResponse({'error': 'Token expired'}, status=401)\n        except jwt.InvalidTokenError:\n            return JsonResponse({'error': 'Invalid token'}, status=401)\n        except Exception as e:\n            logger.error(f\"Authentication error: {e}\")\n            return JsonResponse({'error': 'Authentication failed'}, status=500)\n        \n        return None\n\nclass CORSMiddleware(MiddlewareMixin):\n    \"\"\"Middleware to handle CORS headers\"\"\"\n    \n    def process_response(self, request, response):\n        # Allow requests from the frontend\n        origin = request.META.get('HTTP_ORIGIN')\n        if origin and (origin.startswith('http://localhost') or origin.startswith('http://127.0.0.1')):\n            response['Access-Control-Allow-Origin'] = origin\n        elif settings.DEBUG:\n            response['Access-Control-Allow-Origin'] = '*'\n        \n        response['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'\n        response['Access-Control-Allow-Headers'] = 'Content-Type, Authorization, X-Requested-With'\n        response['Access-Control-Allow-Credentials'] = 'true'\n        response['Access-Control-Max-Age'] = '86400'  # 24 hours\n        \n        return response\n\nclass RequestLoggingMiddleware(MiddlewareMixin):\n    \"\"\"Middleware to log API requests\"\"\"\n    \n    def process_request(self, request):\n        if request.path.startswith('/api/') and settings.DEBUG:\n            user_id = getattr(request, 'user_id', 'Anonymous')\n            logger.info(f\"{request.method} {request.path} - User: {user_id}\")\n        return None\n    \n    def process_response(self, request, response):\n        if request.path.startswith('/api/') and settings.DEBUG:\n            user_id = getattr(request, 'user_id', 'Anonymous')\n            logger.info(f\"{request.method} {request.path} - {response.status_code} - User: {user_id}\")\n        return response\n\nclass SecurityHeadersMiddleware(MiddlewareMixin):\n    \"\"\"Middleware to add security headers\"\"\"\n    \n    def process_response(self, request, response):\n        # Security headers\n        response['X-Content-Type-Options'] = 'nosniff'\n        response['X-Frame-Options'] = 'DENY'\n        response['X-XSS-Protection'] = '1; mode=block'\n        response['Referrer-Policy'] = 'strict-origin-when-cross-origin'\n        \n        # Content Security Policy for API responses\n        if request.path.startswith('/api/'):\n            response['Content-Security-Policy'] = \"default-src 'none'; frame-ancestors 'none';\"\n        \n        return response\n\nclass RateLimitMiddleware(MiddlewareMixin):\n    \"\"\"Basic rate limiting middleware\"\"\"\n    \n    def __init__(self, get_response):\n        self.get_response = get_response\n        self.requests = {}  # In production, use Redis or database\n        super().__init__(get_response)\n    \n    def process_request(self, request):\n        if not settings.RATE_LIMIT_ENABLED:\n            return None\n        \n        if not request.path.startswith('/api/'):\n            return None\n        \n        # Get client IP\n        ip = self.get_client_ip(request)\n        current_time = time.time()\n        \n        # Clean old entries\n        self.cleanup_old_requests(current_time)\n        \n        # Check rate limit\n        if ip in self.requests:\n            request_times = self.requests[ip]\n            recent_requests = [t for t in request_times if current_time - t < settings.RATE_LIMIT_WINDOW]\n            \n            if len(recent_requests) >= settings.RATE_LIMIT_REQUESTS:\n                return JsonResponse({\n                    'error': 'Rate limit exceeded',\n                    'retry_after': settings.RATE_LIMIT_WINDOW\n                }, status=429)\n            \n            self.requests[ip] = recent_requests + [current_time]\n        else:\n            self.requests[ip] = [current_time]\n        \n        return None\n    \n    def get_client_ip(self, request):\n        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')\n        if x_forwarded_for:\n            ip = x_forwarded_for.split(',')[0]\n        else:\n            ip = request.META.get('REMOTE_ADDR')\n        return ip\n    \n    def cleanup_old_requests(self, current_time):\n        for ip in list(self.requests.keys()):\n            self.requests[ip] = [t for t in self.requests[ip] if current_time - t < settings.RATE_LIMIT_WINDOW]\n            if not self.requests[ip]:\n                del self.requests[ip]\n\nclass ErrorHandlingMiddleware(MiddlewareMixin):\n    \"\"\"Middleware to handle and log errors\"\"\"\n    \n    def process_exception(self, request, exception):\n        if request.path.startswith('/api/'):\n            logger.error(f\"API Error: {exception}\", exc_info=True)\n            \n            if settings.DEBUG:\n                return JsonResponse({\n                    'error': 'Internal server error',\n                    'detail': str(exception)\n                }, status=500)\n            else:\n                return JsonResponse({\n                    'error': 'Internal server error'\n                }, status=500)\n        \n        return None\n\n# Import time for rate limiting\nimport time\n","size_bytes":7145},"backend/api/routing.py":{"content":"from django.urls import re_path\nfrom . import chat\n\nwebsocket_urlpatterns = [\n    re_path(r'ws/chat/(?P<application_id>[^/]+)/$', chat.ChatConsumer.as_asgi()),\n]\n","size_bytes":162},"backend/api/urls.py":{"content":"from django.urls import path, include\nfrom . import auth, users, jobs, applications, interviews, chat\n\nurlpatterns = [\n    # Authentication endpoints\n    path('auth/register/', auth.register, name='register'),\n    path('auth/login/', auth.login, name='login'),\n    path('auth/logout/', auth.logout, name='logout'),\n    path('me/', auth.me, name='me'),\n    \n    # User endpoints\n    path('me/update/', users.update_profile, name='update_profile'),\n    path('me/resume/', users.upload_resume, name='upload_resume'),\n    path('candidates/search/', users.search_candidates, name='search_candidates'),\n    \n    # Job endpoints\n    path('jobs/', jobs.create_job, name='create_job'),\n    path('jobs/mine/', jobs.get_jobs, name='get_jobs'),\n    path('jobs/search/', jobs.search_jobs, name='search_jobs'),\n    path('jobs/recommendations/', jobs.get_recommendations, name='get_recommendations'),\n    path('jobs/<str:job_id>/', jobs.update_job, name='update_job'),\n    path('jobs/<str:job_id>/delete/', jobs.delete_job, name='delete_job'),\n    \n    # Application endpoints\n    path('jobs/<str:job_id>/apply/', applications.apply_to_job, name='apply_to_job'),\n    path('applications/me/', applications.get_my_applications, name='get_my_applications'),\n    path('applications/jobs/', applications.get_job_applications, name='get_job_applications'),\n    path('applications/jobs/<str:job_id>/', applications.get_job_applications_by_id, name='get_job_applications_by_id'),\n    path('applications/<str:application_id>/status/', applications.update_application_status, name='update_application_status'),\n    path('jobs/<str:job_id>/rank/', applications.bulk_rank_candidates, name='bulk_rank_candidates'),\n    \n    # Interview endpoints\n    path('interviews/', interviews.schedule_interview, name='schedule_interview'),\n    path('interviews/me/', interviews.get_my_interviews, name='get_my_interviews'),\n    path('interviews/<str:interview_id>/', interviews.update_interview, name='update_interview'),\n    path('interviews/<str:interview_id>/cancel/', interviews.cancel_interview, name='cancel_interview'),\n    path('interviews/availability/', interviews.get_interview_availability, name='get_interview_availability'),\n    \n    # Chat endpoints\n    path('chat/<str:application_id>/history/', chat.get_chat_history, name='get_chat_history'),\n]\n","size_bytes":2324},"backend/api/users.py":{"content":"from django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_http_methods\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework import status\nfrom datetime import datetime\nimport json\n\nfrom es.repositories import UserRepository\nfrom storage.files import FileStorage\nfrom ml.resume_parser import ResumeParser\nfrom ml.embeddings import EmbeddingGenerator\nfrom common.utils import generate_uuid\n\nuser_repo = UserRepository()\nfile_storage = FileStorage()\nresume_parser = ResumeParser()\nembedding_generator = EmbeddingGenerator()\n\n@api_view(['PUT'])\ndef update_profile(request):\n    \"\"\"Update user profile\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user:\n            return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        data = request.data\n        \n        # Update allowed fields\n        allowed_fields = ['full_name', 'headline', 'skills', 'experience_years', 'location']\n        update_data = {}\n        \n        for field in allowed_fields:\n            if field in data:\n                update_data[field] = data[field]\n        \n        if update_data:\n            update_data['updated_at'] = datetime.utcnow().isoformat()\n            updated_user = user_repo.update(user_id, update_data)\n            \n            # Remove password hash from response\n            user_response = {k: v for k, v in updated_user.items() if k != 'password_hash'}\n            return Response(user_response, status=status.HTTP_200_OK)\n        \n        return Response({'message': 'No fields to update'}, status=status.HTTP_400_BAD_REQUEST)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['POST'])\ndef upload_resume(request):\n    \"\"\"Upload and parse resume\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user:\n            return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        if 'resume' not in request.FILES:\n            return Response({'error': 'Resume file is required'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        resume_file = request.FILES['resume']\n        \n        # Validate file type\n        allowed_extensions = ['.pdf', '.docx']\n        file_extension = resume_file.name.lower().split('.')[-1]\n        if f'.{file_extension}' not in allowed_extensions:\n            return Response({'error': 'Only PDF and DOCX files are allowed'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        # Generate unique filename\n        filename = f\"resumes/{user_id}_{generate_uuid()}.{file_extension}\"\n        \n        # Save file\n        file_path = file_storage.save_file(resume_file, filename)\n        \n        # Parse resume\n        resume_text = resume_parser.extract_text(resume_file)\n        if not resume_text:\n            return Response({'error': 'Failed to extract text from resume'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        # Extract skills and other information\n        parsed_data = resume_parser.parse_resume(resume_text)\n        \n        # Generate embeddings\n        resume_embedding = embedding_generator.generate_embedding(resume_text)\n        \n        # Update user with resume data\n        update_data = {\n            'resume_file_path': file_path,\n            'resume_text': resume_text,\n            'resume_vec': resume_embedding,\n            'updated_at': datetime.utcnow().isoformat()\n        }\n        \n        # Update skills if found in resume\n        if parsed_data.get('skills'):\n            update_data['skills'] = list(set(user.get('skills', []) + parsed_data['skills']))\n        \n        # Update experience if found in resume\n        if parsed_data.get('experience_years') and not user.get('experience_years'):\n            update_data['experience_years'] = parsed_data['experience_years']\n        \n        updated_user = user_repo.update(user_id, update_data)\n        \n        # Remove password hash from response\n        user_response = {k: v for k, v in updated_user.items() if k != 'password_hash'}\n        \n        return Response({\n            'user': user_response,\n            'parsed_data': parsed_data\n        }, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@api_view(['GET'])\ndef search_candidates(request):\n    \"\"\"Search candidates (for recruiters)\"\"\"\n    try:\n        user_id = getattr(request, 'user_id', None)\n        if not user_id:\n            return Response({'error': 'User not authenticated'}, status=status.HTTP_401_UNAUTHORIZED)\n        \n        user = user_repo.get_by_id(user_id)\n        if not user or user['role'] != 'recruiter':\n            return Response({'error': 'Only recruiters can search candidates'}, status=status.HTTP_403_FORBIDDEN)\n        \n        query = request.GET.get('q', '')\n        skills = request.GET.get('skills', '').split(',') if request.GET.get('skills') else []\n        location = request.GET.get('location', '')\n        min_experience = request.GET.get('min_experience')\n        \n        # Search candidates\n        candidates = user_repo.search_candidates(\n            query=query,\n            skills=skills,\n            location=location,\n            min_experience=int(min_experience) if min_experience else None\n        )\n        \n        # Remove sensitive information\n        for candidate in candidates:\n            candidate.pop('password_hash', None)\n            candidate.pop('resume_text', None)\n            candidate.pop('resume_vec', None)\n        \n        return Response(candidates, status=status.HTTP_200_OK)\n        \n    except Exception as e:\n        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n","size_bytes":6352},"backend/common/__init__.py":{"content":"# Common utilities and shared functionality\n","size_bytes":44},"backend/common/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass CommonConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'common'\n    verbose_name = 'Common Utilities'\n\n    def ready(self):\n        \"\"\"Initialize common utilities when app is ready\"\"\"\n        try:\n            # Perform any common initialization here\n            print(\"Common: Utilities initialized successfully\")\n        except Exception as e:\n            print(f\"Common: Warning - Failed to initialize utilities: {e}\")\n","size_bytes":501},"backend/common/security.py":{"content":"import hashlib\nimport secrets\nimport bcrypt\nfrom typing import Optional\n\ndef hash_password(password: str) -> str:\n    \"\"\"Hash a password using bcrypt\"\"\"\n    salt = bcrypt.gensalt()\n    hashed = bcrypt.hashpw(password.encode('utf-8'), salt)\n    return hashed.decode('utf-8')\n\ndef verify_password(password: str, hashed_password: str) -> bool:\n    \"\"\"Verify a password against its hash\"\"\"\n    try:\n        return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))\n    except Exception:\n        return False\n\ndef generate_secure_token(length: int = 32) -> str:\n    \"\"\"Generate a secure random token\"\"\"\n    return secrets.token_urlsafe(length)\n\ndef hash_data(data: str, salt: Optional[str] = None) -> str:\n    \"\"\"Hash arbitrary data with optional salt\"\"\"\n    if salt is None:\n        salt = secrets.token_hex(16)\n    \n    combined = f\"{data}{salt}\"\n    hashed = hashlib.sha256(combined.encode('utf-8')).hexdigest()\n    return f\"{salt}${hashed}\"\n\ndef verify_data_hash(data: str, hashed_data: str) -> bool:\n    \"\"\"Verify data against its hash\"\"\"\n    try:\n        salt, expected_hash = hashed_data.split('$', 1)\n        combined = f\"{data}{salt}\"\n        actual_hash = hashlib.sha256(combined.encode('utf-8')).hexdigest()\n        return secrets.compare_digest(expected_hash, actual_hash)\n    except Exception:\n        return False\n\ndef sanitize_filename(filename: str) -> str:\n    \"\"\"Sanitize filename for safe storage\"\"\"\n    import re\n    import unicodedata\n    \n    # Normalize unicode\n    filename = unicodedata.normalize('NFKD', filename)\n    \n    # Remove special characters\n    filename = re.sub(r'[^\\w\\s.-]', '', filename)\n    \n    # Replace spaces with underscores\n    filename = re.sub(r'\\s+', '_', filename)\n    \n    # Limit length\n    if len(filename) > 100:\n        name, ext = filename.rsplit('.', 1) if '.' in filename else (filename, '')\n        filename = f\"{name[:90]}.{ext}\" if ext else name[:100]\n    \n    return filename\n\ndef validate_email(email: str) -> bool:\n    \"\"\"Validate email format\"\"\"\n    import re\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None\n\ndef validate_password_strength(password: str) -> tuple[bool, str]:\n    \"\"\"Validate password strength\"\"\"\n    if len(password) < 8:\n        return False, \"Password must be at least 8 characters long\"\n    \n    if not any(c.isupper() for c in password):\n        return False, \"Password must contain at least one uppercase letter\"\n    \n    if not any(c.islower() for c in password):\n        return False, \"Password must contain at least one lowercase letter\"\n    \n    if not any(c.isdigit() for c in password):\n        return False, \"Password must contain at least one digit\"\n    \n    return True, \"Password is strong\"\n","size_bytes":2772},"backend/common/utils.py":{"content":"import uuid\nimport re\nfrom datetime import datetime, timezone\nfrom typing import Any, Dict, List, Optional, Union\n\ndef generate_uuid() -> str:\n    \"\"\"Generate a UUID4 string\"\"\"\n    return str(uuid.uuid4())\n\ndef get_current_timestamp() -> str:\n    \"\"\"Get current timestamp in ISO format\"\"\"\n    return datetime.now(timezone.utc).isoformat()\n\ndef parse_timestamp(timestamp_str: str) -> Optional[datetime]:\n    \"\"\"Parse ISO timestamp string to datetime object\"\"\"\n    try:\n        return datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))\n    except (ValueError, AttributeError):\n        return None\n\ndef slugify(text: str) -> str:\n    \"\"\"Convert text to URL-friendly slug\"\"\"\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s-]', '', text)\n    text = re.sub(r'[-\\s]+', '-', text)\n    return text.strip('-')\n\ndef truncate_text(text: str, max_length: int = 100, suffix: str = '...') -> str:\n    \"\"\"Truncate text to specified length\"\"\"\n    if len(text) <= max_length:\n        return text\n    return text[:max_length - len(suffix)] + suffix\n\ndef extract_keywords(text: str, min_length: int = 3) -> List[str]:\n    \"\"\"Extract keywords from text\"\"\"\n    # Remove punctuation and convert to lowercase\n    cleaned = re.sub(r'[^\\w\\s]', ' ', text.lower())\n    \n    # Split into words and filter\n    words = [word for word in cleaned.split() if len(word) >= min_length]\n    \n    # Remove common stop words\n    stop_words = {\n        'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for',\n        'of', 'with', 'by', 'is', 'are', 'was', 'were', 'be', 'been', 'being',\n        'have', 'has', 'had', 'will', 'would', 'could', 'should', 'may', 'might',\n        'can', 'must', 'shall', 'this', 'that', 'these', 'those'\n    }\n    \n    keywords = [word for word in words if word not in stop_words]\n    \n    # Remove duplicates while preserving order\n    unique_keywords = []\n    seen = set()\n    for keyword in keywords:\n        if keyword not in seen:\n            unique_keywords.append(keyword)\n            seen.add(keyword)\n    \n    return unique_keywords\n\ndef calculate_percentage(part: Union[int, float], total: Union[int, float]) -> float:\n    \"\"\"Calculate percentage safely\"\"\"\n    if total == 0:\n        return 0.0\n    return round((part / total) * 100, 2)\n\ndef normalize_score(score: float, min_val: float = 0.0, max_val: float = 1.0) -> float:\n    \"\"\"Normalize score to specified range\"\"\"\n    return max(min_val, min(max_val, score))\n\ndef deep_merge_dicts(dict1: Dict[str, Any], dict2: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Deep merge two dictionaries\"\"\"\n    result = dict1.copy()\n    \n    for key, value in dict2.items():\n        if key in result and isinstance(result[key], dict) and isinstance(value, dict):\n            result[key] = deep_merge_dicts(result[key], value)\n        else:\n            result[key] = value\n    \n    return result\n\ndef flatten_dict(d: Dict[str, Any], parent_key: str = '', sep: str = '.') -> Dict[str, Any]:\n    \"\"\"Flatten nested dictionary\"\"\"\n    items = []\n    for k, v in d.items():\n        new_key = f\"{parent_key}{sep}{k}\" if parent_key else k\n        if isinstance(v, dict):\n            items.extend(flatten_dict(v, new_key, sep=sep).items())\n        else:\n            items.append((new_key, v))\n    return dict(items)\n\ndef validate_uuid(uuid_string: str) -> bool:\n    \"\"\"Validate UUID string format\"\"\"\n    try:\n        uuid.UUID(uuid_string)\n        return True\n    except ValueError:\n        return False\n\ndef clean_html(text: str) -> str:\n    \"\"\"Remove HTML tags from text\"\"\"\n    import re\n    clean = re.compile('<.*?>')\n    return re.sub(clean, '', text)\n\ndef format_file_size(size_bytes: int) -> str:\n    \"\"\"Format file size in human readable format\"\"\"\n    if size_bytes == 0:\n        return \"0 B\"\n    \n    size_names = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]\n    i = 0\n    size = float(size_bytes)\n    \n    while size >= 1024.0 and i < len(size_names) - 1:\n        size /= 1024.0\n        i += 1\n    \n    return f\"{size:.1f} {size_names[i]}\"\n\ndef extract_domain_from_email(email: str) -> Optional[str]:\n    \"\"\"Extract domain from email address\"\"\"\n    try:\n        return email.split('@')[1]\n    except (IndexError, AttributeError):\n        return None\n\ndef is_business_hours(dt: datetime = None) -> bool:\n    \"\"\"Check if given datetime is within business hours (9 AM - 5 PM, Mon-Fri)\"\"\"\n    if dt is None:\n        dt = datetime.now()\n    \n    # Check if it's a weekday (Monday = 0, Sunday = 6)\n    if dt.weekday() >= 5:  # Saturday or Sunday\n        return False\n    \n    # Check if it's between 9 AM and 5 PM\n    return 9 <= dt.hour < 17\n\ndef paginate_results(items: List[Any], page: int = 1, per_page: int = 20) -> Dict[str, Any]:\n    \"\"\"Paginate a list of items\"\"\"\n    total = len(items)\n    start = (page - 1) * per_page\n    end = start + per_page\n    \n    paginated_items = items[start:end]\n    \n    total_pages = (total + per_page - 1) // per_page\n    \n    return {\n        'items': paginated_items,\n        'pagination': {\n            'page': page,\n            'per_page': per_page,\n            'total': total,\n            'total_pages': total_pages,\n            'has_prev': page > 1,\n            'has_next': page < total_pages\n        }\n    }\n","size_bytes":5195},"backend/config/__init__.py":{"content":"","size_bytes":0},"backend/config/asgi.py":{"content":"import os\n\nfrom channels.auth import AuthMiddlewareStack\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom channels.security.websocket import AllowedHostsOriginValidator\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n\ndjango_asgi_app = get_asgi_application()\n\nfrom api.routing import websocket_urlpatterns\n\napplication = ProtocolTypeRouter({\n    'http': django_asgi_app,\n    'websocket': AllowedHostsOriginValidator(\n        AuthMiddlewareStack(\n            URLRouter(websocket_urlpatterns)\n        )\n    ),\n})\n","size_bytes":596},"backend/config/settings.py":{"content":"import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-dev-key-change-in-production')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'\n\nALLOWED_HOSTS = ['*']\n\n# Application definition\nDJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nTHIRD_PARTY_APPS = [\n    'rest_framework',\n    'corsheaders',\n    'channels',\n]\n\nLOCAL_APPS = [\n    'api',\n    'ml',\n    'es',\n    'storage',\n    'common',\n]\n\nINSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS\n\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'api.middleware.JWTAuthenticationMiddleware',\n    'api.middleware.CORSMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'config.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'config.wsgi.application'\nASGI_APPLICATION = 'config.asgi.application'\n\n# Since we're using Elasticsearch only, no traditional database\nDATABASES = {}\n\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 20\n}\n\n# CORS settings\nCORS_ALLOW_ALL_ORIGINS = DEBUG\nCORS_ALLOW_CREDENTIALS = True\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5000\",\n    \"http://127.0.0.1:5000\",\n] if not DEBUG else []\n\n# Elasticsearch settings\nELASTICSEARCH_HOST = os.environ.get('ELASTICSEARCH_HOST', 'localhost')\nELASTICSEARCH_PORT = int(os.environ.get('ELASTICSEARCH_PORT', '9200'))\nELASTICSEARCH_USERNAME = os.environ.get('ELASTICSEARCH_USERNAME', '')\nELASTICSEARCH_PASSWORD = os.environ.get('ELASTICSEARCH_PASSWORD', '')\n\n# File storage settings\nFILE_STORAGE_BACKEND = os.environ.get('FILE_STORAGE_BACKEND', 'local')\nAWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', '')\nAWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '')\nAWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME', '')\nAWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME', 'us-east-1')\n\n# JWT settings\nJWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY', SECRET_KEY)\nJWT_ALGORITHM = 'HS256'\nJWT_EXPIRATION_DELTA = 24 * 60 * 60  # 24 hours in seconds\n\n# ML Model settings\nSENTENCE_TRANSFORMER_MODEL = os.environ.get('SENTENCE_TRANSFORMER_MODEL', 'all-MiniLM-L6-v2')\nEMBEDDING_DIMENSION = int(os.environ.get('EMBEDDING_DIMENSION', '384'))\n\n# Channels settings\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels.layers.InMemoryChannelLayer',\n    },\n}\n\n# File upload settings\nFILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB\nDATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB\n\n# Security settings\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n\nif not DEBUG:\n    SECURE_SSL_REDIRECT = True\n    SESSION_COOKIE_SECURE = True\n    CSRF_COOKIE_SECURE = True\n    SECURE_HSTS_SECONDS = 31536000\n    SECURE_HSTS_INCLUDE_SUBDOMAINS = True\n    SECURE_HSTS_PRELOAD = True\n\n# Logging\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',\n            'style': '{',\n        },\n        'simple': {\n            'format': '{levelname} {message}',\n            'style': '{',\n        },\n    },\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n            'formatter': 'simple',\n        },\n        'file': {\n            'class': 'logging.FileHandler',\n            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),\n            'formatter': 'verbose',\n        },\n    },\n    'root': {\n        'handlers': ['console'],\n        'level': 'INFO',\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['console', 'file'] if not DEBUG else ['console'],\n            'level': 'INFO',\n            'propagate': False,\n        },\n        'elasticsearch': {\n            'handlers': ['console'],\n            'level': 'WARNING',\n            'propagate': False,\n        },\n        'api': {\n            'handlers': ['console', 'file'] if not DEBUG else ['console'],\n            'level': 'DEBUG' if DEBUG else 'INFO',\n            'propagate': False,\n        },\n        'ml': {\n            'handlers': ['console'],\n            'level': 'INFO',\n            'propagate': False,\n        },\n    },\n}\n\n# Create logs directory if it doesn't exist\nos.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)\n\n# Cache settings (using in-memory cache for simplicity)\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n        'LOCATION': 'unique-snowflake',\n        'TIMEOUT': 300,  # 5 minutes\n        'OPTIONS': {\n            'MAX_ENTRIES': 1000,\n        }\n    }\n}\n\n# Session settings\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\nSESSION_CACHE_ALIAS = 'default'\nSESSION_COOKIE_AGE = 86400  # 24 hours\n\n# Email settings (for future notifications)\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\nDEFAULT_FROM_EMAIL = 'noreply@aitalentmatch.com'\n\n# Internationalization settings\nUSE_L10N = True\nDECIMAL_SEPARATOR = '.'\nTHOUSAND_SEPARATOR = ','\n\n# Custom settings for the application\nAPP_NAME = 'AI Talent Match'\nAPP_VERSION = '1.0.0'\nMAX_RESUME_SIZE = 5 * 1024 * 1024  # 5MB\nALLOWED_RESUME_EXTENSIONS = ['.pdf', '.docx', '.doc']\n\n# ML Pipeline settings\nML_BATCH_SIZE = 32\nML_MAX_TEXT_LENGTH = 5000\nRANKING_WEIGHTS = {\n    'bm25': 0.4,\n    'semantic': 0.5,\n    'rule_boost': 0.1\n}\n\n# Rate limiting (for future implementation)\nRATE_LIMIT_ENABLED = True\nRATE_LIMIT_REQUESTS = 100\nRATE_LIMIT_WINDOW = 3600  # 1 hour\n\n# Monitoring and analytics\nANALYTICS_ENABLED = os.environ.get('ANALYTICS_ENABLED', 'False').lower() == 'true'\nSENTRY_DSN = os.environ.get('SENTRY_DSN', '')\n\nif SENTRY_DSN and not DEBUG:\n    import sentry_sdk\n    from sentry_sdk.integrations.django import DjangoIntegration\n    \n    sentry_sdk.init(\n        dsn=SENTRY_DSN,\n        integrations=[DjangoIntegration()],\n        traces_sample_rate=0.1,\n        send_default_pii=True\n    )\n","size_bytes":8325},"backend/config/urls.py":{"content":"from django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('api.urls')),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n","size_bytes":343},"backend/config/wsgi.py":{"content":"import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n\napplication = get_wsgi_application()\n","size_bytes":167},"backend/es/__init__.py":{"content":"","size_bytes":0},"backend/es/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass EsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'es'\n    verbose_name = 'Elasticsearch'\n\n    def ready(self):\n        \"\"\"Initialize Elasticsearch when app is ready\"\"\"\n        try:\n            from .client import check_elasticsearch_connection\n            from .indices import initialize_indices\n            \n            if check_elasticsearch_connection():\n                print(\"ES: Connected to Elasticsearch successfully\")\n                if initialize_indices():\n                    print(\"ES: All indices initialized successfully\")\n                else:\n                    print(\"ES: Warning - Some indices failed to initialize\")\n            else:\n                print(\"ES: Warning - Elasticsearch connection failed\")\n        except Exception as e:\n            print(f\"ES: Error during initialization: {e}\")\n","size_bytes":898},"backend/es/client.py":{"content":"from elasticsearch import Elasticsearch\nfrom elasticsearch.exceptions import ConnectionError, RequestError\nfrom django.conf import settings\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass ElasticsearchClient:\n    _instance = None\n    _client = None\n    \n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(ElasticsearchClient, cls).__new__(cls)\n        return cls._instance\n    \n    def __init__(self):\n        if self._client is None:\n            self._client = self._create_client()\n    \n    def _create_client(self):\n        \"\"\"Create Elasticsearch client\"\"\"\n        try:\n            # Build connection configuration\n            config = {\n                'hosts': [{'host': settings.ELASTICSEARCH_HOST, 'port': settings.ELASTICSEARCH_PORT}],\n                'timeout': 30,\n                'max_retries': 3,\n                'retry_on_timeout': True\n            }\n            \n            # Add authentication if provided\n            if settings.ELASTICSEARCH_USERNAME and settings.ELASTICSEARCH_PASSWORD:\n                config['http_auth'] = (settings.ELASTICSEARCH_USERNAME, settings.ELASTICSEARCH_PASSWORD)\n            \n            client = Elasticsearch(**config)\n            \n            # Test connection\n            if client.ping():\n                logger.info(\"Successfully connected to Elasticsearch\")\n                return client\n            else:\n                logger.error(\"Failed to ping Elasticsearch\")\n                return None\n                \n        except Exception as e:\n            logger.error(f\"Failed to create Elasticsearch client: {e}\")\n            return None\n    \n    def get_client(self):\n        \"\"\"Get Elasticsearch client instance\"\"\"\n        if self._client is None:\n            self._client = self._create_client()\n        return self._client\n    \n    def is_connected(self):\n        \"\"\"Check if connected to Elasticsearch\"\"\"\n        try:\n            return self._client is not None and self._client.ping()\n        except:\n            return False\n    \n    def close(self):\n        \"\"\"Close Elasticsearch connection\"\"\"\n        if self._client:\n            try:\n                self._client.close()\n            except:\n                pass\n            self._client = None\n\n# Singleton instance\nes_client = ElasticsearchClient()\n\ndef get_elasticsearch_client():\n    \"\"\"Get the global Elasticsearch client\"\"\"\n    return es_client.get_client()\n\ndef check_elasticsearch_connection():\n    \"\"\"Check if Elasticsearch is available\"\"\"\n    return es_client.is_connected()\n\ndef create_index_if_not_exists(index_name: str, mapping: dict):\n    \"\"\"Create index with mapping if it doesn't exist\"\"\"\n    client = get_elasticsearch_client()\n    if not client:\n        logger.error(\"Elasticsearch client not available\")\n        return False\n    \n    try:\n        if not client.indices.exists(index=index_name):\n            response = client.indices.create(\n                index=index_name,\n                body={\n                    \"mappings\": mapping,\n                    \"settings\": {\n                        \"number_of_shards\": 1,\n                        \"number_of_replicas\": 0,\n                        \"analysis\": {\n                            \"analyzer\": {\n                                \"custom_text_analyzer\": {\n                                    \"type\": \"custom\",\n                                    \"tokenizer\": \"standard\",\n                                    \"filter\": [\"lowercase\", \"stop\", \"snowball\"]\n                                }\n                            }\n                        }\n                    }\n                }\n            )\n            logger.info(f\"Created index: {index_name}\")\n            return True\n        else:\n            logger.info(f\"Index already exists: {index_name}\")\n            return True\n            \n    except Exception as e:\n        logger.error(f\"Failed to create index {index_name}: {e}\")\n        return False\n\ndef delete_index(index_name: str):\n    \"\"\"Delete an index\"\"\"\n    client = get_elasticsearch_client()\n    if not client:\n        logger.error(\"Elasticsearch client not available\")\n        return False\n    \n    try:\n        if client.indices.exists(index=index_name):\n            client.indices.delete(index=index_name)\n            logger.info(f\"Deleted index: {index_name}\")\n            return True\n        else:\n            logger.info(f\"Index does not exist: {index_name}\")\n            return True\n            \n    except Exception as e:\n        logger.error(f\"Failed to delete index {index_name}: {e}\")\n        return False\n\ndef refresh_index(index_name: str):\n    \"\"\"Refresh an index to make recent changes searchable\"\"\"\n    client = get_elasticsearch_client()\n    if not client:\n        return False\n    \n    try:\n        client.indices.refresh(index=index_name)\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to refresh index {index_name}: {e}\")\n        return False\n\ndef bulk_index_documents(index_name: str, documents: list):\n    \"\"\"Bulk index multiple documents\"\"\"\n    client = get_elasticsearch_client()\n    if not client:\n        logger.error(\"Elasticsearch client not available\")\n        return False\n    \n    try:\n        from elasticsearch.helpers import bulk\n        \n        actions = []\n        for doc in documents:\n            action = {\n                \"_index\": index_name,\n                \"_id\": doc.get('id'),\n                \"_source\": doc\n            }\n            actions.append(action)\n        \n        if actions:\n            success, failed = bulk(client, actions)\n            logger.info(f\"Bulk indexed {success} documents to {index_name}\")\n            if failed:\n                logger.warning(f\"Failed to index {len(failed)} documents\")\n            return True\n        else:\n            logger.info(\"No documents to index\")\n            return True\n            \n    except Exception as e:\n        logger.error(f\"Failed to bulk index documents to {index_name}: {e}\")\n        return False\n","size_bytes":5990},"backend/es/indices.py":{"content":"from .client import create_index_if_not_exists\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n# Index mappings following the specification\nUSERS_MAPPING = {\n    \"properties\": {\n        \"id\": {\"type\": \"keyword\"},\n        \"role\": {\"type\": \"keyword\"},\n        \"email\": {\"type\": \"keyword\"},\n        \"password_hash\": {\"type\": \"keyword\"},\n        \"full_name\": {\"type\": \"text\"},\n        \"headline\": {\"type\": \"text\"},\n        \"skills\": {\"type\": \"keyword\"},\n        \"experience_years\": {\"type\": \"integer\"},\n        \"location\": {\"type\": \"keyword\"},\n        \"resume_file_path\": {\"type\": \"keyword\"},\n        \"resume_text\": {\n            \"type\": \"text\",\n            \"analyzer\": \"custom_text_analyzer\"\n        },\n        \"resume_vec\": {\n            \"type\": \"dense_vector\",\n            \"dims\": 384,\n            \"index\": True,\n            \"similarity\": \"cosine\"\n        },\n        \"created_at\": {\"type\": \"date\"},\n        \"updated_at\": {\"type\": \"date\"}\n    }\n}\n\nJOBS_MAPPING = {\n    \"properties\": {\n        \"id\": {\"type\": \"keyword\"},\n        \"recruiter_id\": {\"type\": \"keyword\"},\n        \"title\": {\n            \"type\": \"text\",\n            \"analyzer\": \"custom_text_analyzer\"\n        },\n        \"description\": {\n            \"type\": \"text\",\n            \"analyzer\": \"custom_text_analyzer\"\n        },\n        \"company\": {\"type\": \"keyword\"},\n        \"skills_required\": {\"type\": \"keyword\"},\n        \"min_exp\": {\"type\": \"integer\"},\n        \"location\": {\"type\": \"keyword\"},\n        \"employment_type\": {\"type\": \"keyword\"},\n        \"job_vec\": {\n            \"type\": \"dense_vector\",\n            \"dims\": 384,\n            \"index\": True,\n            \"similarity\": \"cosine\"\n        },\n        \"created_at\": {\"type\": \"date\"},\n        \"status\": {\"type\": \"keyword\"}\n    }\n}\n\nAPPLICATIONS_MAPPING = {\n    \"properties\": {\n        \"id\": {\"type\": \"keyword\"},\n        \"job_id\": {\"type\": \"keyword\"},\n        \"seeker_id\": {\"type\": \"keyword\"},\n        \"status\": {\"type\": \"keyword\"},\n        \"scores\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"bm25\": {\"type\": \"float\"},\n                \"semantic\": {\"type\": \"float\"},\n                \"rule_boost\": {\"type\": \"float\"},\n                \"final\": {\"type\": \"float\"}\n            }\n        },\n        \"created_at\": {\"type\": \"date\"},\n        \"updated_at\": {\"type\": \"date\"}\n    }\n}\n\nINTERVIEWS_MAPPING = {\n    \"properties\": {\n        \"id\": {\"type\": \"keyword\"},\n        \"job_id\": {\"type\": \"keyword\"},\n        \"seeker_id\": {\"type\": \"keyword\"},\n        \"recruiter_id\": {\"type\": \"keyword\"},\n        \"start_time\": {\"type\": \"date\"},\n        \"end_time\": {\"type\": \"date\"},\n        \"meeting_link\": {\"type\": \"keyword\"},\n        \"status\": {\"type\": \"keyword\"},\n        \"notes\": {\"type\": \"text\"}\n    }\n}\n\nEVENTS_MAPPING = {\n    \"properties\": {\n        \"id\": {\"type\": \"keyword\"},\n        \"actor_id\": {\"type\": \"keyword\"},\n        \"type\": {\"type\": \"keyword\"},\n        \"payload\": {\"type\": \"object\"},\n        \"ts\": {\"type\": \"date\"}\n    }\n}\n\n# Index names\nUSERS_INDEX = \"users\"\nJOBS_INDEX = \"jobs\"\nAPPLICATIONS_INDEX = \"applications\"\nINTERVIEWS_INDEX = \"interviews\"\nEVENTS_INDEX = \"events\"\n\ndef create_all_indices():\n    \"\"\"Create all required indices with their mappings\"\"\"\n    indices = [\n        (USERS_INDEX, USERS_MAPPING),\n        (JOBS_INDEX, JOBS_MAPPING),\n        (APPLICATIONS_INDEX, APPLICATIONS_MAPPING),\n        (INTERVIEWS_INDEX, INTERVIEWS_MAPPING),\n        (EVENTS_INDEX, EVENTS_MAPPING)\n    ]\n    \n    success_count = 0\n    for index_name, mapping in indices:\n        if create_index_if_not_exists(index_name, mapping):\n            success_count += 1\n        else:\n            logger.error(f\"Failed to create index: {index_name}\")\n    \n    if success_count == len(indices):\n        logger.info(\"All indices created successfully\")\n        return True\n    else:\n        logger.error(f\"Only {success_count}/{len(indices)} indices created successfully\")\n        return False\n\ndef get_index_mapping(index_name: str):\n    \"\"\"Get mapping for a specific index\"\"\"\n    mappings = {\n        USERS_INDEX: USERS_MAPPING,\n        JOBS_INDEX: JOBS_MAPPING,\n        APPLICATIONS_INDEX: APPLICATIONS_MAPPING,\n        INTERVIEWS_INDEX: INTERVIEWS_MAPPING,\n        EVENTS_INDEX: EVENTS_MAPPING\n    }\n    return mappings.get(index_name)\n\ndef update_index_mapping(index_name: str, new_fields: dict):\n    \"\"\"Update index mapping with new fields\"\"\"\n    from .client import get_elasticsearch_client\n    \n    client = get_elasticsearch_client()\n    if not client:\n        logger.error(\"Elasticsearch client not available\")\n        return False\n    \n    try:\n        client.indices.put_mapping(\n            index=index_name,\n            body={\"properties\": new_fields}\n        )\n        logger.info(f\"Updated mapping for index: {index_name}\")\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to update mapping for {index_name}: {e}\")\n        return False\n\ndef get_index_stats(index_name: str = None):\n    \"\"\"Get statistics for indices\"\"\"\n    from .client import get_elasticsearch_client\n    \n    client = get_elasticsearch_client()\n    if not client:\n        logger.error(\"Elasticsearch client not available\")\n        return None\n    \n    try:\n        if index_name:\n            return client.indices.stats(index=index_name)\n        else:\n            # Get stats for all our indices\n            indices = [USERS_INDEX, JOBS_INDEX, APPLICATIONS_INDEX, INTERVIEWS_INDEX, EVENTS_INDEX]\n            return client.indices.stats(index=','.join(indices))\n    except Exception as e:\n        logger.error(f\"Failed to get index stats: {e}\")\n        return None\n\ndef reindex_data(source_index: str, dest_index: str):\n    \"\"\"Reindex data from source to destination index\"\"\"\n    from .client import get_elasticsearch_client\n    \n    client = get_elasticsearch_client()\n    if not client:\n        logger.error(\"Elasticsearch client not available\")\n        return False\n    \n    try:\n        body = {\n            \"source\": {\"index\": source_index},\n            \"dest\": {\"index\": dest_index}\n        }\n        \n        response = client.reindex(body=body, wait_for_completion=True)\n        logger.info(f\"Reindexed from {source_index} to {dest_index}\")\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to reindex from {source_index} to {dest_index}: {e}\")\n        return False\n\n# Initialize indices on module import\ndef initialize_indices():\n    \"\"\"Initialize all indices - called during Django startup\"\"\"\n    try:\n        return create_all_indices()\n    except Exception as e:\n        logger.error(f\"Failed to initialize indices: {e}\")\n        return False\n","size_bytes":6602},"backend/es/repositories.py":{"content":"import uuid\nfrom datetime import datetime\nfrom typing import List, Dict, Any, Optional\nfrom elasticsearch.exceptions import NotFoundError\nfrom .client import get_elasticsearch_client\nfrom .indices import USERS_INDEX, JOBS_INDEX, APPLICATIONS_INDEX, INTERVIEWS_INDEX, EVENTS_INDEX\n\nclass BaseRepository:\n    def __init__(self, index_name: str):\n        self.index_name = index_name\n        self.client = get_elasticsearch_client()\n    \n    def create(self, document: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Create a new document\"\"\"\n        if not self.client:\n            raise Exception(\"Elasticsearch client not available\")\n        \n        doc_id = document.get('id')\n        if not doc_id:\n            doc_id = str(uuid.uuid4())\n            document['id'] = doc_id\n        \n        response = self.client.index(\n            index=self.index_name,\n            id=doc_id,\n            body=document,\n            refresh='wait_for'\n        )\n        \n        return document\n    \n    def get_by_id(self, doc_id: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Get document by ID\"\"\"\n        if not self.client:\n            return None\n        \n        try:\n            response = self.client.get(\n                index=self.index_name,\n                id=doc_id\n            )\n            return response['_source']\n        except NotFoundError:\n            return None\n    \n    def update(self, doc_id: str, updates: Dict[str, Any]) -> Optional[Dict[str, Any]]:\n        \"\"\"Update document\"\"\"\n        if not self.client:\n            return None\n        \n        try:\n            self.client.update(\n                index=self.index_name,\n                id=doc_id,\n                body={'doc': updates},\n                refresh='wait_for'\n            )\n            return self.get_by_id(doc_id)\n        except NotFoundError:\n            return None\n    \n    def delete(self, doc_id: str) -> bool:\n        \"\"\"Delete document\"\"\"\n        if not self.client:\n            return False\n        \n        try:\n            self.client.delete(\n                index=self.index_name,\n                id=doc_id,\n                refresh='wait_for'\n            )\n            return True\n        except NotFoundError:\n            return False\n    \n    def search(self, query: Dict[str, Any], size: int = 50) -> List[Dict[str, Any]]:\n        \"\"\"Search documents\"\"\"\n        if not self.client:\n            return []\n        \n        try:\n            response = self.client.search(\n                index=self.index_name,\n                body=query,\n                size=size\n            )\n            return [hit['_source'] for hit in response['hits']['hits']]\n        except Exception as e:\n            print(f\"Search error: {e}\")\n            return []\n\nclass UserRepository(BaseRepository):\n    def __init__(self):\n        super().__init__(USERS_INDEX)\n    \n    def get_by_email(self, email: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Get user by email\"\"\"\n        query = {\n            \"query\": {\n                \"term\": {\"email.keyword\": email}\n            }\n        }\n        results = self.search(query)\n        return results[0] if results else None\n    \n    def search_candidates(self, query: str = \"\", skills: List[str] = None, \n                         location: str = \"\", min_experience: int = None) -> List[Dict[str, Any]]:\n        \"\"\"Search for job seekers\"\"\"\n        must_clauses = [{\"term\": {\"role\": \"seeker\"}}]\n        \n        if query:\n            must_clauses.append({\n                \"multi_match\": {\n                    \"query\": query,\n                    \"fields\": [\"full_name^2\", \"headline^2\", \"resume_text\", \"skills\"],\n                    \"type\": \"best_fields\"\n                }\n            })\n        \n        if skills:\n            must_clauses.append({\n                \"terms\": {\"skills\": skills}\n            })\n        \n        if location:\n            must_clauses.append({\n                \"term\": {\"location.keyword\": location}\n            })\n        \n        if min_experience is not None:\n            must_clauses.append({\n                \"range\": {\"experience_years\": {\"gte\": min_experience}}\n            })\n        \n        search_query = {\n            \"query\": {\"bool\": {\"must\": must_clauses}},\n            \"sort\": [{\"updated_at\": {\"order\": \"desc\"}}]\n        }\n        \n        return self.search(search_query, size=100)\n\nclass JobRepository(BaseRepository):\n    def __init__(self):\n        super().__init__(JOBS_INDEX)\n    \n    def get_by_recruiter(self, recruiter_id: str) -> List[Dict[str, Any]]:\n        \"\"\"Get jobs by recruiter\"\"\"\n        query = {\n            \"query\": {\"term\": {\"recruiter_id\": recruiter_id}},\n            \"sort\": [{\"created_at\": {\"order\": \"desc\"}}]\n        }\n        return self.search(query)\n    \n    def search_jobs(self, query: str = \"\", location: str = \"\", \n                   employment_type: str = \"\") -> List[Dict[str, Any]]:\n        \"\"\"Search open jobs\"\"\"\n        must_clauses = [{\"term\": {\"status\": \"open\"}}]\n        \n        if query:\n            must_clauses.append({\n                \"multi_match\": {\n                    \"query\": query,\n                    \"fields\": [\"title^3\", \"description^2\", \"company^2\", \"skills_required\"],\n                    \"type\": \"best_fields\"\n                }\n            })\n        \n        if location:\n            must_clauses.append({\n                \"term\": {\"location.keyword\": location}\n            })\n        \n        if employment_type:\n            must_clauses.append({\n                \"term\": {\"employment_type\": employment_type}\n            })\n        \n        search_query = {\n            \"query\": {\"bool\": {\"must\": must_clauses}},\n            \"sort\": [{\"created_at\": {\"order\": \"desc\"}}]\n        }\n        \n        return self.search(search_query, size=100)\n    \n    def get_open_jobs(self) -> List[Dict[str, Any]]:\n        \"\"\"Get all open jobs\"\"\"\n        query = {\n            \"query\": {\"term\": {\"status\": \"open\"}},\n            \"sort\": [{\"created_at\": {\"order\": \"desc\"}}]\n        }\n        return self.search(query, size=200)\n\nclass ApplicationRepository(BaseRepository):\n    def __init__(self):\n        super().__init__(APPLICATIONS_INDEX)\n    \n    def get_by_seeker(self, seeker_id: str) -> List[Dict[str, Any]]:\n        \"\"\"Get applications by job seeker\"\"\"\n        query = {\n            \"query\": {\"term\": {\"seeker_id\": seeker_id}},\n            \"sort\": [{\"created_at\": {\"order\": \"desc\"}}]\n        }\n        return self.search(query)\n    \n    def get_by_job(self, job_id: str) -> List[Dict[str, Any]]:\n        \"\"\"Get applications for a job\"\"\"\n        query = {\n            \"query\": {\"term\": {\"job_id\": job_id}},\n            \"sort\": [{\"scores.final\": {\"order\": \"desc\"}}]\n        }\n        return self.search(query)\n    \n    def get_by_jobs(self, job_ids: List[str]) -> List[Dict[str, Any]]:\n        \"\"\"Get applications for multiple jobs\"\"\"\n        query = {\n            \"query\": {\"terms\": {\"job_id\": job_ids}},\n            \"sort\": [{\"created_at\": {\"order\": \"desc\"}}]\n        }\n        return self.search(query)\n    \n    def get_by_job_and_seeker(self, job_id: str, seeker_id: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Get application by job and seeker\"\"\"\n        query = {\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\"term\": {\"job_id\": job_id}},\n                        {\"term\": {\"seeker_id\": seeker_id}}\n                    ]\n                }\n            }\n        }\n        results = self.search(query)\n        return results[0] if results else None\n\nclass InterviewRepository(BaseRepository):\n    def __init__(self):\n        super().__init__(INTERVIEWS_INDEX)\n    \n    def get_by_recruiter(self, recruiter_id: str) -> List[Dict[str, Any]]:\n        \"\"\"Get interviews by recruiter\"\"\"\n        query = {\n            \"query\": {\"term\": {\"recruiter_id\": recruiter_id}},\n            \"sort\": [{\"start_time\": {\"order\": \"asc\"}}]\n        }\n        return self.search(query)\n    \n    def get_by_seeker(self, seeker_id: str) -> List[Dict[str, Any]]:\n        \"\"\"Get interviews by job seeker\"\"\"\n        query = {\n            \"query\": {\"term\": {\"seeker_id\": seeker_id}},\n            \"sort\": [{\"start_time\": {\"order\": \"asc\"}}]\n        }\n        return self.search(query)\n    \n    def get_by_recruiter_and_date_range(self, recruiter_id: str, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:\n        \"\"\"Get interviews by recruiter within date range\"\"\"\n        query = {\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\"term\": {\"recruiter_id\": recruiter_id}},\n                        {\n                            \"range\": {\n                                \"start_time\": {\n                                    \"gte\": start_date.isoformat(),\n                                    \"lte\": end_date.isoformat()\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            \"sort\": [{\"start_time\": {\"order\": \"asc\"}}]\n        }\n        return self.search(query)\n    \n    def get_by_seeker_and_date_range(self, seeker_id: str, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:\n        \"\"\"Get interviews by seeker within date range\"\"\"\n        query = {\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\"term\": {\"seeker_id\": seeker_id}},\n                        {\n                            \"range\": {\n                                \"start_time\": {\n                                    \"gte\": start_date.isoformat(),\n                                    \"lte\": end_date.isoformat()\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            \"sort\": [{\"start_time\": {\"order\": \"asc\"}}]\n        }\n        return self.search(query)\n\nclass EventRepository(BaseRepository):\n    def __init__(self):\n        super().__init__(EVENTS_INDEX)\n    \n    def log_event(self, actor_id: str, event_type: str, payload: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Log an event\"\"\"\n        event = {\n            \"id\": str(uuid.uuid4()),\n            \"actor_id\": actor_id,\n            \"type\": event_type,\n            \"payload\": payload,\n            \"ts\": datetime.utcnow().isoformat()\n        }\n        return self.create(event)\n    \n    def get_events_by_actor(self, actor_id: str, limit: int = 100) -> List[Dict[str, Any]]:\n        \"\"\"Get events by actor\"\"\"\n        query = {\n            \"query\": {\"term\": {\"actor_id\": actor_id}},\n            \"sort\": [{\"ts\": {\"order\": \"desc\"}}]\n        }\n        return self.search(query, size=limit)\n    \n    def get_events_by_type(self, event_type: str, limit: int = 100) -> List[Dict[str, Any]]:\n        \"\"\"Get events by type\"\"\"\n        query = {\n            \"query\": {\"term\": {\"type\": event_type}},\n            \"sort\": [{\"ts\": {\"order\": \"desc\"}}]\n        }\n        return self.search(query, size=limit)\n","size_bytes":10991},"backend/ml/__init__.py":{"content":"","size_bytes":0},"backend/ml/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass MlConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'ml'\n    verbose_name = 'Machine Learning'\n\n    def ready(self):\n        \"\"\"Initialize ML components when app is ready\"\"\"\n        try:\n            from .embeddings import EmbeddingGenerator\n            # Initialize embedding generator to download models if needed\n            embedding_gen = EmbeddingGenerator()\n            if embedding_gen.is_model_available():\n                print(\"ML: Embedding model loaded successfully\")\n            else:\n                print(\"ML: Using fallback embedding method\")\n        except Exception as e:\n            print(f\"ML: Warning - Failed to initialize embedding model: {e}\")\n","size_bytes":748},"backend/ml/embeddings.py":{"content":"import numpy as np\nfrom typing import List, Union\nimport os\n\ntry:\n    from sentence_transformers import SentenceTransformer\n    SENTENCE_TRANSFORMERS_AVAILABLE = True\nexcept ImportError:\n    SENTENCE_TRANSFORMERS_AVAILABLE = False\n\nclass EmbeddingGenerator:\n    def __init__(self, model_name: str = None):\n        self.model_name = model_name or os.environ.get('SENTENCE_TRANSFORMER_MODEL', 'all-MiniLM-L6-v2')\n        self.model = None\n        self.embedding_dim = int(os.environ.get('EMBEDDING_DIMENSION', '384'))\n        \n        if SENTENCE_TRANSFORMERS_AVAILABLE:\n            try:\n                self.model = SentenceTransformer(self.model_name)\n                print(f\"Loaded SentenceTransformer model: {self.model_name}\")\n            except Exception as e:\n                print(f\"Failed to load SentenceTransformer model: {e}\")\n                self.model = None\n        else:\n            print(\"SentenceTransformers not available. Using fallback embedding.\")\n    \n    def generate_embedding(self, text: str) -> List[float]:\n        \"\"\"Generate embedding for given text\"\"\"\n        if not text or not text.strip():\n            return [0.0] * self.embedding_dim\n        \n        if self.model is not None:\n            try:\n                # Clean and preprocess text\n                cleaned_text = self._preprocess_text(text)\n                \n                # Generate embedding\n                embedding = self.model.encode(cleaned_text)\n                \n                # Ensure it's a list of floats\n                return embedding.tolist()\n                \n            except Exception as e:\n                print(f\"Error generating embedding: {e}\")\n                return self._fallback_embedding(text)\n        else:\n            return self._fallback_embedding(text)\n    \n    def generate_batch_embeddings(self, texts: List[str]) -> List[List[float]]:\n        \"\"\"Generate embeddings for a batch of texts\"\"\"\n        if self.model is not None:\n            try:\n                # Clean and preprocess texts\n                cleaned_texts = [self._preprocess_text(text) for text in texts]\n                \n                # Generate embeddings\n                embeddings = self.model.encode(cleaned_texts)\n                \n                # Convert to list of lists\n                return [emb.tolist() for emb in embeddings]\n                \n            except Exception as e:\n                print(f\"Error generating batch embeddings: {e}\")\n                return [self._fallback_embedding(text) for text in texts]\n        else:\n            return [self._fallback_embedding(text) for text in texts]\n    \n    def _preprocess_text(self, text: str) -> str:\n        \"\"\"Preprocess text before embedding generation\"\"\"\n        if not text:\n            return \"\"\n        \n        # Basic cleaning\n        text = text.strip()\n        \n        # Remove excessive whitespace\n        text = ' '.join(text.split())\n        \n        # Truncate if too long (most models have token limits)\n        max_length = 500  # Approximate token limit\n        words = text.split()\n        if len(words) > max_length:\n            text = ' '.join(words[:max_length])\n        \n        return text\n    \n    def _fallback_embedding(self, text: str) -> List[float]:\n        \"\"\"Generate a simple fallback embedding when the model is not available\"\"\"\n        # This is a very basic approach - in production you might want a better fallback\n        \n        # Simple word-based features\n        words = text.lower().split()\n        \n        # Create a basic feature vector\n        features = [0.0] * self.embedding_dim\n        \n        if words:\n            # Simple hash-based features\n            for i, word in enumerate(words[:50]):  # Limit to first 50 words\n                hash_val = hash(word) % self.embedding_dim\n                features[hash_val] += 1.0 / len(words)\n        \n        # Normalize\n        norm = np.linalg.norm(features)\n        if norm > 0:\n            features = [f / norm for f in features]\n        \n        return features\n    \n    def cosine_similarity(self, embedding1: List[float], embedding2: List[float]) -> float:\n        \"\"\"Calculate cosine similarity between two embeddings\"\"\"\n        if not embedding1 or not embedding2:\n            return 0.0\n        \n        try:\n            # Convert to numpy arrays\n            vec1 = np.array(embedding1)\n            vec2 = np.array(embedding2)\n            \n            # Calculate cosine similarity\n            dot_product = np.dot(vec1, vec2)\n            norm1 = np.linalg.norm(vec1)\n            norm2 = np.linalg.norm(vec2)\n            \n            if norm1 == 0 or norm2 == 0:\n                return 0.0\n            \n            similarity = dot_product / (norm1 * norm2)\n            \n            # Ensure result is between -1 and 1\n            return max(-1.0, min(1.0, similarity))\n            \n        except Exception as e:\n            print(f\"Error calculating cosine similarity: {e}\")\n            return 0.0\n    \n    def find_most_similar(self, query_embedding: List[float], \n                         candidate_embeddings: List[List[float]], \n                         top_k: int = 5) -> List[tuple]:\n        \"\"\"Find the most similar embeddings to a query embedding\"\"\"\n        similarities = []\n        \n        for i, candidate_embedding in enumerate(candidate_embeddings):\n            similarity = self.cosine_similarity(query_embedding, candidate_embedding)\n            similarities.append((i, similarity))\n        \n        # Sort by similarity (descending)\n        similarities.sort(key=lambda x: x[1], reverse=True)\n        \n        return similarities[:top_k]\n    \n    def get_embedding_dimension(self) -> int:\n        \"\"\"Get the dimension of embeddings generated by this model\"\"\"\n        return self.embedding_dim\n    \n    def is_model_available(self) -> bool:\n        \"\"\"Check if the embedding model is available\"\"\"\n        return self.model is not None\n\n# Utility functions for common embedding operations\ndef calculate_similarity_matrix(embeddings: List[List[float]]) -> List[List[float]]:\n    \"\"\"Calculate similarity matrix for a list of embeddings\"\"\"\n    generator = EmbeddingGenerator()\n    n = len(embeddings)\n    similarity_matrix = [[0.0] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                similarity_matrix[i][j] = 1.0\n            else:\n                sim = generator.cosine_similarity(embeddings[i], embeddings[j])\n                similarity_matrix[i][j] = sim\n                similarity_matrix[j][i] = sim\n    \n    return similarity_matrix\n\ndef cluster_embeddings(embeddings: List[List[float]], threshold: float = 0.7) -> List[List[int]]:\n    \"\"\"Simple clustering of embeddings based on similarity threshold\"\"\"\n    generator = EmbeddingGenerator()\n    n = len(embeddings)\n    clusters = []\n    used = [False] * n\n    \n    for i in range(n):\n        if used[i]:\n            continue\n        \n        cluster = [i]\n        used[i] = True\n        \n        for j in range(i + 1, n):\n            if used[j]:\n                continue\n            \n            similarity = generator.cosine_similarity(embeddings[i], embeddings[j])\n            if similarity >= threshold:\n                cluster.append(j)\n                used[j] = True\n        \n        clusters.append(cluster)\n    \n    return clusters\n","size_bytes":7347},"backend/ml/ranking.py":{"content":"import math\nimport re\nfrom typing import List, Dict, Any, Optional\nfrom collections import Counter\nimport numpy as np\n\nfrom .embeddings import EmbeddingGenerator\n\nclass RankingService:\n    def __init__(self):\n        self.embedding_generator = EmbeddingGenerator()\n        \n        # Weights for hybrid scoring\n        self.bm25_weight = 0.4\n        self.semantic_weight = 0.5\n        self.rule_boost_weight = 0.1\n        \n        # BM25 parameters\n        self.k1 = 1.5\n        self.b = 0.75\n    \n    def calculate_hybrid_score(self,\n                             resume_text: str,\n                             resume_vec: List[float],\n                             job_text: str,\n                             job_vec: List[float],\n                             resume_skills: List[str],\n                             job_skills: List[str],\n                             resume_exp: Optional[int] = None,\n                             job_min_exp: Optional[int] = None,\n                             same_location: bool = False) -> float:\n        \"\"\"Calculate the final hybrid score combining all ranking factors\"\"\"\n        \n        # Calculate individual scores\n        bm25_score = self.calculate_bm25_score(resume_text, job_text)\n        semantic_score = self.calculate_semantic_score(resume_vec, job_vec)\n        rule_boost = self.calculate_rule_boost(resume_skills, job_skills, resume_exp, job_min_exp, same_location)\n        \n        # Combine scores with weights\n        final_score = (\n            self.bm25_weight * bm25_score +\n            self.semantic_weight * semantic_score +\n            self.rule_boost_weight * rule_boost\n        )\n        \n        # Ensure score is between 0 and 1\n        return max(0.0, min(1.0, final_score))\n    \n    def calculate_bm25_score(self, resume_text: str, job_text: str) -> float:\n        \"\"\"Calculate BM25 score between resume and job description\"\"\"\n        if not resume_text or not job_text:\n            return 0.0\n        \n        # Preprocess texts\n        resume_tokens = self._tokenize_and_clean(resume_text)\n        job_tokens = self._tokenize_and_clean(job_text)\n        \n        if not resume_tokens or not job_tokens:\n            return 0.0\n        \n        # Calculate term frequencies\n        resume_tf = Counter(resume_tokens)\n        job_tf = Counter(job_tokens)\n        \n        # Use job terms as query\n        query_terms = set(job_tokens)\n        \n        # Calculate average document length (simplified)\n        avg_doc_length = (len(resume_tokens) + len(job_tokens)) / 2\n        doc_length = len(resume_tokens)\n        \n        score = 0.0\n        \n        for term in query_terms:\n            # Term frequency in document (resume)\n            tf = resume_tf.get(term, 0)\n            \n            if tf > 0:\n                # IDF calculation (simplified - in real implementation you'd use corpus statistics)\n                # For now, we'll use a simple heuristic based on term rarity\n                idf = self._calculate_simple_idf(term, [resume_text, job_text])\n                \n                # BM25 formula\n                numerator = tf * (self.k1 + 1)\n                denominator = tf + self.k1 * (1 - self.b + self.b * (doc_length / avg_doc_length))\n                \n                score += idf * (numerator / denominator)\n        \n        # Normalize score\n        max_possible_score = len(query_terms) * 10  # Rough normalization\n        return min(1.0, score / max_possible_score) if max_possible_score > 0 else 0.0\n    \n    def calculate_semantic_score(self, resume_vec: List[float], job_vec: List[float]) -> float:\n        \"\"\"Calculate semantic similarity score using embeddings\"\"\"\n        if not resume_vec or not job_vec:\n            return 0.0\n        \n        similarity = self.embedding_generator.cosine_similarity(resume_vec, job_vec)\n        \n        # Convert from [-1, 1] to [0, 1] range\n        return (similarity + 1) / 2\n    \n    def calculate_rule_boost(self,\n                           resume_skills: List[str],\n                           job_skills: List[str],\n                           resume_exp: Optional[int] = None,\n                           job_min_exp: Optional[int] = None,\n                           same_location: bool = False) -> float:\n        \"\"\"Calculate rule-based boost score\"\"\"\n        \n        # Skills overlap using Jaccard similarity\n        skills_score = self._jaccard_similarity(\n            [skill.lower() for skill in resume_skills],\n            [skill.lower() for skill in job_skills]\n        )\n        \n        # Experience match score\n        exp_score = self._calculate_experience_score(resume_exp, job_min_exp)\n        \n        # Location bonus\n        location_score = 1.0 if same_location else 0.8\n        \n        # Weighted combination of rule-based factors\n        rule_score = (\n            0.6 * skills_score +\n            0.3 * exp_score +\n            0.1 * location_score\n        )\n        \n        return rule_score\n    \n    def _tokenize_and_clean(self, text: str) -> List[str]:\n        \"\"\"Tokenize and clean text for BM25 calculation\"\"\"\n        if not text:\n            return []\n        \n        # Convert to lowercase\n        text = text.lower()\n        \n        # Remove punctuation and split into words\n        text = re.sub(r'[^\\w\\s]', ' ', text)\n        tokens = text.split()\n        \n        # Remove very short tokens and common stop words\n        stop_words = {\n            'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with',\n            'by', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had',\n            'will', 'would', 'could', 'should', 'may', 'might', 'can', 'must', 'shall'\n        }\n        \n        tokens = [token for token in tokens if len(token) > 2 and token not in stop_words]\n        \n        return tokens\n    \n    def _calculate_simple_idf(self, term: str, documents: List[str]) -> float:\n        \"\"\"Calculate a simple IDF score\"\"\"\n        # Count documents containing the term\n        doc_count = sum(1 for doc in documents if term.lower() in doc.lower())\n        \n        if doc_count == 0:\n            return 0.0\n        \n        # Simple IDF calculation\n        return math.log(len(documents) / doc_count)\n    \n    def _jaccard_similarity(self, set1: List[str], set2: List[str]) -> float:\n        \"\"\"Calculate Jaccard similarity between two lists\"\"\"\n        if not set1 and not set2:\n            return 1.0  # Both empty sets are considered identical\n        \n        if not set1 or not set2:\n            return 0.0  # One empty, one non-empty\n        \n        # Convert to sets for intersection and union\n        s1 = set(set1)\n        s2 = set(set2)\n        \n        intersection = len(s1.intersection(s2))\n        union = len(s1.union(s2))\n        \n        return intersection / union if union > 0 else 0.0\n    \n    def _calculate_experience_score(self, resume_exp: Optional[int], job_min_exp: Optional[int]) -> float:\n        \"\"\"Calculate experience match score\"\"\"\n        if resume_exp is None or job_min_exp is None:\n            return 0.5  # Neutral score when data is missing\n        \n        if resume_exp >= job_min_exp:\n            # Candidate meets or exceeds requirements\n            if resume_exp <= job_min_exp + 2:\n                return 1.0  # Perfect match\n            else:\n                # Slight penalty for being overqualified\n                excess = resume_exp - job_min_exp - 2\n                penalty = min(0.3, excess * 0.05)  # Max 30% penalty\n                return 1.0 - penalty\n        else:\n            # Candidate doesn't meet minimum requirements\n            deficit = job_min_exp - resume_exp\n            penalty = min(0.8, deficit * 0.2)  # Max 80% penalty\n            return 1.0 - penalty\n    \n    def rank_candidates(self, \n                       candidates: List[Dict[str, Any]], \n                       job_data: Dict[str, Any]) -> List[Dict[str, Any]]:\n        \"\"\"Rank a list of candidates for a given job\"\"\"\n        \n        job_text = f\"{job_data.get('title', '')} {job_data.get('description', '')}\"\n        job_vec = job_data.get('job_vec', [])\n        job_skills = job_data.get('skills_required', [])\n        job_min_exp = job_data.get('min_exp')\n        job_location = job_data.get('location', '').lower()\n        \n        ranked_candidates = []\n        \n        for candidate in candidates:\n            resume_text = candidate.get('resume_text', '')\n            resume_vec = candidate.get('resume_vec', [])\n            resume_skills = candidate.get('skills', [])\n            resume_exp = candidate.get('experience_years')\n            candidate_location = candidate.get('location', '').lower()\n            \n            # Calculate hybrid score\n            score = self.calculate_hybrid_score(\n                resume_text=resume_text,\n                resume_vec=resume_vec,\n                job_text=job_text,\n                job_vec=job_vec,\n                resume_skills=resume_skills,\n                job_skills=job_skills,\n                resume_exp=resume_exp,\n                job_min_exp=job_min_exp,\n                same_location=(candidate_location == job_location)\n            )\n            \n            # Add score to candidate data\n            candidate_with_score = candidate.copy()\n            candidate_with_score['match_score'] = score\n            \n            ranked_candidates.append(candidate_with_score)\n        \n        # Sort by score (descending)\n        ranked_candidates.sort(key=lambda x: x['match_score'], reverse=True)\n        \n        return ranked_candidates\n    \n    def rank_jobs_for_candidate(self,\n                               candidate_data: Dict[str, Any],\n                               jobs: List[Dict[str, Any]]) -> List[Dict[str, Any]]:\n        \"\"\"Rank a list of jobs for a given candidate\"\"\"\n        \n        resume_text = candidate_data.get('resume_text', '')\n        resume_vec = candidate_data.get('resume_vec', [])\n        resume_skills = candidate_data.get('skills', [])\n        resume_exp = candidate_data.get('experience_years')\n        candidate_location = candidate_data.get('location', '').lower()\n        \n        ranked_jobs = []\n        \n        for job in jobs:\n            job_text = f\"{job.get('title', '')} {job.get('description', '')}\"\n            job_vec = job.get('job_vec', [])\n            job_skills = job.get('skills_required', [])\n            job_min_exp = job.get('min_exp')\n            job_location = job.get('location', '').lower()\n            \n            # Calculate hybrid score\n            score = self.calculate_hybrid_score(\n                resume_text=resume_text,\n                resume_vec=resume_vec,\n                job_text=job_text,\n                job_vec=job_vec,\n                resume_skills=resume_skills,\n                job_skills=job_skills,\n                resume_exp=resume_exp,\n                job_min_exp=job_min_exp,\n                same_location=(candidate_location == job_location)\n            )\n            \n            # Add score to job data\n            job_with_score = job.copy()\n            job_with_score['match_score'] = score\n            \n            ranked_jobs.append(job_with_score)\n        \n        # Sort by score (descending)\n        ranked_jobs.sort(key=lambda x: x['match_score'], reverse=True)\n        \n        return ranked_jobs\n    \n    def explain_score(self,\n                     resume_text: str,\n                     resume_vec: List[float],\n                     job_text: str,\n                     job_vec: List[float],\n                     resume_skills: List[str],\n                     job_skills: List[str],\n                     resume_exp: Optional[int] = None,\n                     job_min_exp: Optional[int] = None,\n                     same_location: bool = False) -> Dict[str, Any]:\n        \"\"\"Provide detailed explanation of how the score was calculated\"\"\"\n        \n        # Calculate individual components\n        bm25_score = self.calculate_bm25_score(resume_text, job_text)\n        semantic_score = self.calculate_semantic_score(resume_vec, job_vec)\n        rule_boost = self.calculate_rule_boost(resume_skills, job_skills, resume_exp, job_min_exp, same_location)\n        \n        # Calculate final score\n        final_score = self.calculate_hybrid_score(\n            resume_text, resume_vec, job_text, job_vec,\n            resume_skills, job_skills, resume_exp, job_min_exp, same_location\n        )\n        \n        # Detailed breakdown\n        explanation = {\n            'final_score': final_score,\n            'components': {\n                'bm25': {\n                    'score': bm25_score,\n                    'weight': self.bm25_weight,\n                    'weighted_score': bm25_score * self.bm25_weight,\n                    'description': 'Keyword matching between resume and job description'\n                },\n                'semantic': {\n                    'score': semantic_score,\n                    'weight': self.semantic_weight,\n                    'weighted_score': semantic_score * self.semantic_weight,\n                    'description': 'Semantic similarity based on meaning and context'\n                },\n                'rule_boost': {\n                    'score': rule_boost,\n                    'weight': self.rule_boost_weight,\n                    'weighted_score': rule_boost * self.rule_boost_weight,\n                    'description': 'Rule-based factors (skills, experience, location)'\n                }\n            },\n            'factors': {\n                'skills_match': self._jaccard_similarity(\n                    [s.lower() for s in resume_skills],\n                    [s.lower() for s in job_skills]\n                ),\n                'experience_match': self._calculate_experience_score(resume_exp, job_min_exp),\n                'location_match': same_location,\n                'matching_skills': list(set([s.lower() for s in resume_skills]) & \n                                      set([s.lower() for s in job_skills])),\n                'missing_skills': list(set([s.lower() for s in job_skills]) - \n                                     set([s.lower() for s in resume_skills]))\n            }\n        }\n        \n        return explanation\n","size_bytes":14185},"backend/ml/resume_parser.py":{"content":"import re\nimport PyPDF2\nimport docx\nfrom io import BytesIO\nfrom typing import Dict, List, Optional\nimport spacy\nfrom datetime import datetime\n\nclass ResumeParser:\n    def __init__(self):\n        try:\n            # Load spaCy model for NLP\n            self.nlp = spacy.load(\"en_core_web_sm\")\n        except OSError:\n            # Fallback if spaCy model not installed\n            self.nlp = None\n        \n        # Predefined skills dictionary\n        self.skills_keywords = {\n            'programming': [\n                'python', 'java', 'javascript', 'typescript', 'c++', 'c#', 'php', 'ruby', 'go', 'rust',\n                'swift', 'kotlin', 'scala', 'r', 'matlab', 'sql', 'html', 'css', 'sass', 'less'\n            ],\n            'frameworks': [\n                'react', 'angular', 'vue', 'django', 'flask', 'fastapi', 'spring', 'express',\n                'node.js', 'nodejs', 'laravel', 'rails', 'asp.net', 'tensorflow', 'pytorch',\n                'keras', 'scikit-learn', 'pandas', 'numpy'\n            ],\n            'databases': [\n                'mysql', 'postgresql', 'mongodb', 'redis', 'elasticsearch', 'cassandra',\n                'oracle', 'sqlite', 'dynamodb', 'firestore'\n            ],\n            'cloud': [\n                'aws', 'azure', 'gcp', 'google cloud', 'docker', 'kubernetes', 'jenkins',\n                'terraform', 'ansible', 'vagrant'\n            ],\n            'tools': [\n                'git', 'github', 'gitlab', 'bitbucket', 'jira', 'confluence', 'slack',\n                'figma', 'sketch', 'adobe', 'photoshop', 'illustrator'\n            ]\n        }\n        \n        # Flatten skills for easier matching\n        self.all_skills = []\n        for category in self.skills_keywords.values():\n            self.all_skills.extend(category)\n    \n    def extract_text(self, file) -> str:\n        \"\"\"Extract text from PDF or DOCX file\"\"\"\n        try:\n            file.seek(0)  # Reset file pointer\n            content = file.read()\n            file_stream = BytesIO(content)\n            \n            filename = getattr(file, 'name', '')\n            \n            if filename.lower().endswith('.pdf'):\n                return self._extract_pdf_text(file_stream)\n            elif filename.lower().endswith('.docx'):\n                return self._extract_docx_text(file_stream)\n            else:\n                raise ValueError(\"Unsupported file format\")\n                \n        except Exception as e:\n            print(f\"Error extracting text: {str(e)}\")\n            return \"\"\n    \n    def _extract_pdf_text(self, file_stream: BytesIO) -> str:\n        \"\"\"Extract text from PDF\"\"\"\n        try:\n            pdf_reader = PyPDF2.PdfReader(file_stream)\n            text = \"\"\n            \n            for page in pdf_reader.pages:\n                text += page.extract_text() + \"\\n\"\n            \n            return text.strip()\n            \n        except Exception as e:\n            print(f\"Error extracting PDF text: {str(e)}\")\n            return \"\"\n    \n    def _extract_docx_text(self, file_stream: BytesIO) -> str:\n        \"\"\"Extract text from DOCX\"\"\"\n        try:\n            doc = docx.Document(file_stream)\n            text = \"\"\n            \n            for paragraph in doc.paragraphs:\n                text += paragraph.text + \"\\n\"\n            \n            return text.strip()\n            \n        except Exception as e:\n            print(f\"Error extracting DOCX text: {str(e)}\")\n            return \"\"\n    \n    def parse_resume(self, text: str) -> Dict:\n        \"\"\"Parse resume text and extract structured information\"\"\"\n        if not text:\n            return {}\n        \n        text_lower = text.lower()\n        \n        result = {\n            'skills': self._extract_skills(text_lower),\n            'experience_years': self._extract_experience_years(text),\n            'education': self._extract_education(text),\n            'contact_info': self._extract_contact_info(text),\n            'sections': self._identify_sections(text)\n        }\n        \n        return result\n    \n    def _extract_skills(self, text: str) -> List[str]:\n        \"\"\"Extract skills from resume text\"\"\"\n        found_skills = []\n        \n        for skill in self.all_skills:\n            # Use word boundaries to avoid partial matches\n            pattern = r'\\b' + re.escape(skill.lower()) + r'\\b'\n            if re.search(pattern, text):\n                found_skills.append(skill)\n        \n        # Remove duplicates and return\n        return list(set(found_skills))\n    \n    def _extract_experience_years(self, text: str) -> Optional[int]:\n        \"\"\"Extract years of experience from resume text\"\"\"\n        # Common patterns for experience\n        experience_patterns = [\n            r'(\\d+)\\+?\\s*years?\\s*(?:of\\s*)?experience',\n            r'(\\d+)\\+?\\s*years?\\s*in',\n            r'experience.*?(\\d+)\\+?\\s*years?',\n            r'(\\d+)\\+?\\s*yrs?\\s*(?:of\\s*)?experience',\n        ]\n        \n        text_lower = text.lower()\n        \n        for pattern in experience_patterns:\n            matches = re.findall(pattern, text_lower)\n            if matches:\n                try:\n                    # Return the maximum years found\n                    years = [int(match) for match in matches if match.isdigit()]\n                    if years:\n                        return max(years)\n                except ValueError:\n                    continue\n        \n        # Try to infer from job dates\n        return self._infer_experience_from_dates(text)\n    \n    def _infer_experience_from_dates(self, text: str) -> Optional[int]:\n        \"\"\"Infer experience years from job dates in resume\"\"\"\n        # Look for date patterns like \"2020-2023\", \"Jan 2020 - Dec 2023\", etc.\n        date_patterns = [\n            r'(\\d{4})\\s*[-–]\\s*(\\d{4})',\n            r'(\\d{4})\\s*[-–]\\s*present',\n            r'(\\d{4})\\s*[-–]\\s*current',\n        ]\n        \n        current_year = datetime.now().year\n        total_experience = 0\n        \n        for pattern in date_patterns:\n            matches = re.findall(pattern, text, re.IGNORECASE)\n            for match in matches:\n                try:\n                    start_year = int(match[0])\n                    end_year = current_year if match[1].lower() in ['present', 'current'] else int(match[1])\n                    \n                    if start_year <= end_year <= current_year:\n                        total_experience += (end_year - start_year)\n                except (ValueError, IndexError):\n                    continue\n        \n        return total_experience if total_experience > 0 else None\n    \n    def _extract_education(self, text: str) -> List[str]:\n        \"\"\"Extract education information\"\"\"\n        education_keywords = [\n            'bachelor', 'master', 'phd', 'doctorate', 'degree', 'university',\n            'college', 'institute', 'school', 'certification', 'certified'\n        ]\n        \n        education_info = []\n        lines = text.split('\\n')\n        \n        for line in lines:\n            line_lower = line.lower().strip()\n            if any(keyword in line_lower for keyword in education_keywords):\n                if len(line.strip()) > 10:  # Filter out too short lines\n                    education_info.append(line.strip())\n        \n        return education_info[:5]  # Limit to 5 entries\n    \n    def _extract_contact_info(self, text: str) -> Dict[str, str]:\n        \"\"\"Extract contact information\"\"\"\n        contact_info = {}\n        \n        # Email pattern\n        email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n        emails = re.findall(email_pattern, text)\n        if emails:\n            contact_info['email'] = emails[0]\n        \n        # Phone pattern\n        phone_pattern = r'[\\+]?[1-9]?[0-9]{0,3}[-.\\s]?\\(?[0-9]{3}\\)?[-.\\s]?[0-9]{3}[-.\\s]?[0-9]{4}'\n        phones = re.findall(phone_pattern, text)\n        if phones:\n            contact_info['phone'] = phones[0]\n        \n        # LinkedIn pattern\n        linkedin_pattern = r'linkedin\\.com/in/[\\w-]+'\n        linkedin_matches = re.findall(linkedin_pattern, text, re.IGNORECASE)\n        if linkedin_matches:\n            contact_info['linkedin'] = linkedin_matches[0]\n        \n        return contact_info\n    \n    def _identify_sections(self, text: str) -> Dict[str, bool]:\n        \"\"\"Identify common resume sections\"\"\"\n        sections = {\n            'experience': False,\n            'education': False,\n            'skills': False,\n            'projects': False,\n            'certifications': False,\n            'awards': False\n        }\n        \n        text_lower = text.lower()\n        \n        section_keywords = {\n            'experience': ['experience', 'work history', 'employment', 'career'],\n            'education': ['education', 'academic', 'degree', 'university'],\n            'skills': ['skills', 'technical skills', 'competencies', 'proficiencies'],\n            'projects': ['projects', 'portfolio', 'work samples'],\n            'certifications': ['certifications', 'certificates', 'licensed'],\n            'awards': ['awards', 'achievements', 'honors', 'recognition']\n        }\n        \n        for section, keywords in section_keywords.items():\n            if any(keyword in text_lower for keyword in keywords):\n                sections[section] = True\n        \n        return sections\n    \n    def extract_entities(self, text: str) -> Dict[str, List[str]]:\n        \"\"\"Extract named entities using spaCy (if available)\"\"\"\n        if not self.nlp or not text:\n            return {}\n        \n        doc = self.nlp(text)\n        entities = {\n            'organizations': [],\n            'locations': [],\n            'dates': [],\n            'persons': []\n        }\n        \n        for ent in doc.ents:\n            if ent.label_ == \"ORG\":\n                entities['organizations'].append(ent.text)\n            elif ent.label_ in [\"GPE\", \"LOC\"]:\n                entities['locations'].append(ent.text)\n            elif ent.label_ == \"DATE\":\n                entities['dates'].append(ent.text)\n            elif ent.label_ == \"PERSON\":\n                entities['persons'].append(ent.text)\n        \n        # Remove duplicates\n        for key in entities:\n            entities[key] = list(set(entities[key]))\n        \n        return entities\n","size_bytes":10215},"backend/storage/__init__.py":{"content":"# Storage module for handling file uploads and storage\n","size_bytes":55},"backend/storage/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass StorageConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'storage'\n    verbose_name = 'Storage'\n\n    def ready(self):\n        \"\"\"Initialize storage when app is ready\"\"\"\n        try:\n            from django.conf import settings\n            import os\n            \n            # Create necessary directories\n            os.makedirs(settings.MEDIA_ROOT, exist_ok=True)\n            os.makedirs(os.path.join(settings.MEDIA_ROOT, 'resumes'), exist_ok=True)\n            \n            print(\"Storage: Directories initialized successfully\")\n        except Exception as e:\n            print(f\"Storage: Warning - Failed to initialize directories: {e}\")\n","size_bytes":719},"backend/storage/files.py":{"content":"import os\nimport uuid\nfrom typing import Optional\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import UploadedFile\n\nclass FileStorage:\n    def __init__(self):\n        self.storage_backend = settings.FILE_STORAGE_BACKEND\n        if self.storage_backend == 'local':\n            self.storage = FileSystemStorage(location=settings.MEDIA_ROOT)\n        elif self.storage_backend == 's3':\n            # Initialize S3 storage if needed\n            try:\n                import boto3\n                from storages.backends.s3boto3 import S3Boto3Storage\n                self.storage = S3Boto3Storage()\n            except ImportError:\n                # Fallback to local storage\n                self.storage = FileSystemStorage(location=settings.MEDIA_ROOT)\n        else:\n            self.storage = FileSystemStorage(location=settings.MEDIA_ROOT)\n    \n    def save_file(self, file: UploadedFile, filename: str = None) -> str:\n        \"\"\"Save uploaded file and return the file path\"\"\"\n        if not filename:\n            # Generate unique filename\n            file_extension = os.path.splitext(file.name)[1]\n            filename = f\"{uuid.uuid4()}{file_extension}\"\n        \n        # Ensure the filename is unique\n        filename = self.storage.get_available_name(filename)\n        \n        # Save the file\n        file_path = self.storage.save(filename, file)\n        \n        return file_path\n    \n    def get_file_url(self, file_path: str) -> str:\n        \"\"\"Get URL for accessing the file\"\"\"\n        if self.storage_backend == 's3':\n            return self.storage.url(file_path)\n        else:\n            return f\"{settings.MEDIA_URL}{file_path}\"\n    \n    def delete_file(self, file_path: str) -> bool:\n        \"\"\"Delete a file\"\"\"\n        try:\n            if self.storage.exists(file_path):\n                self.storage.delete(file_path)\n                return True\n            return False\n        except Exception as e:\n            print(f\"Error deleting file {file_path}: {e}\")\n            return False\n    \n    def file_exists(self, file_path: str) -> bool:\n        \"\"\"Check if file exists\"\"\"\n        return self.storage.exists(file_path)\n    \n    def get_file_size(self, file_path: str) -> Optional[int]:\n        \"\"\"Get file size in bytes\"\"\"\n        try:\n            return self.storage.size(file_path)\n        except Exception:\n            return None\n\nclass ResumeFileStorage(FileStorage):\n    \"\"\"Specialized storage for resume files\"\"\"\n    \n    def save_resume(self, file: UploadedFile, user_id: str) -> str:\n        \"\"\"Save resume file with user-specific naming\"\"\"\n        file_extension = os.path.splitext(file.name)[1].lower()\n        \n        # Validate file extension\n        allowed_extensions = ['.pdf', '.docx', '.doc']\n        if file_extension not in allowed_extensions:\n            raise ValueError(f\"Invalid file type. Allowed: {', '.join(allowed_extensions)}\")\n        \n        # Validate file size (5MB limit)\n        max_size = 5 * 1024 * 1024  # 5MB\n        if file.size > max_size:\n            raise ValueError(\"File size too large. Maximum allowed: 5MB\")\n        \n        # Generate filename\n        filename = f\"resumes/{user_id}_{uuid.uuid4()}{file_extension}\"\n        \n        return self.save_file(file, filename)\n    \n    def get_resume_url(self, file_path: str) -> str:\n        \"\"\"Get URL for resume file\"\"\"\n        return self.get_file_url(file_path)\n\n# Global instances\nfile_storage = FileStorage()\nresume_storage = ResumeFileStorage()\n","size_bytes":3544},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ui/theme-provider\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/auth/login\";\nimport Register from \"@/pages/auth/register\";\nimport JobSeekerDashboard from \"@/pages/dashboard/job-seeker\";\nimport RecruiterDashboard from \"@/pages/dashboard/recruiter\";\nimport EditProfile from \"@/pages/profile/edit-profile\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/dashboard/job-seeker\" component={JobSeekerDashboard} />\n      <Route path=\"/dashboard/recruiter\" component={RecruiterDashboard} />\n      <Route path=\"/profile/edit\" component={EditProfile} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"talent-match-theme\">\n        <AuthProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1563},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(248 10% 98%);\n  --foreground: hsl(215 20% 17%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(215 20% 17%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(215 20% 17%);\n  --primary: hsl(220 100% 60%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(215 20% 17%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(162 76% 36%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(220 100% 60%);\n  --chart-1: hsl(220 100% 60%);\n  --chart-2: hsl(162 76% 36%);\n  --chart-3: hsl(42 92% 56%);\n  --chart-4: hsl(147 79% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(215 20% 17%);\n  --sidebar-primary: hsl(220 100% 60%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(220 100% 60%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(220 100% 60%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(224 71% 4%);\n  --foreground: hsl(213 31% 91%);\n  --card: hsl(224 71% 4%);\n  --card-foreground: hsl(213 31% 91%);\n  --popover: hsl(224 71% 4%);\n  --popover-foreground: hsl(213 31% 91%);\n  --primary: hsl(220 100% 60%);\n  --primary-foreground: hsl(220 26% 14%);\n  --secondary: hsl(215 27% 32%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(223 47% 11%);\n  --muted-foreground: hsl(215 16% 57%);\n  --accent: hsl(162 76% 36%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 63% 31%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(216 34% 17%);\n  --input: hsl(216 34% 17%);\n  --ring: hsl(220 100% 60%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Hero gradient matching the design reference */\n.hero-gradient {\n  background: linear-gradient(135deg, hsl(220 100% 60%) 0%, hsl(220 100% 50%) 100%);\n}\n\n/* Feature card gradients */\n.feature-card-blue {\n  background: linear-gradient(135deg, hsl(220 100% 97%) 0%, hsl(220 100% 95%) 100%);\n  border-color: hsl(220 100% 90%);\n}\n\n.feature-card-green {\n  background: linear-gradient(135deg, hsl(162 100% 97%) 0%, hsl(162 100% 95%) 100%);\n  border-color: hsl(162 100% 90%);\n}\n\n.feature-card-purple {\n  background: linear-gradient(135deg, hsl(280 100% 97%) 0%, hsl(280 100% 95%) 100%);\n  border-color: hsl(280 100% 90%);\n}\n\n/* Custom scrollbar */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(var(--border));\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--muted-foreground));\n}\n\n/* Loading animation */\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.animate-pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Match score indicator */\n.match-score-high {\n  @apply bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200;\n}\n\n.match-score-medium {\n  @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200;\n}\n\n.match-score-low {\n  @apply bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200;\n}\n\n/* Status badges */\n.status-applied {\n  @apply bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200;\n}\n\n.status-screening {\n  @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200;\n}\n\n.status-shortlisted {\n  @apply bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200;\n}\n\n.status-interviewed {\n  @apply bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200;\n}\n\n.status-offered {\n  @apply bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200;\n}\n\n.status-rejected {\n  @apply bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200;\n}\n\n/* Chat message styles */\n.chat-message-sent {\n  @apply bg-primary text-primary-foreground ml-auto max-w-[80%];\n}\n\n.chat-message-received {\n  @apply bg-muted text-muted-foreground mr-auto max-w-[80%];\n}\n\n/* File upload area */\n.file-upload-area {\n  @apply border-2 border-dashed border-border hover:border-primary transition-colors duration-200;\n}\n\n.file-upload-area.drag-over {\n  @apply border-primary bg-primary/5;\n}\n\n/* Smooth transitions */\n.transition-all {\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n\n/* Focus styles for accessibility */\n.focus-visible {\n  @apply outline-none ring-2 ring-ring ring-offset-2 ring-offset-background;\n}\n\n/* Text truncation utilities */\n.line-clamp-1 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 1;\n}\n\n.line-clamp-2 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 2;\n}\n\n.line-clamp-3 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 3;\n}\n\n/* Glassmorphism effect for cards */\n.glass-effect {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.dark .glass-effect {\n  background: rgba(0, 0, 0, 0.95);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n/* Custom button hover effects */\n.btn-primary-hover {\n  @apply bg-primary hover:bg-primary/90 text-primary-foreground transition-colors;\n}\n\n.btn-secondary-hover {\n  @apply bg-secondary hover:bg-secondary/90 text-secondary-foreground transition-colors;\n}\n\n/* Loading spinner */\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n\n/* Notification dot */\n.notification-dot {\n  @apply absolute -top-1 -right-1 h-3 w-3 bg-destructive rounded-full border-2 border-background;\n}\n\n/* Interview status colors */\n.interview-scheduled {\n  @apply bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200;\n}\n\n.interview-completed {\n  @apply bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200;\n}\n\n.interview-cancelled {\n  @apply bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200;\n}\n\n.interview-rescheduled {\n  @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200;\n}\n\n/* Skill tag styles */\n.skill-tag {\n  @apply inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-primary/10 text-primary;\n}\n\n/* Resume upload progress */\n.upload-progress {\n  @apply w-full bg-muted rounded-full h-2 overflow-hidden;\n}\n\n.upload-progress-bar {\n  @apply h-full bg-primary transition-all duration-300 ease-out;\n}\n\n/* Mobile-first responsive utilities */\n@media (max-width: 768px) {\n  .mobile-padding {\n    @apply px-4;\n  }\n  \n  .mobile-text {\n    @apply text-sm;\n  }\n  \n  .mobile-grid {\n    @apply grid-cols-1 gap-4;\n  }\n}\n\n/* Dark mode enhancements */\n@media (prefers-color-scheme: dark) {\n  .auto-dark {\n    @apply dark:bg-background dark:text-foreground;\n  }\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n  \n  .print-only {\n    display: block !important;\n  }\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  .high-contrast {\n    @apply border-2 border-foreground;\n  }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n","size_bytes":8083},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/elasticsearch/client.ts":{"content":"import { Client } from '@elastic/elasticsearch';\n\nclass ElasticsearchClient {\n  private static instance: ElasticsearchClient;\n  private client: Client;\n\n  private constructor() {\n    this.client = new Client({\n      node: process.env.ELASTICSEARCH_URL || 'http://localhost:9200',\n      auth: process.env.ELASTICSEARCH_USERNAME && process.env.ELASTICSEARCH_PASSWORD ? {\n        username: process.env.ELASTICSEARCH_USERNAME,\n        password: process.env.ELASTICSEARCH_PASSWORD\n      } : undefined,\n      requestTimeout: 30000,\n      maxRetries: 3,\n    });\n  }\n\n  public static getInstance(): ElasticsearchClient {\n    if (!ElasticsearchClient.instance) {\n      ElasticsearchClient.instance = new ElasticsearchClient();\n    }\n    return ElasticsearchClient.instance;\n  }\n\n  public getClient(): Client {\n    return this.client;\n  }\n\n  public async ping(): Promise<boolean> {\n    try {\n      await this.client.ping();\n      return true;\n    } catch (error) {\n      console.error('Elasticsearch ping failed:', error);\n      return false;\n    }\n  }\n\n  public async createIndex(index: string, mapping: any): Promise<boolean> {\n    try {\n      const exists = await this.client.indices.exists({ index });\n      if (!exists) {\n        await this.client.indices.create({\n          index,\n          body: {\n            mappings: mapping,\n            settings: {\n              number_of_shards: 1,\n              number_of_replicas: 0,\n            }\n          }\n        });\n        console.log(`Created index: ${index}`);\n      }\n      return true;\n    } catch (error) {\n      console.error(`Failed to create index ${index}:`, error);\n      return false;\n    }\n  }\n}\n\nexport const elasticsearchClient = ElasticsearchClient.getInstance();\nexport const esClient = elasticsearchClient.getClient();\n","size_bytes":1781},"server/elasticsearch/indices.ts":{"content":"import { elasticsearchClient } from './client';\n\nexport const INDICES = {\n  USERS: 'users',\n  JOBS: 'jobs',\n  APPLICATIONS: 'applications',\n  INTERVIEWS: 'interviews',\n  EVENTS: 'events',\n};\n\nexport const MAPPINGS = {\n  [INDICES.USERS]: {\n    properties: {\n      id: { type: 'keyword' },\n      role: { type: 'keyword' },\n      email: { type: 'keyword' },\n      password_hash: { type: 'keyword' },\n      full_name: { type: 'text' },\n      headline: { type: 'text' },\n      skills: { type: 'keyword' },\n      experience_years: { type: 'integer' },\n      location: { type: 'keyword' },\n      resume_file_path: { type: 'keyword' },\n      resume_text: { type: 'text' },\n      resume_vec: { \n        type: 'dense_vector', \n        dims: 384, \n        index: true, \n        similarity: 'cosine' \n      },\n      created_at: { type: 'date' },\n      updated_at: { type: 'date' }\n    }\n  },\n  [INDICES.JOBS]: {\n    properties: {\n      id: { type: 'keyword' },\n      recruiter_id: { type: 'keyword' },\n      title: { type: 'text' },\n      description: { type: 'text' },\n      company: { type: 'keyword' },\n      skills_required: { type: 'keyword' },\n      min_exp: { type: 'integer' },\n      location: { type: 'keyword' },\n      employment_type: { type: 'keyword' },\n      job_vec: { \n        type: 'dense_vector', \n        dims: 384, \n        index: true, \n        similarity: 'cosine' \n      },\n      created_at: { type: 'date' },\n      status: { type: 'keyword' }\n    }\n  },\n  [INDICES.APPLICATIONS]: {\n    properties: {\n      id: { type: 'keyword' },\n      job_id: { type: 'keyword' },\n      seeker_id: { type: 'keyword' },\n      status: { type: 'keyword' },\n      scores: {\n        type: 'object',\n        properties: {\n          bm25: { type: 'float' },\n          semantic: { type: 'float' },\n          rule_boost: { type: 'float' },\n          final: { type: 'float' }\n        }\n      },\n      created_at: { type: 'date' },\n      updated_at: { type: 'date' }\n    }\n  },\n  [INDICES.INTERVIEWS]: {\n    properties: {\n      id: { type: 'keyword' },\n      job_id: { type: 'keyword' },\n      seeker_id: { type: 'keyword' },\n      recruiter_id: { type: 'keyword' },\n      start_time: { type: 'date' },\n      end_time: { type: 'date' },\n      meeting_link: { type: 'keyword' },\n      status: { type: 'keyword' },\n      notes: { type: 'text' }\n    }\n  },\n  [INDICES.EVENTS]: {\n    properties: {\n      id: { type: 'keyword' },\n      actor_id: { type: 'keyword' },\n      type: { type: 'keyword' },\n      payload: { type: 'object' },\n      ts: { type: 'date' }\n    }\n  }\n};\n\nexport async function initializeIndices(): Promise<boolean> {\n  const client = elasticsearchClient;\n  \n  try {\n    for (const [index, mapping] of Object.entries(MAPPINGS)) {\n      await client.createIndex(index, mapping);\n    }\n    console.log('All indices initialized successfully');\n    return true;\n  } catch (error) {\n    console.error('Failed to initialize indices:', error);\n    return false;\n  }\n}\n","size_bytes":2962},"server/elasticsearch/repositories.ts":{"content":"import { esClient } from './client';\nimport { INDICES } from './indices';\nimport type { User, Job, Application, Interview } from '@shared/schema';\n\nexport class BaseRepository<T> {\n  constructor(protected index: string) {}\n\n  async create(document: T): Promise<T> {\n    const response = await esClient.index({\n      index: this.index,\n      id: (document as any).id,\n      body: document,\n      refresh: 'wait_for'\n    });\n    return document;\n  }\n\n  async getById(id: string): Promise<T | null> {\n    try {\n      const response = await esClient.get({\n        index: this.index,\n        id\n      });\n      return response._source as T;\n    } catch (error) {\n      if ((error as any).statusCode === 404) {\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  async update(id: string, updates: Partial<T>): Promise<T | null> {\n    try {\n      await esClient.update({\n        index: this.index,\n        id,\n        body: { doc: updates },\n        refresh: 'wait_for'\n      });\n      return this.getById(id);\n    } catch (error) {\n      if ((error as any).statusCode === 404) {\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  async delete(id: string): Promise<boolean> {\n    try {\n      await esClient.delete({\n        index: this.index,\n        id,\n        refresh: 'wait_for'\n      });\n      return true;\n    } catch (error) {\n      if ((error as any).statusCode === 404) {\n        return false;\n      }\n      throw error;\n    }\n  }\n\n  async search(query: any): Promise<T[]> {\n    const response = await esClient.search({\n      index: this.index,\n      body: query\n    });\n    return response.hits.hits.map(hit => hit._source as T);\n  }\n}\n\nexport class UserRepository extends BaseRepository<User> {\n  constructor() {\n    super(INDICES.USERS);\n  }\n\n  async getByEmail(email: string): Promise<User | null> {\n    const results = await this.search({\n      query: {\n        term: { email }\n      }\n    });\n    return results.length > 0 ? results[0] : null;\n  }\n\n  async searchCandidates(query: string, skills: string[], location?: string): Promise<User[]> {\n    const must: any[] = [\n      { term: { role: 'seeker' } }\n    ];\n\n    if (query) {\n      must.push({\n        multi_match: {\n          query,\n          fields: ['full_name', 'headline', 'resume_text', 'skills']\n        }\n      });\n    }\n\n    if (skills.length > 0) {\n      must.push({\n        terms: { skills }\n      });\n    }\n\n    if (location) {\n      must.push({\n        term: { location }\n      });\n    }\n\n    return this.search({\n      query: { bool: { must } },\n      size: 50\n    });\n  }\n}\n\nexport class JobRepository extends BaseRepository<Job> {\n  constructor() {\n    super(INDICES.JOBS);\n  }\n\n  async getByRecruiter(recruiterId: string): Promise<Job[]> {\n    return this.search({\n      query: {\n        term: { recruiter_id: recruiterId }\n      },\n      sort: [{ created_at: { order: 'desc' } }]\n    });\n  }\n\n  async searchJobs(query?: string, location?: string, employmentType?: string): Promise<Job[]> {\n    const must: any[] = [\n      { term: { status: 'open' } }\n    ];\n\n    if (query) {\n      must.push({\n        multi_match: {\n          query,\n          fields: ['title^2', 'description', 'company', 'skills_required']\n        }\n      });\n    }\n\n    if (location) {\n      must.push({\n        term: { location }\n      });\n    }\n\n    if (employmentType) {\n      must.push({\n        term: { employment_type: employmentType }\n      });\n    }\n\n    return this.search({\n      query: { bool: { must } },\n      sort: [{ created_at: { order: 'desc' } }],\n      size: 50\n    });\n  }\n\n  async getOpenJobs(): Promise<Job[]> {\n    return this.search({\n      query: {\n        term: { status: 'open' }\n      },\n      sort: [{ created_at: { order: 'desc' } }],\n      size: 100\n    });\n  }\n}\n\nexport class ApplicationRepository extends BaseRepository<Application> {\n  constructor() {\n    super(INDICES.APPLICATIONS);\n  }\n\n  async getBySeeker(seekerId: string): Promise<Application[]> {\n    return this.search({\n      query: {\n        term: { seeker_id: seekerId }\n      },\n      sort: [{ created_at: { order: 'desc' } }]\n    });\n  }\n\n  async getByJob(jobId: string): Promise<Application[]> {\n    return this.search({\n      query: {\n        term: { job_id: jobId }\n      },\n      sort: [{ 'scores.final': { order: 'desc' } }]\n    });\n  }\n\n  async getByJobs(jobIds: string[]): Promise<Application[]> {\n    return this.search({\n      query: {\n        terms: { job_id: jobIds }\n      },\n      sort: [{ created_at: { order: 'desc' } }]\n    });\n  }\n\n  async getByJobAndSeeker(jobId: string, seekerId: string): Promise<Application | null> {\n    const results = await this.search({\n      query: {\n        bool: {\n          must: [\n            { term: { job_id: jobId } },\n            { term: { seeker_id: seekerId } }\n          ]\n        }\n      }\n    });\n    return results.length > 0 ? results[0] : null;\n  }\n}\n\nexport class InterviewRepository extends BaseRepository<Interview> {\n  constructor() {\n    super(INDICES.INTERVIEWS);\n  }\n\n  async getByRecruiter(recruiterId: string): Promise<Interview[]> {\n    return this.search({\n      query: {\n        term: { recruiter_id: recruiterId }\n      },\n      sort: [{ start_time: { order: 'asc' } }]\n    });\n  }\n\n  async getBySeeker(seekerId: string): Promise<Interview[]> {\n    return this.search({\n      query: {\n        term: { seeker_id: seekerId }\n      },\n      sort: [{ start_time: { order: 'asc' } }]\n    });\n  }\n}\n","size_bytes":5433},"server/ml/embeddings.ts":{"content":"export class EmbeddingGenerator {\n  private embeddingDim = 384;\n\n  async generateEmbedding(text: string): Promise<number[]> {\n    // This is a placeholder implementation\n    // In production, you would use a proper embedding model\n    // like sentence-transformers or OpenAI embeddings\n    \n    if (!text || text.trim().length === 0) {\n      return new Array(this.embeddingDim).fill(0);\n    }\n\n    // Simple hash-based embedding for demonstration\n    return this.hashBasedEmbedding(text);\n  }\n\n  async generateBatchEmbeddings(texts: string[]): Promise<number[][]> {\n    return Promise.all(texts.map(text => this.generateEmbedding(text)));\n  }\n\n  cosineSimilarity(vec1: number[], vec2: number[]): number {\n    if (vec1.length !== vec2.length) {\n      throw new Error('Vectors must have the same length');\n    }\n\n    let dotProduct = 0;\n    let norm1 = 0;\n    let norm2 = 0;\n\n    for (let i = 0; i < vec1.length; i++) {\n      dotProduct += vec1[i] * vec2[i];\n      norm1 += vec1[i] * vec1[i];\n      norm2 += vec2[i] * vec2[i];\n    }\n\n    if (norm1 === 0 || norm2 === 0) {\n      return 0;\n    }\n\n    return dotProduct / (Math.sqrt(norm1) * Math.sqrt(norm2));\n  }\n\n  private hashBasedEmbedding(text: string): number[] {\n    // Simple embedding based on word hashing\n    const words = text.toLowerCase().split(/\\s+/);\n    const embedding = new Array(this.embeddingDim).fill(0);\n\n    for (const word of words) {\n      const hash = this.simpleHash(word);\n      const index = Math.abs(hash) % this.embeddingDim;\n      embedding[index] += 1 / words.length;\n    }\n\n    // Normalize the vector\n    const norm = Math.sqrt(embedding.reduce((sum, val) => sum + val * val, 0));\n    if (norm > 0) {\n      for (let i = 0; i < embedding.length; i++) {\n        embedding[i] /= norm;\n      }\n    }\n\n    return embedding;\n  }\n\n  private simpleHash(str: string): number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash;\n  }\n}\n","size_bytes":2074},"server/ml/ranking.ts":{"content":"import { EmbeddingGenerator } from './embeddings';\n\nexport interface ScoreComponents {\n  bm25: number;\n  semantic: number;\n  rule_boost: number;\n  final: number;\n}\n\nexport class RankingService {\n  private embeddingGenerator = new EmbeddingGenerator();\n  private bm25Weight = 0.4;\n  private semanticWeight = 0.5;\n  private ruleBoostWeight = 0.1;\n\n  calculateHybridScore(\n    resumeText: string,\n    resumeVec: number[],\n    jobText: string,\n    jobVec: number[],\n    resumeSkills: string[],\n    jobSkills: string[],\n    resumeExp?: number,\n    jobMinExp?: number,\n    sameLocation: boolean = false\n  ): ScoreComponents {\n    const bm25Score = this.calculateBM25Score(resumeText, jobText);\n    const semanticScore = this.calculateSemanticScore(resumeVec, jobVec);\n    const ruleBoost = this.calculateRuleBoost(\n      resumeSkills,\n      jobSkills,\n      resumeExp,\n      jobMinExp,\n      sameLocation\n    );\n\n    const finalScore = \n      this.bm25Weight * bm25Score +\n      this.semanticWeight * semanticScore +\n      this.ruleBoostWeight * ruleBoost;\n\n    return {\n      bm25: bm25Score,\n      semantic: semanticScore,\n      rule_boost: ruleBoost,\n      final: Math.max(0, Math.min(1, finalScore))\n    };\n  }\n\n  calculateBM25Score(resumeText: string, jobText: string): number {\n    if (!resumeText || !jobText) return 0;\n\n    const resumeTokens = this.tokenize(resumeText);\n    const jobTokens = this.tokenize(jobText);\n    \n    if (resumeTokens.length === 0 || jobTokens.length === 0) return 0;\n\n    const resumeTermFreq = this.getTermFrequency(resumeTokens);\n    const jobTerms = new Set(jobTokens);\n\n    let score = 0;\n    const k1 = 1.5;\n    const b = 0.75;\n    const avgDocLength = (resumeTokens.length + jobTokens.length) / 2;\n\n    for (const term of jobTerms) {\n      const tf = resumeTermFreq[term] || 0;\n      if (tf > 0) {\n        const idf = Math.log(2 / (1 + (resumeTermFreq[term] ? 1 : 0)));\n        const numerator = tf * (k1 + 1);\n        const denominator = tf + k1 * (1 - b + b * (resumeTokens.length / avgDocLength));\n        score += idf * (numerator / denominator);\n      }\n    }\n\n    return Math.min(1, score / (jobTokens.length * 2));\n  }\n\n  calculateSemanticScore(resumeVec: number[], jobVec: number[]): number {\n    if (!resumeVec || !jobVec || resumeVec.length === 0 || jobVec.length === 0) {\n      return 0;\n    }\n\n    const similarity = this.embeddingGenerator.cosineSimilarity(resumeVec, jobVec);\n    return (similarity + 1) / 2; // Convert from [-1, 1] to [0, 1]\n  }\n\n  calculateRuleBoost(\n    resumeSkills: string[],\n    jobSkills: string[],\n    resumeExp?: number,\n    jobMinExp?: number,\n    sameLocation: boolean = false\n  ): number {\n    const skillsScore = this.jaccardSimilarity(\n      resumeSkills.map(s => s.toLowerCase()),\n      jobSkills.map(s => s.toLowerCase())\n    );\n\n    const expScore = this.calculateExperienceScore(resumeExp, jobMinExp);\n    const locationScore = sameLocation ? 1.0 : 0.8;\n\n    return 0.6 * skillsScore + 0.3 * expScore + 0.1 * locationScore;\n  }\n\n  private tokenize(text: string): string[] {\n    return text\n      .toLowerCase()\n      .replace(/[^\\w\\s]/g, ' ')\n      .split(/\\s+/)\n      .filter(token => token.length > 2);\n  }\n\n  private getTermFrequency(tokens: string[]): Record<string, number> {\n    const freq: Record<string, number> = {};\n    for (const token of tokens) {\n      freq[token] = (freq[token] || 0) + 1;\n    }\n    return freq;\n  }\n\n  private jaccardSimilarity(set1: string[], set2: string[]): number {\n    if (set1.length === 0 && set2.length === 0) return 1;\n    if (set1.length === 0 || set2.length === 0) return 0;\n\n    const s1 = new Set(set1);\n    const s2 = new Set(set2);\n    const intersection = new Set([...s1].filter(x => s2.has(x)));\n    const union = new Set([...s1, ...s2]);\n\n    return intersection.size / union.size;\n  }\n\n  private calculateExperienceScore(resumeExp?: number, jobMinExp?: number): number {\n    if (resumeExp === undefined || jobMinExp === undefined) return 0.5;\n\n    if (resumeExp >= jobMinExp) {\n      if (resumeExp <= jobMinExp + 2) {\n        return 1.0;\n      } else {\n        const excess = resumeExp - jobMinExp - 2;\n        const penalty = Math.min(0.3, excess * 0.05);\n        return 1.0 - penalty;\n      }\n    } else {\n      const deficit = jobMinExp - resumeExp;\n      const penalty = Math.min(0.8, deficit * 0.2);\n      return 1.0 - penalty;\n    }\n  }\n}\n","size_bytes":4380},"server/ml/resume-parser.ts":{"content":"import * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface ParsedResumeData {\n  skills: string[];\n  experience_years?: number;\n  education: string[];\n  contact_info: {\n    email?: string;\n    phone?: string;\n    linkedin?: string;\n  };\n}\n\nexport class ResumeParser {\n  private skillsKeywords: string[] = [\n    'javascript', 'typescript', 'python', 'java', 'react', 'nodejs', 'express',\n    'django', 'flask', 'spring', 'mysql', 'postgresql', 'mongodb', 'redis',\n    'aws', 'azure', 'docker', 'kubernetes', 'git', 'html', 'css', 'angular',\n    'vue', 'php', 'ruby', 'go', 'rust', 'swift', 'kotlin', 'scala'\n  ];\n\n  async extractText(filePath: string): Promise<string> {\n    // This is a simplified implementation\n    // In production, you would use libraries like pdf2pic, mammoth, etc.\n    try {\n      if (filePath.endsWith('.txt')) {\n        return fs.readFileSync(filePath, 'utf-8');\n      }\n      // For PDF/DOCX, return placeholder for now\n      // You would integrate with actual parsing libraries\n      return \"Sample resume text content for parsing\";\n    } catch (error) {\n      console.error('Error extracting text:', error);\n      return '';\n    }\n  }\n\n  parseResume(text: string): ParsedResumeData {\n    const lowerText = text.toLowerCase();\n    \n    return {\n      skills: this.extractSkills(lowerText),\n      experience_years: this.extractExperienceYears(text),\n      education: this.extractEducation(text),\n      contact_info: this.extractContactInfo(text)\n    };\n  }\n\n  private extractSkills(text: string): string[] {\n    const foundSkills: string[] = [];\n    \n    for (const skill of this.skillsKeywords) {\n      const regex = new RegExp(`\\\\b${skill}\\\\b`, 'i');\n      if (regex.test(text)) {\n        foundSkills.push(skill);\n      }\n    }\n    \n    return foundSkills;\n  }\n\n  private extractExperienceYears(text: string): number | undefined {\n    const patterns = [\n      /(\\d+)\\+?\\s*years?\\s*(?:of\\s*)?experience/i,\n      /(\\d+)\\+?\\s*years?\\s*in/i,\n      /experience.*?(\\d+)\\+?\\s*years?/i\n    ];\n\n    for (const pattern of patterns) {\n      const match = text.match(pattern);\n      if (match) {\n        return parseInt(match[1], 10);\n      }\n    }\n\n    return undefined;\n  }\n\n  private extractEducation(text: string): string[] {\n    const educationKeywords = [\n      'bachelor', 'master', 'phd', 'degree', 'university', 'college'\n    ];\n    \n    const lines = text.split('\\n');\n    const education: string[] = [];\n    \n    for (const line of lines) {\n      const lowerLine = line.toLowerCase();\n      if (educationKeywords.some(keyword => lowerLine.includes(keyword))) {\n        education.push(line.trim());\n      }\n    }\n    \n    return education.slice(0, 3); // Limit to 3 entries\n  }\n\n  private extractContactInfo(text: string): ParsedResumeData['contact_info'] {\n    const emailRegex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/;\n    const phoneRegex = /[\\+]?[1-9]?[0-9]{0,3}[-.\\s]?\\(?[0-9]{3}\\)?[-.\\s]?[0-9]{3}[-.\\s]?[0-9]{4}/;\n    const linkedinRegex = /linkedin\\.com\\/in\\/[\\w-]+/i;\n\n    const emailMatch = text.match(emailRegex);\n    const phoneMatch = text.match(phoneRegex);\n    const linkedinMatch = text.match(linkedinRegex);\n\n    return {\n      email: emailMatch ? emailMatch[0] : undefined,\n      phone: phoneMatch ? phoneMatch[0] : undefined,\n      linkedin: linkedinMatch ? linkedinMatch[0] : undefined\n    };\n  }\n}\n","size_bytes":3372},"client/src/hooks/use-auth.ts":{"content":"import { useState, useEffect, createContext, useContext } from \"react\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  login: (user: User, token: string) => void;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing auth data on mount\n    const storedToken = localStorage.getItem(\"auth_token\");\n    const storedUser = localStorage.getItem(\"auth_user\");\n    \n    if (storedToken && storedUser) {\n      setToken(storedToken);\n      setUser(JSON.parse(storedUser));\n    }\n    \n    setIsLoading(false);\n  }, []);\n\n  const login = (userData: User, authToken: string) => {\n    setUser(userData);\n    setToken(authToken);\n    localStorage.setItem(\"auth_token\", authToken);\n    localStorage.setItem(\"auth_user\", JSON.stringify(userData));\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem(\"auth_token\");\n    localStorage.removeItem(\"auth_user\");\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, token, login, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":1659},"client/src/hooks/use-file-upload.ts":{"content":"import { useState, useCallback } from 'react';\n\ninterface FileUploadOptions {\n  uploadUrl?: string;\n  acceptedFileTypes?: string[];\n  maxFileSize?: number;\n  onUploadProgress?: (progress: number) => void;\n  onUploadComplete?: (filePath: string) => void;\n  onUploadError?: (error: string) => void;\n}\n\ninterface FileUploadReturn {\n  file: File | null;\n  uploadProgress: number;\n  uploadStatus: 'idle' | 'uploading' | 'success' | 'error';\n  error: string | null;\n  selectFile: (file: File) => void;\n  removeFile: () => void;\n  uploadFile: () => Promise<void>;\n  reset: () => void;\n}\n\nexport function useFileUpload(options: FileUploadOptions = {}): FileUploadReturn {\n  const {\n    uploadUrl,\n    acceptedFileTypes = ['.pdf', '.docx'],\n    maxFileSize = 5 * 1024 * 1024,\n    onUploadProgress,\n    onUploadComplete,\n    onUploadError\n  } = options;\n\n  const [file, setFile] = useState<File | null>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [uploadStatus, setUploadStatus] = useState<'idle' | 'uploading' | 'success' | 'error'>('idle');\n  const [error, setError] = useState<string | null>(null);\n\n  const validateFile = useCallback((file: File): string | null => {\n    // Check file size\n    if (file.size > maxFileSize) {\n      return `File size must be less than ${Math.round(maxFileSize / (1024 * 1024))}MB`;\n    }\n\n    // Check file type\n    const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\n    if (!acceptedFileTypes.includes(fileExtension)) {\n      return `File type must be one of: ${acceptedFileTypes.join(', ')}`;\n    }\n\n    return null;\n  }, [acceptedFileTypes, maxFileSize]);\n\n  const selectFile = useCallback((selectedFile: File) => {\n    const validationError = validateFile(selectedFile);\n    if (validationError) {\n      setError(validationError);\n      setUploadStatus('error');\n      onUploadError?.(validationError);\n      return;\n    }\n\n    setFile(selectedFile);\n    setError(null);\n    setUploadStatus('idle');\n    setUploadProgress(0);\n  }, [validateFile, onUploadError]);\n\n  const removeFile = useCallback(() => {\n    setFile(null);\n    setError(null);\n    setUploadStatus('idle');\n    setUploadProgress(0);\n  }, []);\n\n  const uploadFile = useCallback(async () => {\n    if (!file || !uploadUrl) {\n      setError('No file selected or upload URL provided');\n      setUploadStatus('error');\n      return;\n    }\n\n    setUploadStatus('uploading');\n    setError(null);\n    setUploadProgress(0);\n\n    try {\n      const formData = new FormData();\n      formData.append('resume', file);\n\n      const token = localStorage.getItem('auth_token');\n      \n      const xhr = new XMLHttpRequest();\n\n      // Set up progress tracking\n      xhr.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          const progress = Math.round((event.loaded / event.total) * 100);\n          setUploadProgress(progress);\n          onUploadProgress?.(progress);\n        }\n      });\n\n      // Set up response handling\n      xhr.addEventListener('load', () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try {\n            const response = JSON.parse(xhr.responseText);\n            setUploadStatus('success');\n            setUploadProgress(100);\n            onUploadComplete?.(response.file_path || response.resume_file_path || '');\n          } catch (parseError) {\n            setError('Failed to parse server response');\n            setUploadStatus('error');\n            onUploadError?.('Failed to parse server response');\n          }\n        } else {\n          let errorMessage = 'Upload failed';\n          try {\n            const errorResponse = JSON.parse(xhr.responseText);\n            errorMessage = errorResponse.error || errorResponse.message || errorMessage;\n          } catch (parseError) {\n            errorMessage = xhr.statusText || errorMessage;\n          }\n          \n          setError(errorMessage);\n          setUploadStatus('error');\n          onUploadError?.(errorMessage);\n        }\n      });\n\n      xhr.addEventListener('error', () => {\n        const errorMessage = 'Network error during upload';\n        setError(errorMessage);\n        setUploadStatus('error');\n        onUploadError?.(errorMessage);\n      });\n\n      xhr.addEventListener('abort', () => {\n        const errorMessage = 'Upload was cancelled';\n        setError(errorMessage);\n        setUploadStatus('error');\n        onUploadError?.(errorMessage);\n      });\n\n      // Set up request\n      xhr.open('POST', uploadUrl);\n      \n      if (token) {\n        xhr.setRequestHeader('Authorization', `Bearer ${token}`);\n      }\n\n      // Send the request\n      xhr.send(formData);\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Upload failed';\n      setError(errorMessage);\n      setUploadStatus('error');\n      onUploadError?.(errorMessage);\n    }\n  }, [file, uploadUrl, onUploadProgress, onUploadComplete, onUploadError]);\n\n  const reset = useCallback(() => {\n    setFile(null);\n    setError(null);\n    setUploadStatus('idle');\n    setUploadProgress(0);\n  }, []);\n\n  return {\n    file,\n    uploadProgress,\n    uploadStatus,\n    error,\n    selectFile,\n    removeFile,\n    uploadFile,\n    reset\n  };\n}\n","size_bytes":5222},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.ts":{"content":"import { useEffect, useRef, useCallback, useState } from 'react';\nimport { getAuthToken } from '@/lib/auth';\n\ninterface WebSocketOptions {\n  onMessage?: (data: any) => void;\n  onOpen?: () => void;\n  onClose?: () => void;\n  onError?: (error: Event) => void;\n  reconnect?: boolean;\n  reconnectDelay?: number;\n  maxReconnectAttempts?: number;\n}\n\ninterface WebSocketReturn {\n  sendMessage: (message: any) => void;\n  isConnected: boolean;\n  reconnect: () => void;\n  disconnect: () => void;\n}\n\nexport function useWebSocket(url: string, options: WebSocketOptions = {}): WebSocketReturn {\n  const {\n    onMessage,\n    onOpen,\n    onClose,\n    onError,\n    reconnect: shouldReconnect = true,\n    reconnectDelay = 3000,\n    maxReconnectAttempts = 5\n  } = options;\n\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const reconnectAttemptsRef = useRef(0);\n  const [isConnected, setIsConnected] = useState(false);\n\n  const getWebSocketUrl = useCallback(() => {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const host = window.location.host;\n    const token = getAuthToken();\n    const separator = url.includes('?') ? '&' : '?';\n    return `${protocol}//${host}${url}${separator}token=${token}`;\n  }, [url]);\n\n  const connect = useCallback(() => {\n    try {\n      const wsUrl = getWebSocketUrl();\n      wsRef.current = new WebSocket(wsUrl);\n\n      wsRef.current.onopen = (event) => {\n        console.log('WebSocket connected');\n        setIsConnected(true);\n        reconnectAttemptsRef.current = 0;\n        onOpen?.();\n      };\n\n      wsRef.current.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          onMessage?.(data);\n        } catch (error) {\n          console.error('Failed to parse WebSocket message:', error);\n        }\n      };\n\n      wsRef.current.onclose = (event) => {\n        console.log('WebSocket disconnected:', event.code, event.reason);\n        setIsConnected(false);\n        onClose?.();\n\n        // Attempt to reconnect if enabled and we haven't exceeded max attempts\n        if (shouldReconnect && reconnectAttemptsRef.current < maxReconnectAttempts) {\n          reconnectAttemptsRef.current += 1;\n          console.log(`Attempting to reconnect (${reconnectAttemptsRef.current}/${maxReconnectAttempts})...`);\n          \n          reconnectTimeoutRef.current = setTimeout(() => {\n            connect();\n          }, reconnectDelay);\n        }\n      };\n\n      wsRef.current.onerror = (event) => {\n        console.error('WebSocket error:', event);\n        onError?.(event);\n      };\n\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n    }\n  }, [getWebSocketUrl, onOpen, onMessage, onClose, onError, shouldReconnect, maxReconnectAttempts, reconnectDelay]);\n\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    \n    setIsConnected(false);\n  }, []);\n\n  const sendMessage = useCallback((message: any) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      try {\n        wsRef.current.send(JSON.stringify(message));\n      } catch (error) {\n        console.error('Failed to send WebSocket message:', error);\n      }\n    } else {\n      console.warn('WebSocket is not connected. Message not sent:', message);\n    }\n  }, []);\n\n  const manualReconnect = useCallback(() => {\n    disconnect();\n    reconnectAttemptsRef.current = 0;\n    connect();\n  }, [disconnect, connect]);\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      disconnect();\n    };\n  }, [connect, disconnect]);\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    sendMessage,\n    isConnected,\n    reconnect: manualReconnect,\n    disconnect\n  };\n}\n","size_bytes":4082},"client/src/lib/api.ts":{"content":"import { getAuthToken } from './auth';\n\nexport interface ApiResponse<T = any> {\n  data?: T;\n  error?: string;\n  message?: string;\n}\n\nexport class ApiError extends Error {\n  constructor(\n    message: string,\n    public status: number,\n    public response?: any\n  ) {\n    super(message);\n    this.name = 'ApiError';\n  }\n}\n\nasync function request<T = any>(\n  endpoint: string,\n  options: RequestInit = {}\n): Promise<T> {\n  const url = `${endpoint}`;\n  const token = getAuthToken();\n\n  const config: RequestInit = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...(token && { Authorization: `Bearer ${token}` }),\n      ...options.headers,\n    },\n    ...options,\n  };\n\n  try {\n    const response = await fetch(url, config);\n\n    let responseData;\n    const contentType = response.headers.get('content-type');\n    \n    if (contentType && contentType.includes('application/json')) {\n      responseData = await response.json();\n    } else {\n      responseData = await response.text();\n    }\n\n    if (!response.ok) {\n      const errorMessage = responseData?.error || responseData?.message || `HTTP ${response.status}`;\n      throw new ApiError(errorMessage, response.status, responseData);\n    }\n\n    return responseData;\n  } catch (error) {\n    if (error instanceof ApiError) {\n      throw error;\n    }\n\n    // Handle network errors\n    if (error instanceof TypeError && error.message.includes('fetch')) {\n      throw new ApiError('Network error - please check your connection', 0);\n    }\n\n    throw new ApiError(\n      error instanceof Error ? error.message : 'An unknown error occurred',\n      0\n    );\n  }\n}\n\n// HTTP method helpers\nexport const api = {\n  get: <T = any>(endpoint: string, options?: RequestInit) =>\n    request<T>(endpoint, { method: 'GET', ...options }),\n\n  post: <T = any>(endpoint: string, data?: any, options?: RequestInit) =>\n    request<T>(endpoint, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined,\n      ...options,\n    }),\n\n  put: <T = any>(endpoint: string, data?: any, options?: RequestInit) =>\n    request<T>(endpoint, {\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined,\n      ...options,\n    }),\n\n  patch: <T = any>(endpoint: string, data?: any, options?: RequestInit) =>\n    request<T>(endpoint, {\n      method: 'PATCH',\n      body: data ? JSON.stringify(data) : undefined,\n      ...options,\n    }),\n\n  delete: <T = any>(endpoint: string, options?: RequestInit) =>\n    request<T>(endpoint, { method: 'DELETE', ...options }),\n};\n\n// Specialized API methods for file uploads\nexport const uploadFile = async (\n  endpoint: string,\n  file: File,\n  fieldName: string = 'file',\n  onProgress?: (progress: number) => void\n): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    const formData = new FormData();\n    formData.append(fieldName, file);\n\n    const xhr = new XMLHttpRequest();\n    const token = getAuthToken();\n\n    if (onProgress) {\n      xhr.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          const progress = Math.round((event.loaded / event.total) * 100);\n          onProgress(progress);\n        }\n      });\n    }\n\n    xhr.addEventListener('load', () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        try {\n          const response = JSON.parse(xhr.responseText);\n          resolve(response);\n        } catch (error) {\n          reject(new ApiError('Failed to parse response', xhr.status));\n        }\n      } else {\n        try {\n          const errorResponse = JSON.parse(xhr.responseText);\n          reject(new ApiError(\n            errorResponse.error || errorResponse.message || 'Upload failed',\n            xhr.status,\n            errorResponse\n          ));\n        } catch (error) {\n          reject(new ApiError(`HTTP ${xhr.status}`, xhr.status));\n        }\n      }\n    });\n\n    xhr.addEventListener('error', () => {\n      reject(new ApiError('Network error during upload', 0));\n    });\n\n    xhr.open('POST', endpoint);\n\n    if (token) {\n      xhr.setRequestHeader('Authorization', `Bearer ${token}`);\n    }\n\n    xhr.send(formData);\n  });\n};\n\n// Auth-specific API methods\nexport const auth = {\n  login: (email: string, password: string) =>\n    api.post('/api/auth/login', { email, password }),\n\n  register: (userData: any) =>\n    api.post('/api/auth/register', userData),\n\n  logout: () =>\n    api.post('/api/auth/logout'),\n\n  me: () =>\n    api.get('/api/me'),\n};\n\n// Job-related API methods\nexport const jobs = {\n  search: (params: {\n    q?: string;\n    location?: string;\n    employment_type?: string;\n  }) => {\n    const searchParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value) searchParams.append(key, value);\n    });\n    return api.get(`/api/jobs/search?${searchParams}`);\n  },\n\n  recommendations: () =>\n    api.get('/api/jobs/recommendations'),\n\n  create: (jobData: any) =>\n    api.post('/api/jobs', jobData),\n\n  getMyJobs: () =>\n    api.get('/api/jobs/mine'),\n\n  update: (jobId: string, updates: any) =>\n    api.put(`/api/jobs/${jobId}`, updates),\n\n  delete: (jobId: string) =>\n    api.delete(`/api/jobs/${jobId}/delete`),\n\n  apply: (jobId: string) =>\n    api.post(`/api/jobs/${jobId}/apply`),\n};\n\n// Application-related API methods\nexport const applications = {\n  getMyApplications: () =>\n    api.get('/api/applications/me'),\n\n  getJobApplications: () =>\n    api.get('/api/applications/jobs'),\n\n  getJobApplicationsById: (jobId: string) =>\n    api.get(`/api/applications/jobs/${jobId}`),\n\n  updateStatus: (applicationId: string, status: string) =>\n    api.put(`/api/applications/${applicationId}/status`, { status }),\n\n  rankCandidates: (jobId: string) =>\n    api.post(`/api/jobs/${jobId}/rank`),\n};\n\n// User/Profile API methods\nexport const users = {\n  updateProfile: (updates: any) =>\n    api.put('/api/me/update', updates),\n\n  uploadResume: (file: File, onProgress?: (progress: number) => void) =>\n    uploadFile('/api/me/resume', file, 'resume', onProgress),\n\n  searchCandidates: (params: {\n    q?: string;\n    skills?: string;\n    location?: string;\n    min_experience?: number;\n  }) => {\n    const searchParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== '') {\n        searchParams.append(key, value.toString());\n      }\n    });\n    return api.get(`/api/candidates/search?${searchParams}`);\n  },\n};\n\n// Interview API methods\nexport const interviews = {\n  schedule: (interviewData: {\n    job_id: string;\n    seeker_id: string;\n    start_time: string;\n    end_time: string;\n    notes?: string;\n  }) =>\n    api.post('/api/interviews', interviewData),\n\n  getMyInterviews: () =>\n    api.get('/api/interviews/me'),\n\n  update: (interviewId: string, updates: any) =>\n    api.put(`/api/interviews/${interviewId}`, updates),\n\n  cancel: (interviewId: string) =>\n    api.delete(`/api/interviews/${interviewId}/cancel`),\n\n  getAvailability: (startDate: string, endDate: string) =>\n    api.get(`/api/interviews/availability?start_date=${startDate}&end_date=${endDate}`),\n};\n\n// Chat API methods\nexport const chat = {\n  getHistory: (applicationId: string) =>\n    api.get(`/api/chat/${applicationId}/history`),\n};\n","size_bytes":7223},"client/src/lib/auth.ts":{"content":"import type { User } from \"@shared/schema\";\n\nexport function getAuthToken(): string | null {\n  return localStorage.getItem(\"auth_token\");\n}\n\nexport function getAuthUser(): User | null {\n  const userData = localStorage.getItem(\"auth_user\");\n  return userData ? JSON.parse(userData) : null;\n}\n\nexport function setAuthData(user: User, token: string): void {\n  localStorage.setItem(\"auth_token\", token);\n  localStorage.setItem(\"auth_user\", JSON.stringify(user));\n}\n\nexport function clearAuthData(): void {\n  localStorage.removeItem(\"auth_token\");\n  localStorage.removeItem(\"auth_user\");\n}\n\nexport function isAuthenticated(): boolean {\n  return !!getAuthToken();\n}\n","size_bytes":660},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket.ts":{"content":"import type { Message } from \"@shared/schema\";\n\ninterface WebSocketOptions {\n  onMessage?: (message: Message) => void;\n  onError?: (error: Event) => void;\n  onClose?: () => void;\n  onOpen?: () => void;\n}\n\nexport class WebSocketClient {\n  private ws: WebSocket | null = null;\n  private url: string;\n  private options: WebSocketOptions;\n\n  constructor(url: string, options: WebSocketOptions = {}) {\n    this.url = url;\n    this.options = options;\n  }\n\n  connect(): void {\n    try {\n      this.ws = new WebSocket(this.url);\n      \n      this.ws.onopen = (event) => {\n        console.log(\"WebSocket connected\");\n        this.options.onOpen?.();\n      };\n\n      this.ws.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          this.options.onMessage?.(message);\n        } catch (error) {\n          console.error(\"Failed to parse WebSocket message:\", error);\n        }\n      };\n\n      this.ws.onerror = (event) => {\n        console.error(\"WebSocket error:\", event);\n        this.options.onError?.(event);\n      };\n\n      this.ws.onclose = () => {\n        console.log(\"WebSocket disconnected\");\n        this.options.onClose?.();\n      };\n    } catch (error) {\n      console.error(\"Failed to create WebSocket connection:\", error);\n    }\n  }\n\n  disconnect(): void {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  send(message: any): void {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn(\"WebSocket is not connected\");\n    }\n  }\n\n  isConnected(): boolean {\n    return this.ws?.readyState === WebSocket.OPEN;\n  }\n}\n\nexport function createChatWebSocket(applicationId: string, options: WebSocketOptions): WebSocketClient {\n  const wsUrl = `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.host}/ws/chat/${applicationId}/`;\n  return new WebSocketClient(wsUrl, options);\n}\n","size_bytes":1948},"client/src/pages/landing.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Brain, \n  TrendingUp, \n  FileText, \n  Upload, \n  Search, \n  Users, \n  Calendar, \n  MessageSquare, \n  BarChart3,\n  CheckCircle,\n  Menu,\n  X\n} from \"lucide-react\";\n\nexport default function Landing() {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-background font-sans\">\n      {/* Navigation */}\n      <nav className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <h1 className=\"text-2xl font-bold text-primary\">AI Talent Match</h1>\n              </div>\n              <div className=\"hidden md:block\">\n                <div className=\"ml-10 flex items-baseline space-x-4\">\n                  <a href=\"#features\" className=\"text-gray-700 hover:text-primary px-3 py-2 text-sm font-medium transition-colors\">\n                    Features\n                  </a>\n                  <a href=\"#how-it-works\" className=\"text-gray-700 hover:text-primary px-3 py-2 text-sm font-medium transition-colors\">\n                    How It Works\n                  </a>\n                  <a href=\"#pricing\" className=\"text-gray-700 hover:text-primary px-3 py-2 text-sm font-medium transition-colors\">\n                    Pricing\n                  </a>\n                </div>\n              </div>\n            </div>\n            <div className=\"hidden md:block\">\n              <div className=\"ml-4 flex items-center md:ml-6 space-x-3\">\n                <Link href=\"/login\">\n                  <Button variant=\"ghost\" data-testid=\"button-sign-in\">\n                    Sign In\n                  </Button>\n                </Link>\n                <Link href=\"/register\">\n                  <Button data-testid=\"button-get-started\">\n                    Get Started\n                  </Button>\n                </Link>\n              </div>\n            </div>\n            <div className=\"md:hidden\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n                data-testid=\"button-mobile-menu\"\n              >\n                {mobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n              </Button>\n            </div>\n          </div>\n          \n          {/* Mobile menu */}\n          {mobileMenuOpen && (\n            <div className=\"md:hidden\">\n              <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3 border-t\">\n                <a href=\"#features\" className=\"block px-3 py-2 text-base font-medium text-gray-700 hover:text-primary\">\n                  Features\n                </a>\n                <a href=\"#how-it-works\" className=\"block px-3 py-2 text-base font-medium text-gray-700 hover:text-primary\">\n                  How It Works\n                </a>\n                <a href=\"#pricing\" className=\"block px-3 py-2 text-base font-medium text-gray-700 hover:text-primary\">\n                  Pricing\n                </a>\n                <div className=\"pt-4 pb-3 border-t border-gray-200\">\n                  <div className=\"flex flex-col space-y-2\">\n                    <Link href=\"/login\">\n                      <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"mobile-sign-in\">\n                        Sign In\n                      </Button>\n                    </Link>\n                    <Link href=\"/register\">\n                      <Button className=\"w-full justify-start\" data-testid=\"mobile-get-started\">\n                        Get Started\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"hero-gradient text-white py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-bold leading-tight mb-6\">\n                AI-Powered Job Matching That{\" \"}\n                <span className=\"text-blue-200\">Actually Works</span>\n              </h1>\n              <p className=\"text-xl text-blue-100 mb-8 leading-relaxed\">\n                Advanced semantic search and hybrid ranking algorithm connects the right talent with the right opportunities. \n                No more endless scrolling through irrelevant matches.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n                <Link href=\"/register?role=seeker\">\n                  <Button\n                    size=\"lg\"\n                    className=\"bg-white text-primary hover:bg-gray-100 flex items-center justify-center\"\n                    data-testid=\"button-job-seeker-signup\"\n                  >\n                    <Users className=\"mr-2 h-5 w-5\" />\n                    I'm Looking for Jobs\n                  </Button>\n                </Link>\n                <Link href=\"/register?role=recruiter\">\n                  <Button\n                    size=\"lg\"\n                    variant=\"outline\"\n                    className=\"border-2 border-white text-white hover:bg-white hover:text-primary flex items-center justify-center\"\n                    data-testid=\"button-recruiter-signup\"\n                  >\n                    <Search className=\"mr-2 h-5 w-5\" />\n                    I'm Hiring Talent\n                  </Button>\n                </Link>\n              </div>\n              <div className=\"flex items-center text-blue-200 text-sm\">\n                <CheckCircle className=\"mr-2 h-4 w-4\" />\n                <span>Free to start • No credit card required • 2-minute setup</span>\n              </div>\n            </div>\n            <div className=\"relative\">\n              <img\n                src=\"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=800&h=600\"\n                alt=\"Professional using AI job matching platform\"\n                className=\"rounded-xl shadow-2xl\"\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent rounded-xl\"></div>\n              <Card className=\"absolute top-4 right-4 bg-white/95 backdrop-blur-sm shadow-lg\">\n                <CardContent className=\"p-3\">\n                  <div className=\"text-primary font-bold text-lg\" data-testid=\"text-match-accuracy\">98%</div>\n                  <div className=\"text-gray-600 text-xs\">Match Accuracy</div>\n                </CardContent>\n              </Card>\n              <Card className=\"absolute bottom-4 left-4 bg-white/95 backdrop-blur-sm shadow-lg\">\n                <CardContent className=\"p-3\">\n                  <div className=\"text-accent font-bold text-lg\" data-testid=\"text-hiring-speed\">2.5x</div>\n                  <div className=\"text-gray-600 text-xs\">Faster Hiring</div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* AI Features Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-secondary mb-4\">\n              Powered by Advanced AI & Machine Learning\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Our hybrid ranking system combines semantic search, natural language processing, \n              and intelligent scoring to deliver unprecedented matching accuracy.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8 mb-16\">\n            <Card className=\"feature-card-blue border\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-12 h-12 bg-primary text-white rounded-lg flex items-center justify-center mb-4\">\n                  <Brain className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-secondary mb-3\">Semantic Understanding</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  Advanced NLP analyzes context and meaning, not just keywords. \n                  Understands skill relationships and job requirements deeply.\n                </p>\n                <div className=\"text-sm text-primary font-medium\">\n                  <BarChart3 className=\"inline mr-1 h-4 w-4\" />\n                  spaCy + Sentence Transformers\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"feature-card-green border\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-12 h-12 bg-accent text-white rounded-lg flex items-center justify-center mb-4\">\n                  <TrendingUp className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-secondary mb-3\">Hybrid Scoring</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  Combines BM25 lexical search (40%) + semantic similarity (50%) + rule-based boosts (10%) for optimal results.\n                </p>\n                <div className=\"text-sm text-accent font-medium\">\n                  <Search className=\"inline mr-1 h-4 w-4\" />\n                  Elasticsearch + Vector Search\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"feature-card-purple border\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-12 h-12 bg-purple-600 text-white rounded-lg flex items-center justify-center mb-4\">\n                  <FileText className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-secondary mb-3\">Resume Intelligence</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  Automatically extracts skills, experience, and qualifications from PDF/DOCX files with high accuracy.\n                </p>\n                <div className=\"text-sm text-purple-600 font-medium\">\n                  <Upload className=\"inline mr-1 h-4 w-4\" />\n                  PDF + DOCX Processing\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Technical Architecture */}\n          <Card className=\"bg-gray-50\">\n            <CardContent className=\"p-8\">\n              <h3 className=\"text-2xl font-bold text-secondary mb-6 text-center\">Real-Time Architecture</h3>\n              <div className=\"grid md:grid-cols-4 gap-4 text-center\">\n                <Card className=\"bg-white shadow-sm\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"w-10 h-10 bg-blue-100 text-primary rounded-lg flex items-center justify-center mx-auto mb-2\">\n                      <Users className=\"h-5 w-5\" />\n                    </div>\n                    <div className=\"font-semibold text-sm\">React SPA</div>\n                    <div className=\"text-xs text-gray-500\">Frontend</div>\n                  </CardContent>\n                </Card>\n                <Card className=\"bg-white shadow-sm\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"w-10 h-10 bg-green-100 text-green-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                      <Search className=\"h-5 w-5\" />\n                    </div>\n                    <div className=\"font-semibold text-sm\">Django API</div>\n                    <div className=\"text-xs text-gray-500\">Backend</div>\n                  </CardContent>\n                </Card>\n                <Card className=\"bg-white shadow-sm\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"w-10 h-10 bg-yellow-100 text-yellow-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                      <Search className=\"h-5 w-5\" />\n                    </div>\n                    <div className=\"font-semibold text-sm\">Elasticsearch</div>\n                    <div className=\"text-xs text-gray-500\">Data Store</div>\n                  </CardContent>\n                </Card>\n                <Card className=\"bg-white shadow-sm\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"w-10 h-10 bg-purple-100 text-purple-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                      <Brain className=\"h-5 w-5\" />\n                    </div>\n                    <div className=\"font-semibold text-sm\">ML Pipeline</div>\n                    <div className=\"text-xs text-gray-500\">AI Engine</div>\n                  </CardContent>\n                </Card>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-secondary mb-4\">\n              Everything You Need for Smart Hiring\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Advanced features built for the modern recruitment workflow\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 border border-blue-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-primary text-white rounded-lg flex items-center justify-center mb-4\">\n                  <Upload className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-secondary mb-2\">Smart Resume Upload</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  PDF/DOCX parsing with automatic skill extraction and profile completion using advanced NLP.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-green-50 to-green-100 border border-green-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-accent text-white rounded-lg flex items-center justify-center mb-4\">\n                  <Search className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-secondary mb-2\">Semantic Job Search</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Find opportunities based on meaning and context, not just keywords. Understands skill relationships.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 border border-purple-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-purple-600 text-white rounded-lg flex items-center justify-center mb-4\">\n                  <Users className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-secondary mb-2\">AI Candidate Matching</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Hybrid scoring algorithm ranks candidates with 98% accuracy using multiple intelligence factors.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100 border border-orange-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-orange-600 text-white rounded-lg flex items-center justify-center mb-4\">\n                  <Calendar className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-secondary mb-2\">Interview Scheduling</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Integrated calendar with real-time availability sync and automated meeting link generation.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-red-50 to-red-100 border border-red-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-red-600 text-white rounded-lg flex items-center justify-center mb-4\">\n                  <MessageSquare className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-secondary mb-2\">Real-time Chat</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  WebSocket-powered messaging between recruiters and candidates with application context.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-indigo-50 to-indigo-100 border border-indigo-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-indigo-600 text-white rounded-lg flex items-center justify-center mb-4\">\n                  <BarChart3 className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-secondary mb-2\">Advanced Analytics</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Track hiring metrics, match success rates, and optimize your recruitment process with data insights.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-secondary mb-4\">\n              Simple, Transparent Pricing\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Choose the plan that fits your hiring needs\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n            {/* Free Tier */}\n            <Card className=\"border-2\">\n              <CardContent className=\"p-8\">\n                <div className=\"text-center\">\n                  <h3 className=\"text-xl font-bold text-secondary mb-2\">Starter</h3>\n                  <div className=\"mb-6\">\n                    <span className=\"text-4xl font-bold text-secondary\">Free</span>\n                    <span className=\"text-gray-500\">/month</span>\n                  </div>\n                  <ul className=\"text-left space-y-3 mb-8\">\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-accent mr-2\" />\n                      <span className=\"text-sm\">Up to 10 job applications</span>\n                    </li>\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-accent mr-2\" />\n                      <span className=\"text-sm\">Basic AI matching</span>\n                    </li>\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-accent mr-2\" />\n                      <span className=\"text-sm\">Resume upload & parsing</span>\n                    </li>\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-accent mr-2\" />\n                      <span className=\"text-sm\">Email notifications</span>\n                    </li>\n                  </ul>\n                  <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-starter-plan\">\n                    Get Started Free\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Professional Tier */}\n            <Card className=\"border-2 border-primary relative transform scale-105 shadow-xl\">\n              <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                <Badge className=\"bg-accent text-white\">Most Popular</Badge>\n              </div>\n              <CardContent className=\"p-8 bg-primary text-white\">\n                <div className=\"text-center\">\n                  <h3 className=\"text-xl font-bold mb-2\">Professional</h3>\n                  <div className=\"mb-6\">\n                    <span className=\"text-4xl font-bold\">$49</span>\n                    <span className=\"text-blue-200\">/month</span>\n                  </div>\n                  <ul className=\"text-left space-y-3 mb-8\">\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-green-300 mr-2\" />\n                      <span className=\"text-sm\">Unlimited applications</span>\n                    </li>\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-green-300 mr-2\" />\n                      <span className=\"text-sm\">Advanced AI ranking</span>\n                    </li>\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-green-300 mr-2\" />\n                      <span className=\"text-sm\">Real-time chat</span>\n                    </li>\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-green-300 mr-2\" />\n                      <span className=\"text-sm\">Interview scheduling</span>\n                    </li>\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-green-300 mr-2\" />\n                      <span className=\"text-sm\">Analytics dashboard</span>\n                    </li>\n                  </ul>\n                  <Button className=\"w-full bg-white text-primary hover:bg-gray-100\" data-testid=\"button-professional-plan\">\n                    Start Free Trial\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Enterprise Tier */}\n            <Card className=\"border-2\">\n              <CardContent className=\"p-8\">\n                <div className=\"text-center\">\n                  <h3 className=\"text-xl font-bold text-secondary mb-2\">Enterprise</h3>\n                  <div className=\"mb-6\">\n                    <span className=\"text-4xl font-bold text-secondary\">$199</span>\n                    <span className=\"text-gray-500\">/month</span>\n                  </div>\n                  <ul className=\"text-left space-y-3 mb-8\">\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-accent mr-2\" />\n                      <span className=\"text-sm\">Everything in Professional</span>\n                    </li>\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-accent mr-2\" />\n                      <span className=\"text-sm\">Custom ML model training</span>\n                    </li>\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-accent mr-2\" />\n                      <span className=\"text-sm\">API access</span>\n                    </li>\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-accent mr-2\" />\n                      <span className=\"text-sm\">Priority support</span>\n                    </li>\n                    <li className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-accent mr-2\" />\n                      <span className=\"text-sm\">White-label options</span>\n                    </li>\n                  </ul>\n                  <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-enterprise-plan\">\n                    Contact Sales\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 hero-gradient text-white\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-6\">\n            Ready to Transform Your Hiring Process?\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-8\">\n            Join thousands of companies already using AI-powered recruitment to find the best talent faster.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center max-w-md mx-auto\">\n            <Link href=\"/register\">\n              <Button size=\"lg\" className=\"bg-white text-primary hover:bg-gray-100 flex-1\" data-testid=\"button-start-free-trial\">\n                Start Free Trial\n              </Button>\n            </Link>\n            <Button \n              size=\"lg\" \n              variant=\"outline\" \n              className=\"border-2 border-white text-white hover:bg-white hover:text-primary flex-1\"\n              data-testid=\"button-book-demo\"\n            >\n              Book Demo\n            </Button>\n          </div>\n          <p className=\"text-sm text-blue-200 mt-4\">\n            No credit card required • Setup in 2 minutes • Cancel anytime\n          </p>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-secondary text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"md:col-span-2\">\n              <h3 className=\"text-2xl font-bold mb-4\">AI Talent Match</h3>\n              <p className=\"text-gray-300 mb-4 max-w-md\">\n                The most advanced AI-powered job matching platform. Connecting the right talent with the right opportunities through intelligent technology.\n              </p>\n              <div className=\"flex space-x-4\">\n                <a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">\n                  <Users className=\"h-5 w-5\" />\n                </a>\n                <a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">\n                  <Search className=\"h-5 w-5\" />\n                </a>\n                <a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">\n                  <Brain className=\"h-5 w-5\" />\n                </a>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Product</h4>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li><a href=\"#features\" className=\"hover:text-white transition-colors\">Features</a></li>\n                <li><a href=\"#pricing\" className=\"hover:text-white transition-colors\">Pricing</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">API Docs</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Integrations</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Company</h4>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">About Us</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Careers</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Contact</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Privacy Policy</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-700 mt-12 pt-8 text-center text-gray-300\">\n            <p>&copy; 2024 AI Talent Match. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":28186},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/candidate/candidate-card.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  MapPin, \n  Briefcase, \n  Star, \n  MessageSquare,\n  Calendar,\n  FileText,\n  User,\n  Mail,\n  Clock\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport type { User as UserType } from \"@shared/schema\";\n\ninterface CandidateCardProps {\n  candidate: UserType & { \n    matchScore?: number;\n    applicationStatus?: string;\n    appliedDate?: string;\n  };\n  onViewProfile?: (candidateId: string) => void;\n  onContact?: (candidateId: string) => void;\n  onScheduleInterview?: (candidateId: string) => void;\n  onViewResume?: (candidateId: string) => void;\n  onShortlist?: (candidateId: string) => void;\n  onUpdateStatus?: (candidateId: string, status: string) => void;\n  showMatchScore?: boolean;\n  showApplicationStatus?: boolean;\n  userRole?: 'recruiter' | 'seeker';\n  className?: string;\n}\n\nexport default function CandidateCard({\n  candidate,\n  onViewProfile,\n  onContact,\n  onScheduleInterview,\n  onViewResume,\n  onShortlist,\n  onUpdateStatus,\n  showMatchScore = false,\n  showApplicationStatus = false,\n  userRole = 'recruiter',\n  className\n}: CandidateCardProps) {\n  const getUserInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(part => part[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getMatchScoreColor = (score?: number) => {\n    if (!score) return '';\n    if (score >= 90) return 'text-green-600 bg-green-100';\n    if (score >= 75) return 'text-blue-600 bg-blue-100';\n    if (score >= 60) return 'text-yellow-600 bg-yellow-100';\n    return 'text-gray-600 bg-gray-100';\n  };\n\n  const getStatusColor = (status?: string) => {\n    switch (status) {\n      case 'applied':\n        return 'bg-blue-100 text-blue-800';\n      case 'screening':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'shortlisted':\n        return 'bg-purple-100 text-purple-800';\n      case 'interviewed':\n        return 'bg-indigo-100 text-indigo-800';\n      case 'offered':\n        return 'bg-green-100 text-green-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleDateString();\n  };\n\n  return (\n    <Card className={cn(\"hover:shadow-md transition-shadow duration-200\", className)} data-testid={`candidate-card-${candidate.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start space-x-4\">\n          <Avatar className=\"h-12 w-12\">\n            <AvatarFallback className=\"bg-primary text-white font-medium\">\n              {getUserInitials(candidate.full_name)}\n            </AvatarFallback>\n          </Avatar>\n          \n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between\">\n              <div>\n                <CardTitle className=\"text-lg line-clamp-1\" data-testid=\"candidate-name\">\n                  {candidate.full_name}\n                </CardTitle>\n                <CardDescription className=\"line-clamp-1\" data-testid=\"candidate-headline\">\n                  {candidate.headline || 'Professional'}\n                </CardDescription>\n              </div>\n              \n              <div className=\"flex items-center space-x-2 ml-4\">\n                {showMatchScore && candidate.matchScore && (\n                  <Badge \n                    className={cn(\"font-semibold\", getMatchScoreColor(candidate.matchScore))}\n                    data-testid=\"candidate-match-score\"\n                  >\n                    <Star className=\"h-3 w-3 mr-1\" />\n                    {Math.round(candidate.matchScore)}%\n                  </Badge>\n                )}\n                \n                {showApplicationStatus && candidate.applicationStatus && (\n                  <Badge \n                    className={getStatusColor(candidate.applicationStatus)}\n                    data-testid=\"candidate-application-status\"\n                  >\n                    {candidate.applicationStatus}\n                  </Badge>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Candidate Details */}\n        <div className=\"flex flex-wrap items-center gap-4 text-sm text-gray-600\">\n          {candidate.location && (\n            <div className=\"flex items-center\">\n              <MapPin className=\"h-4 w-4 mr-1\" />\n              <span data-testid=\"candidate-location\">{candidate.location}</span>\n            </div>\n          )}\n          \n          {candidate.experience_years && (\n            <div className=\"flex items-center\">\n              <Briefcase className=\"h-4 w-4 mr-1\" />\n              <span data-testid=\"candidate-experience\">\n                {candidate.experience_years} years experience\n              </span>\n            </div>\n          )}\n          \n          <div className=\"flex items-center\">\n            <Mail className=\"h-4 w-4 mr-1\" />\n            <span data-testid=\"candidate-email\">{candidate.email}</span>\n          </div>\n\n          {showApplicationStatus && candidate.appliedDate && (\n            <div className=\"flex items-center\">\n              <Clock className=\"h-4 w-4 mr-1\" />\n              <span data-testid=\"candidate-applied-date\">\n                Applied {formatDate(candidate.appliedDate)}\n              </span>\n            </div>\n          )}\n        </div>\n\n        {/* Skills */}\n        {candidate.skills && candidate.skills.length > 0 && (\n          <div className=\"space-y-2\">\n            <div className=\"text-sm font-medium text-gray-900\">Skills:</div>\n            <div className=\"flex flex-wrap gap-1\">\n              {candidate.skills.slice(0, 6).map((skill, index) => (\n                <Badge \n                  key={index} \n                  variant=\"outline\" \n                  className=\"text-xs\"\n                  data-testid={`candidate-skill-${index}`}\n                >\n                  {skill}\n                </Badge>\n              ))}\n              {candidate.skills.length > 6 && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  +{candidate.skills.length - 6} more\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Resume Status */}\n        {candidate.resume_file_path && (\n          <div className=\"flex items-center text-sm text-green-600\">\n            <FileText className=\"h-4 w-4 mr-1\" />\n            <span data-testid=\"resume-status\">Resume available</span>\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"flex items-center justify-between pt-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => onViewProfile?.(candidate.id)}\n            data-testid=\"view-profile-button\"\n          >\n            <User className=\"h-4 w-4 mr-2\" />\n            View Profile\n          </Button>\n          \n          <div className=\"flex space-x-2\">\n            {candidate.resume_file_path && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onViewResume?.(candidate.id)}\n                data-testid=\"view-resume-button\"\n              >\n                <FileText className=\"h-4 w-4 mr-2\" />\n                Resume\n              </Button>\n            )}\n            \n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onContact?.(candidate.id)}\n              data-testid=\"contact-button\"\n            >\n              <MessageSquare className=\"h-4 w-4 mr-2\" />\n              Message\n            </Button>\n            \n            {showApplicationStatus && (\n              <>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onScheduleInterview?.(candidate.id)}\n                  data-testid=\"schedule-interview-button\"\n                >\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  Interview\n                </Button>\n                \n                <Button\n                  size=\"sm\"\n                  onClick={() => onShortlist?.(candidate.id)}\n                  disabled={candidate.applicationStatus === 'shortlisted'}\n                  data-testid=\"shortlist-button\"\n                >\n                  {candidate.applicationStatus === 'shortlisted' ? 'Shortlisted' : 'Shortlist'}\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Status Update Actions */}\n        {showApplicationStatus && candidate.applicationStatus && (\n          <div className=\"flex space-x-2 pt-2 border-t\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onUpdateStatus?.(candidate.id, 'screening')}\n              disabled={candidate.applicationStatus === 'screening'}\n              data-testid=\"move-to-screening-button\"\n            >\n              Move to Screening\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onUpdateStatus?.(candidate.id, 'rejected')}\n              disabled={candidate.applicationStatus === 'rejected'}\n              data-testid=\"reject-button\"\n            >\n              Reject\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9714},"client/src/components/chat/chat-interface.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Send, Phone, Video, MoreVertical, Paperclip } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Message {\n  id: string;\n  senderId: string;\n  senderName: string;\n  senderRole: string;\n  content: string;\n  timestamp: string;\n}\n\ninterface ChatInterfaceProps {\n  applicationId: string;\n  recipientName: string;\n  recipientRole: string;\n  jobTitle: string;\n  companyName: string;\n  className?: string;\n}\n\nexport default function ChatInterface({\n  applicationId,\n  recipientName,\n  recipientRole,\n  jobTitle,\n  companyName,\n  className\n}: ChatInterfaceProps) {\n  const { user } = useAuth();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [recipientTyping, setRecipientTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const typingTimeoutRef = useRef<NodeJS.Timeout>();\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const { sendMessage, isConnected } = useWebSocket(`/ws/chat/${applicationId}/`, {\n    onMessage: (data) => {\n      if (data.type === 'message') {\n        setMessages(prev => [...prev, data.message]);\n      } else if (data.type === 'typing') {\n        setRecipientTyping(data.is_typing);\n      }\n    },\n    onOpen: () => {\n      console.log('Connected to chat');\n    },\n    onError: (error) => {\n      console.error('Chat connection error:', error);\n    }\n  });\n\n  const handleSendMessage = () => {\n    if (newMessage.trim() && isConnected && user) {\n      sendMessage({\n        type: 'chat_message',\n        content: newMessage.trim(),\n        senderName: user.full_name,\n        senderRole: user.role\n      });\n\n      setNewMessage(\"\");\n      handleStopTyping();\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleTyping = () => {\n    if (!isTyping) {\n      setIsTyping(true);\n      sendMessage({\n        type: 'typing',\n        is_typing: true\n      });\n    }\n\n    // Clear existing timeout\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n\n    // Set new timeout to stop typing indicator\n    typingTimeoutRef.current = setTimeout(() => {\n      handleStopTyping();\n    }, 2000);\n  };\n\n  const handleStopTyping = () => {\n    if (isTyping) {\n      setIsTyping(false);\n      sendMessage({\n        type: 'typing',\n        is_typing: false\n      });\n    }\n\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewMessage(e.target.value);\n    handleTyping();\n  };\n\n  const getUserInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(part => part[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const formatDate = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    if (date.toDateString() === today.toDateString()) {\n      return 'Today';\n    } else if (date.toDateString() === yesterday.toDateString()) {\n      return 'Yesterday';\n    } else {\n      return date.toLocaleDateString();\n    }\n  };\n\n  if (!user) return null;\n\n  return (\n    <Card className={cn(\"flex flex-col h-[600px]\", className)} data-testid=\"chat-interface\">\n      {/* Chat Header */}\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4 border-b\">\n        <div className=\"flex items-center space-x-3\">\n          <Avatar className=\"h-10 w-10\">\n            <AvatarFallback className=\"bg-primary text-white\">\n              {getUserInitials(recipientName)}\n            </AvatarFallback>\n          </Avatar>\n          <div>\n            <CardTitle className=\"text-lg\" data-testid=\"recipient-name\">\n              {recipientName}\n            </CardTitle>\n            <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {recipientRole}\n              </Badge>\n              <span>•</span>\n              <span data-testid=\"job-title\">{jobTitle}</span>\n              <span>•</span>\n              <span data-testid=\"company-name\">{companyName}</span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"voice-call-button\">\n            <Phone className=\"h-4 w-4\" />\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"video-call-button\">\n            <Video className=\"h-4 w-4\" />\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"chat-menu-button\">\n            <MoreVertical className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n\n      {/* Messages Area */}\n      <CardContent className=\"flex-1 p-0\">\n        <ScrollArea className=\"h-full p-4\" data-testid=\"messages-container\">\n          <div className=\"space-y-4\">\n            {messages.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\" data-testid=\"no-messages\">\n                <p>Start your conversation</p>\n                <p className=\"text-sm\">Send a message to {recipientName}</p>\n              </div>\n            ) : (\n              messages.map((message, index) => {\n                const isCurrentUser = message.senderId === user.id;\n                const showDate = index === 0 || \n                  formatDate(message.timestamp) !== formatDate(messages[index - 1].timestamp);\n\n                return (\n                  <div key={message.id}>\n                    {showDate && (\n                      <div className=\"text-center py-2\">\n                        <span className=\"text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded\">\n                          {formatDate(message.timestamp)}\n                        </span>\n                      </div>\n                    )}\n                    \n                    <div\n                      className={cn(\n                        \"flex items-end space-x-2\",\n                        isCurrentUser ? \"justify-end\" : \"justify-start\"\n                      )}\n                      data-testid={`message-${message.id}`}\n                    >\n                      {!isCurrentUser && (\n                        <Avatar className=\"h-6 w-6\">\n                          <AvatarFallback className=\"text-xs bg-gray-200\">\n                            {getUserInitials(message.senderName)}\n                          </AvatarFallback>\n                        </Avatar>\n                      )}\n                      \n                      <div\n                        className={cn(\n                          \"max-w-[70%] rounded-lg px-3 py-2 text-sm\",\n                          isCurrentUser \n                            ? \"chat-message-sent bg-primary text-white\" \n                            : \"chat-message-received bg-gray-100 text-gray-900\"\n                        )}\n                      >\n                        {!isCurrentUser && (\n                          <div className=\"text-xs text-gray-500 mb-1\">\n                            {message.senderName}\n                          </div>\n                        )}\n                        <div data-testid=\"message-content\">{message.content}</div>\n                        <div\n                          className={cn(\n                            \"text-xs mt-1\",\n                            isCurrentUser ? \"text-blue-100\" : \"text-gray-400\"\n                          )}\n                          data-testid=\"message-time\"\n                        >\n                          {formatTime(message.timestamp)}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })\n            )}\n            \n            {recipientTyping && (\n              <div className=\"flex items-end space-x-2\" data-testid=\"typing-indicator\">\n                <Avatar className=\"h-6 w-6\">\n                  <AvatarFallback className=\"text-xs bg-gray-200\">\n                    {getUserInitials(recipientName)}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"bg-gray-100 rounded-lg px-3 py-2\">\n                  <div className=\"flex space-x-1\">\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n          <div ref={messagesEndRef} />\n        </ScrollArea>\n      </CardContent>\n\n      {/* Message Input */}\n      <div className=\"border-t p-4\">\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"attach-file-button\">\n            <Paperclip className=\"h-4 w-4\" />\n          </Button>\n          \n          <div className=\"flex-1 relative\">\n            <Input\n              value={newMessage}\n              onChange={handleInputChange}\n              onKeyPress={handleKeyPress}\n              placeholder={`Message ${recipientName}...`}\n              disabled={!isConnected}\n              className=\"pr-12\"\n              data-testid=\"message-input\"\n            />\n          </div>\n          \n          <Button\n            onClick={handleSendMessage}\n            disabled={!newMessage.trim() || !isConnected}\n            size=\"sm\"\n            data-testid=\"send-message-button\"\n          >\n            <Send className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        {!isConnected && (\n          <div className=\"text-xs text-red-500 mt-2\" data-testid=\"connection-status\">\n            Disconnected - trying to reconnect...\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":10968},"client/src/components/interview/calendar-scheduler.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Calendar as CalendarIcon, Clock, Video, Plus, User, MapPin } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface TimeSlot {\n  start_time: string;\n  end_time: string;\n}\n\ninterface Interview {\n  id: string;\n  job_id: string;\n  seeker_id: string;\n  recruiter_id: string;\n  start_time: string;\n  end_time: string;\n  meeting_link?: string;\n  status: 'scheduled' | 'rescheduled' | 'cancelled' | 'completed';\n  notes?: string;\n  job?: {\n    title: string;\n    company: string;\n  };\n  seeker?: {\n    full_name: string;\n    email: string;\n  };\n  recruiter?: {\n    full_name: string;\n    email: string;\n  };\n}\n\ninterface CalendarSchedulerProps {\n  interviews: Interview[];\n  availableSlots: TimeSlot[];\n  onScheduleInterview: (data: {\n    job_id: string;\n    seeker_id: string;\n    start_time: string;\n    end_time: string;\n    notes?: string;\n  }) => void;\n  onUpdateInterview: (interviewId: string, data: {\n    start_time?: string;\n    end_time?: string;\n    status?: string;\n    notes?: string;\n  }) => void;\n  onCancelInterview: (interviewId: string) => void;\n  userRole: 'seeker' | 'recruiter';\n  isLoading?: boolean;\n  className?: string;\n}\n\nexport default function CalendarScheduler({\n  interviews,\n  availableSlots,\n  onScheduleInterview,\n  onUpdateInterview,\n  onCancelInterview,\n  userRole,\n  isLoading = false,\n  className\n}: CalendarSchedulerProps) {\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [isScheduleDialogOpen, setIsScheduleDialogOpen] = useState(false);\n  const [scheduleForm, setScheduleForm] = useState({\n    job_id: '',\n    seeker_id: '',\n    start_time: '',\n    end_time: '',\n    notes: ''\n  });\n\n  const formatDate = (date: Date) => {\n    return date.toLocaleDateString('en-US', { \n      weekday: 'long', \n      year: 'numeric', \n      month: 'long', \n      day: 'numeric' \n    });\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'scheduled':\n        return 'bg-blue-100 text-blue-800';\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      case 'rescheduled':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getInterviewsForDate = (date: Date) => {\n    const dateStr = date.toISOString().split('T')[0];\n    return interviews.filter(interview => \n      interview.start_time.startsWith(dateStr)\n    );\n  };\n\n  const getAvailableSlotsForDate = (date: Date) => {\n    const dateStr = date.toISOString().split('T')[0];\n    return availableSlots.filter(slot => \n      slot.start_time.startsWith(dateStr)\n    );\n  };\n\n  const handleScheduleSubmit = () => {\n    if (scheduleForm.job_id && scheduleForm.seeker_id && scheduleForm.start_time && scheduleForm.end_time) {\n      onScheduleInterview(scheduleForm);\n      setIsScheduleDialogOpen(false);\n      setScheduleForm({\n        job_id: '',\n        seeker_id: '',\n        start_time: '',\n        end_time: '',\n        notes: ''\n      });\n    }\n  };\n\n  const todaysInterviews = getInterviewsForDate(selectedDate);\n  const todaysAvailableSlots = getAvailableSlotsForDate(selectedDate);\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Calendar Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <CalendarIcon className=\"h-5 w-5\" />\n                <span>Interview Schedule</span>\n              </CardTitle>\n              <CardDescription>\n                Manage your interview appointments\n              </CardDescription>\n            </div>\n            \n            {userRole === 'recruiter' && (\n              <Dialog open={isScheduleDialogOpen} onOpenChange={setIsScheduleDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"schedule-interview-button\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Schedule Interview\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Schedule New Interview</DialogTitle>\n                    <DialogDescription>\n                      Set up a new interview appointment\n                    </DialogDescription>\n                  </DialogHeader>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"job_id\">Job</Label>\n                      <Input\n                        id=\"job_id\"\n                        value={scheduleForm.job_id}\n                        onChange={(e) => setScheduleForm(prev => ({ ...prev, job_id: e.target.value }))}\n                        placeholder=\"Job ID\"\n                        data-testid=\"schedule-job-input\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"seeker_id\">Candidate</Label>\n                      <Input\n                        id=\"seeker_id\"\n                        value={scheduleForm.seeker_id}\n                        onChange={(e) => setScheduleForm(prev => ({ ...prev, seeker_id: e.target.value }))}\n                        placeholder=\"Candidate ID\"\n                        data-testid=\"schedule-candidate-input\"\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"start_time\">Start Time</Label>\n                        <Input\n                          id=\"start_time\"\n                          type=\"datetime-local\"\n                          value={scheduleForm.start_time}\n                          onChange={(e) => setScheduleForm(prev => ({ ...prev, start_time: e.target.value }))}\n                          data-testid=\"schedule-start-time-input\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"end_time\">End Time</Label>\n                        <Input\n                          id=\"end_time\"\n                          type=\"datetime-local\"\n                          value={scheduleForm.end_time}\n                          onChange={(e) => setScheduleForm(prev => ({ ...prev, end_time: e.target.value }))}\n                          data-testid=\"schedule-end-time-input\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"notes\">Notes (Optional)</Label>\n                      <Textarea\n                        id=\"notes\"\n                        value={scheduleForm.notes}\n                        onChange={(e) => setScheduleForm(prev => ({ ...prev, notes: e.target.value }))}\n                        placeholder=\"Interview notes or instructions\"\n                        data-testid=\"schedule-notes-input\"\n                      />\n                    </div>\n                    \n                    <div className=\"flex space-x-2\">\n                      <Button \n                        onClick={() => setIsScheduleDialogOpen(false)} \n                        variant=\"outline\"\n                        data-testid=\"schedule-cancel-button\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        onClick={handleScheduleSubmit}\n                        disabled={!scheduleForm.job_id || !scheduleForm.seeker_id || !scheduleForm.start_time || !scheduleForm.end_time}\n                        data-testid=\"schedule-submit-button\"\n                      >\n                        Schedule\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            )}\n          </div>\n        </CardHeader>\n      </Card>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Calendar */}\n        <Card className=\"lg:col-span-1\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Calendar</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Calendar\n              mode=\"single\"\n              selected={selectedDate}\n              onSelect={(date) => date && setSelectedDate(date)}\n              className=\"rounded-md border\"\n              data-testid=\"interview-calendar\"\n            />\n          </CardContent>\n        </Card>\n\n        {/* Schedule for Selected Date */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">\n              {formatDate(selectedDate)}\n            </CardTitle>\n            <CardDescription>\n              {todaysInterviews.length} interview{todaysInterviews.length !== 1 ? 's' : ''} scheduled\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {todaysInterviews.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\" data-testid=\"no-interviews\">\n                  <CalendarIcon className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <p>No interviews scheduled for this date</p>\n                </div>\n              ) : (\n                todaysInterviews.map((interview) => (\n                  <div \n                    key={interview.id} \n                    className=\"border rounded-lg p-4 space-y-3\"\n                    data-testid={`interview-${interview.id}`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                          <Clock className=\"h-4 w-4\" />\n                          <span data-testid=\"interview-time\">\n                            {formatTime(interview.start_time)} - {formatTime(interview.end_time)}\n                          </span>\n                        </div>\n                        <Badge className={getStatusColor(interview.status)} data-testid=\"interview-status\">\n                          {interview.status}\n                        </Badge>\n                      </div>\n                      \n                      {interview.meeting_link && (\n                        <Button size=\"sm\" variant=\"outline\" asChild data-testid=\"join-meeting-button\">\n                          <a href={interview.meeting_link} target=\"_blank\" rel=\"noopener noreferrer\">\n                            <Video className=\"h-4 w-4 mr-2\" />\n                            Join\n                          </a>\n                        </Button>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      {interview.job && (\n                        <div className=\"flex items-center space-x-2 text-sm\">\n                          <MapPin className=\"h-4 w-4 text-gray-400\" />\n                          <span data-testid=\"interview-job\">\n                            {interview.job.title} at {interview.job.company}\n                          </span>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex items-center space-x-2 text-sm\">\n                        <User className=\"h-4 w-4 text-gray-400\" />\n                        <span data-testid=\"interview-participant\">\n                          {userRole === 'recruiter' \n                            ? `with ${interview.seeker?.full_name}`\n                            : `with ${interview.recruiter?.full_name}`\n                          }\n                        </span>\n                      </div>\n                    </div>\n\n                    {interview.notes && (\n                      <div className=\"text-sm text-gray-600 bg-gray-50 rounded p-2\">\n                        <strong>Notes:</strong> {interview.notes}\n                      </div>\n                    )}\n\n                    <div className=\"flex space-x-2\">\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => onUpdateInterview(interview.id, { status: 'rescheduled' })}\n                        disabled={interview.status === 'completed' || interview.status === 'cancelled'}\n                        data-testid={`reschedule-interview-${interview.id}`}\n                      >\n                        Reschedule\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => onCancelInterview(interview.id)}\n                        disabled={interview.status === 'completed' || interview.status === 'cancelled'}\n                        data-testid={`cancel-interview-${interview.id}`}\n                      >\n                        Cancel\n                      </Button>\n                      {interview.status === 'scheduled' && (\n                        <Button \n                          size=\"sm\"\n                          onClick={() => onUpdateInterview(interview.id, { status: 'completed' })}\n                          data-testid={`complete-interview-${interview.id}`}\n                        >\n                          Mark Complete\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                ))\n              )}\n\n              {/* Available Time Slots */}\n              {todaysAvailableSlots.length > 0 && userRole === 'recruiter' && (\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-medium mb-3\">Available Time Slots</h4>\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                    {todaysAvailableSlots.slice(0, 6).map((slot, index) => (\n                      <Button\n                        key={index}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"text-xs\"\n                        data-testid={`available-slot-${index}`}\n                      >\n                        {formatTime(slot.start_time)} - {formatTime(slot.end_time)}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {isLoading && (\n        <Alert data-testid=\"calendar-loading\">\n          <AlertDescription>Loading calendar data...</AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n}\n","size_bytes":15702},"client/src/components/job/job-card.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  MapPin, \n  Clock, \n  Briefcase, \n  Star, \n  Building2,\n  Calendar,\n  DollarSign,\n  Users\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport type { Job } from \"@shared/schema\";\n\ninterface JobCardProps {\n  job: Job & { \n    matchScore?: number;\n    applicantCount?: number;\n  };\n  onApply?: (jobId: string) => void;\n  onViewDetails?: (jobId: string) => void;\n  onEdit?: (jobId: string) => void;\n  onViewApplicants?: (jobId: string) => void;\n  showMatchScore?: boolean;\n  showApplicantCount?: boolean;\n  userRole?: 'seeker' | 'recruiter';\n  applied?: boolean;\n  className?: string;\n}\n\nexport default function JobCard({\n  job,\n  onApply,\n  onViewDetails,\n  onEdit,\n  onViewApplicants,\n  showMatchScore = false,\n  showApplicantCount = false,\n  userRole = 'seeker',\n  applied = false,\n  className\n}: JobCardProps) {\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - date.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return 'Yesterday';\n    if (diffDays < 7) return `${diffDays} days ago`;\n    if (diffDays < 30) return `${Math.ceil(diffDays / 7)} weeks ago`;\n    return date.toLocaleDateString();\n  };\n\n  const getMatchScoreColor = (score?: number) => {\n    if (!score) return '';\n    if (score >= 90) return 'text-green-600 bg-green-100';\n    if (score >= 75) return 'text-blue-600 bg-blue-100';\n    if (score >= 60) return 'text-yellow-600 bg-yellow-100';\n    return 'text-gray-600 bg-gray-100';\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'open':\n        return 'bg-green-100 text-green-800';\n      case 'closed':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <Card className={cn(\"hover:shadow-md transition-shadow duration-200\", className)} data-testid={`job-card-${job.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1 min-w-0\">\n            <CardTitle className=\"text-lg line-clamp-1\" data-testid=\"job-title\">\n              {job.title}\n            </CardTitle>\n            <CardDescription className=\"flex items-center mt-1\">\n              <Building2 className=\"h-4 w-4 mr-1\" />\n              <span data-testid=\"job-company\">{job.company}</span>\n            </CardDescription>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 ml-4\">\n            {showMatchScore && job.matchScore && (\n              <Badge \n                className={cn(\"font-semibold\", getMatchScoreColor(job.matchScore))}\n                data-testid=\"match-score\"\n              >\n                <Star className=\"h-3 w-3 mr-1\" />\n                {Math.round(job.matchScore)}%\n              </Badge>\n            )}\n            \n            <Badge \n              className={getStatusColor(job.status)}\n              data-testid=\"job-status\"\n            >\n              {job.status}\n            </Badge>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Job Details */}\n        <div className=\"flex flex-wrap items-center gap-4 text-sm text-gray-600\">\n          {job.location && (\n            <div className=\"flex items-center\">\n              <MapPin className=\"h-4 w-4 mr-1\" />\n              <span data-testid=\"job-location\">{job.location}</span>\n            </div>\n          )}\n          \n          {job.employment_type && (\n            <div className=\"flex items-center\">\n              <Briefcase className=\"h-4 w-4 mr-1\" />\n              <span data-testid=\"job-employment-type\" className=\"capitalize\">\n                {job.employment_type.replace('-', ' ')}\n              </span>\n            </div>\n          )}\n          \n          {job.min_exp && (\n            <div className=\"flex items-center\">\n              <Clock className=\"h-4 w-4 mr-1\" />\n              <span data-testid=\"job-min-experience\">\n                {job.min_exp}+ years\n              </span>\n            </div>\n          )}\n          \n          <div className=\"flex items-center\">\n            <Calendar className=\"h-4 w-4 mr-1\" />\n            <span data-testid=\"job-posted-date\">\n              Posted {formatDate(job.created_at)}\n            </span>\n          </div>\n\n          {showApplicantCount && job.applicantCount !== undefined && (\n            <div className=\"flex items-center\">\n              <Users className=\"h-4 w-4 mr-1\" />\n              <span data-testid=\"applicant-count\">\n                {job.applicantCount} applicant{job.applicantCount !== 1 ? 's' : ''}\n              </span>\n            </div>\n          )}\n        </div>\n\n        {/* Job Description */}\n        <p className=\"text-sm text-gray-700 line-clamp-3\" data-testid=\"job-description\">\n          {job.description}\n        </p>\n\n        {/* Skills */}\n        {job.skills_required && job.skills_required.length > 0 && (\n          <div className=\"space-y-2\">\n            <div className=\"text-sm font-medium text-gray-900\">Required Skills:</div>\n            <div className=\"flex flex-wrap gap-1\">\n              {job.skills_required.slice(0, 6).map((skill, index) => (\n                <Badge \n                  key={index} \n                  variant=\"outline\" \n                  className=\"text-xs\"\n                  data-testid={`job-skill-${index}`}\n                >\n                  {skill}\n                </Badge>\n              ))}\n              {job.skills_required.length > 6 && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  +{job.skills_required.length - 6} more\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"flex items-center justify-between pt-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => onViewDetails?.(job.id)}\n            data-testid=\"view-details-button\"\n          >\n            View Details\n          </Button>\n          \n          <div className=\"flex space-x-2\">\n            {userRole === 'seeker' && (\n              <Button\n                size=\"sm\"\n                onClick={() => onApply?.(job.id)}\n                disabled={applied || job.status !== 'open'}\n                data-testid=\"apply-button\"\n              >\n                {applied ? 'Applied' : 'Apply Now'}\n              </Button>\n            )}\n            \n            {userRole === 'recruiter' && (\n              <>\n                {showApplicantCount && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => onViewApplicants?.(job.id)}\n                    data-testid=\"view-applicants-button\"\n                  >\n                    View Applicants\n                  </Button>\n                )}\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onEdit?.(job.id)}\n                  data-testid=\"edit-job-button\"\n                >\n                  Edit\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7506},"client/src/components/layout/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuSeparator, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Menu, \n  X, \n  User, \n  Settings, \n  LogOut, \n  Search, \n  Briefcase, \n  MessageSquare, \n  Calendar,\n  Bell,\n  ChevronDown\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface NavbarProps {\n  className?: string;\n}\n\nexport default function Navbar({ className = \"\" }: NavbarProps) {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const isJobSeeker = user?.role === \"seeker\";\n  const isRecruiter = user?.role === \"recruiter\";\n\n  const jobSeekerNavItems = [\n    { label: \"Dashboard\", href: \"/dashboard/job-seeker\", icon: User, testId: \"nav-dashboard\" },\n    { label: \"Job Search\", href: \"/dashboard/job-seeker?tab=search\", icon: Search, testId: \"nav-job-search\" },\n    { label: \"Applications\", href: \"/dashboard/job-seeker?tab=applications\", icon: Briefcase, testId: \"nav-applications\" },\n    { label: \"Interviews\", href: \"/dashboard/job-seeker?tab=interviews\", icon: Calendar, testId: \"nav-interviews\" },\n  ];\n\n  const recruiterNavItems = [\n    { label: \"Dashboard\", href: \"/dashboard/recruiter\", icon: User, testId: \"nav-dashboard\" },\n    { label: \"Jobs\", href: \"/dashboard/recruiter?tab=jobs\", icon: Briefcase, testId: \"nav-jobs\" },\n    { label: \"Candidates\", href: \"/dashboard/recruiter?tab=candidates\", icon: Search, testId: \"nav-candidates\" },\n    { label: \"Applications\", href: \"/dashboard/recruiter?tab=applications\", icon: MessageSquare, testId: \"nav-applications\" },\n    { label: \"Interviews\", href: \"/dashboard/recruiter?tab=interviews\", icon: Calendar, testId: \"nav-interviews\" },\n  ];\n\n  const getNavItems = () => {\n    if (isJobSeeker) return jobSeekerNavItems;\n    if (isRecruiter) return recruiterNavItems;\n    return [];\n  };\n\n  const getUserInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(part => part[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const handleLogout = () => {\n    logout();\n    setMobileMenuOpen(false);\n  };\n\n  if (!user) {\n    // Public navbar for unauthenticated users\n    return (\n      <nav className={`bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50 ${className}`}>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <Link href=\"/\">\n              <div className=\"flex items-center cursor-pointer\" data-testid=\"logo\">\n                <h1 className=\"text-2xl font-bold text-primary\">AI Talent Match</h1>\n              </div>\n            </Link>\n            \n            <div className=\"hidden md:flex items-center space-x-4\">\n              <Link href=\"/login\">\n                <Button variant=\"ghost\" data-testid=\"nav-sign-in\">Sign In</Button>\n              </Link>\n              <Link href=\"/register\">\n                <Button data-testid=\"nav-get-started\">Get Started</Button>\n              </Link>\n            </div>\n\n            <div className=\"md:hidden\">\n              <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"mobile-menu-trigger\">\n                    <Menu className=\"h-5 w-5\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" className=\"w-[300px]\">\n                  <div className=\"flex flex-col space-y-4 mt-6\">\n                    <Link href=\"/login\">\n                      <Button variant=\"ghost\" className=\"w-full justify-start\" onClick={() => setMobileMenuOpen(false)}>\n                        Sign In\n                      </Button>\n                    </Link>\n                    <Link href=\"/register\">\n                      <Button className=\"w-full justify-start\" onClick={() => setMobileMenuOpen(false)}>\n                        Get Started\n                      </Button>\n                    </Link>\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </div>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n\n  // Authenticated navbar\n  return (\n    <nav className={`bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50 ${className}`}>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link href={isJobSeeker ? \"/dashboard/job-seeker\" : \"/dashboard/recruiter\"}>\n            <div className=\"flex items-center cursor-pointer\" data-testid=\"logo\">\n              <h1 className=\"text-2xl font-bold text-primary\">AI Talent Match</h1>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-1\">\n            {getNavItems().map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href || \n                (item.href.includes(\"?tab=\") && location.includes(item.href.split(\"?\")[0]));\n              \n              return (\n                <Link key={item.href} href={item.href}>\n                  <Button\n                    variant={isActive ? \"default\" : \"ghost\"}\n                    className=\"flex items-center space-x-2\"\n                    data-testid={item.testId}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    <span>{item.label}</span>\n                  </Button>\n                </Link>\n              );\n            })}\n          </div>\n\n          {/* Right side - User menu */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Notifications */}\n            <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"notifications-button\">\n              <Bell className=\"h-5 w-5\" />\n              <Badge \n                variant=\"destructive\" \n                className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center text-xs p-0\"\n              >\n                3\n              </Badge>\n            </Button>\n\n            {/* User menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"user-menu-trigger\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarFallback className=\"bg-primary text-white text-sm\">\n                      {getUserInitials(user.full_name)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"hidden lg:flex flex-col items-start\">\n                    <span className=\"text-sm font-medium\" data-testid=\"user-name\">\n                      {user.full_name}\n                    </span>\n                    <span className=\"text-xs text-gray-500 capitalize\">\n                      {user.role}\n                    </span>\n                  </div>\n                  <ChevronDown className=\"h-4 w-4 text-gray-500\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-56\">\n                <div className=\"px-2 py-1.5\">\n                  <p className=\"text-sm font-medium\" data-testid=\"dropdown-user-name\">{user.full_name}</p>\n                  <p className=\"text-xs text-gray-500\" data-testid=\"dropdown-user-email\">{user.email}</p>\n                </div>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem data-testid=\"dropdown-profile\">\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Profile\n                </DropdownMenuItem>\n                <DropdownMenuItem data-testid=\"dropdown-settings\">\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                  Settings\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={handleLogout} data-testid=\"dropdown-logout\">\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Sign Out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* Mobile menu */}\n            <div className=\"md:hidden\">\n              <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"mobile-menu-trigger\">\n                    <Menu className=\"h-5 w-5\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" className=\"w-[300px]\">\n                  <div className=\"flex flex-col space-y-4 mt-6\">\n                    {/* User info */}\n                    <div className=\"flex items-center space-x-3 pb-4 border-b\">\n                      <Avatar className=\"h-10 w-10\">\n                        <AvatarFallback className=\"bg-primary text-white\">\n                          {getUserInitials(user.full_name)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"font-medium\" data-testid=\"mobile-user-name\">{user.full_name}</p>\n                        <p className=\"text-sm text-gray-500 capitalize\">{user.role}</p>\n                      </div>\n                    </div>\n\n                    {/* Navigation items */}\n                    {getNavItems().map((item) => {\n                      const Icon = item.icon;\n                      return (\n                        <Link key={item.href} href={item.href}>\n                          <Button\n                            variant=\"ghost\"\n                            className=\"w-full justify-start\"\n                            onClick={() => setMobileMenuOpen(false)}\n                            data-testid={`mobile-${item.testId}`}\n                          >\n                            <Icon className=\"mr-2 h-4 w-4\" />\n                            {item.label}\n                          </Button>\n                        </Link>\n                      );\n                    })}\n\n                    <div className=\"pt-4 border-t\">\n                      <Button\n                        variant=\"ghost\"\n                        className=\"w-full justify-start text-red-600\"\n                        onClick={handleLogout}\n                        data-testid=\"mobile-logout\"\n                      >\n                        <LogOut className=\"mr-2 h-4 w-4\" />\n                        Sign Out\n                      </Button>\n                    </div>\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":11100},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/file-upload.tsx":{"content":"import { useState, useRef, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Upload, FileText, X, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface FileUploadProps {\n  onFileSelect: (file: File) => void;\n  onFileRemove?: () => void;\n  onUploadProgress?: (progress: number) => void;\n  onUploadComplete?: (filePath: string) => void;\n  onUploadError?: (error: string) => void;\n  acceptedFileTypes?: string[];\n  maxFileSize?: number;\n  uploadUrl?: string;\n  currentFile?: File | null;\n  uploadProgress?: number;\n  uploadStatus?: 'idle' | 'uploading' | 'success' | 'error';\n  error?: string;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport default function FileUpload({\n  onFileSelect,\n  onFileRemove,\n  onUploadProgress,\n  onUploadComplete,\n  onUploadError,\n  acceptedFileTypes = ['.pdf', '.docx'],\n  maxFileSize = 5 * 1024 * 1024, // 5MB\n  currentFile,\n  uploadProgress = 0,\n  uploadStatus = 'idle',\n  error,\n  className,\n  disabled = false,\n}: FileUploadProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const validateFile = (file: File): string | null => {\n    // Check file size\n    if (file.size > maxFileSize) {\n      return `File size must be less than ${Math.round(maxFileSize / (1024 * 1024))}MB`;\n    }\n\n    // Check file type\n    const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\n    if (!acceptedFileTypes.includes(fileExtension)) {\n      return `File type must be one of: ${acceptedFileTypes.join(', ')}`;\n    }\n\n    return null;\n  };\n\n  const handleFileSelect = useCallback((file: File) => {\n    const validationError = validateFile(file);\n    if (validationError) {\n      onUploadError?.(validationError);\n      return;\n    }\n\n    onFileSelect(file);\n  }, [onFileSelect, onUploadError, maxFileSize, acceptedFileTypes]);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    if (!disabled) {\n      setIsDragOver(true);\n    }\n  }, [disabled]);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  }, []);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n\n    if (disabled) return;\n\n    const files = Array.from(e.dataTransfer.files);\n    if (files.length > 0) {\n      handleFileSelect(files[0]);\n    }\n  }, [disabled, handleFileSelect]);\n\n  const handleFileInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      handleFileSelect(files[0]);\n    }\n    // Clear the input value so the same file can be selected again\n    e.target.value = '';\n  }, [handleFileSelect]);\n\n  const handleBrowseClick = () => {\n    if (!disabled) {\n      fileInputRef.current?.click();\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getStatusIcon = () => {\n    switch (uploadStatus) {\n      case 'uploading':\n        return <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-primary\" />;\n      case 'success':\n        return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\n      case 'error':\n        return <AlertCircle className=\"h-5 w-5 text-red-600\" />;\n      default:\n        return <FileText className=\"h-5 w-5 text-gray-400\" />;\n    }\n  };\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      {!currentFile && (\n        <div\n          className={cn(\n            \"file-upload-area rounded-lg p-6 text-center cursor-pointer transition-all duration-200\",\n            {\n              \"drag-over\": isDragOver,\n              \"opacity-50 cursor-not-allowed\": disabled,\n            }\n          )}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onDrop={handleDrop}\n          onClick={handleBrowseClick}\n          data-testid=\"file-upload-area\"\n        >\n          <Upload className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n          <div className=\"text-lg font-medium text-gray-900 mb-2\">\n            {isDragOver ? \"Drop your file here\" : \"Upload your resume\"}\n          </div>\n          <div className=\"text-sm text-gray-500 mb-4\">\n            Drag and drop your file here, or click to browse\n          </div>\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            disabled={disabled}\n            data-testid=\"browse-files-button\"\n          >\n            Browse Files\n          </Button>\n          <div className=\"text-xs text-gray-400 mt-2\">\n            Supported formats: {acceptedFileTypes.join(', ')} • Max size: {Math.round(maxFileSize / (1024 * 1024))}MB\n          </div>\n        </div>\n      )}\n\n      {currentFile && (\n        <div className=\"border rounded-lg p-4 bg-gray-50\" data-testid=\"file-preview\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center space-x-3\">\n              {getStatusIcon()}\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-gray-900 truncate\" data-testid=\"file-name\">\n                  {currentFile.name}\n                </p>\n                <p className=\"text-xs text-gray-500\" data-testid=\"file-size\">\n                  {formatFileSize(currentFile.size)}\n                </p>\n              </div>\n            </div>\n            \n            {uploadStatus !== 'uploading' && onFileRemove && (\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onFileRemove}\n                disabled={disabled}\n                data-testid=\"remove-file-button\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n\n          {uploadStatus === 'uploading' && (\n            <div className=\"space-y-2\">\n              <Progress value={uploadProgress} className=\"h-2\" data-testid=\"upload-progress\" />\n              <p className=\"text-xs text-gray-500 text-center\">\n                Uploading... {Math.round(uploadProgress)}%\n              </p>\n            </div>\n          )}\n\n          {uploadStatus === 'success' && (\n            <Alert className=\"border-green-200 bg-green-50\" data-testid=\"upload-success\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <AlertDescription className=\"text-green-800\">\n                File uploaded successfully\n              </AlertDescription>\n            </Alert>\n          )}\n        </div>\n      )}\n\n      {error && (\n        <Alert variant=\"destructive\" data-testid=\"upload-error\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        className=\"hidden\"\n        accept={acceptedFileTypes.join(',')}\n        onChange={handleFileInputChange}\n        disabled={disabled}\n        data-testid=\"file-input\"\n      />\n    </div>\n  );\n}\n","size_bytes":7427},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/theme-provider.tsx":{"content":"import * as React from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = React.createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = React.useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  React.useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = React.useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1589},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/auth/login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Eye, EyeOff, ArrowLeft } from \"lucide-react\";\nimport { loginSchema, type LoginRequest } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm<LoginRequest>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginRequest) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      login(data.user, data.token);\n      const role = data.user.role;\n      setLocation(role === \"seeker\" ? \"/dashboard/job-seeker\" : \"/dashboard/recruiter\");\n    },\n    onError: (error: Error) => {\n      form.setError(\"root\", { message: error.message });\n    },\n  });\n\n  const onSubmit = (data: LoginRequest) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"mb-8\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\" data-testid=\"button-back-home\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Home\n            </Button>\n          </Link>\n          <div className=\"text-center\">\n            <h1 className=\"text-3xl font-bold text-primary mb-2\">AI Talent Match</h1>\n            <p className=\"text-gray-600\">Sign in to your account</p>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Welcome Back</CardTitle>\n            <CardDescription>\n              Enter your credentials to access your account\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              {form.formState.errors.root && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{form.formState.errors.root.message}</AlertDescription>\n                </Alert>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  {...form.register(\"email\")}\n                  data-testid=\"input-email\"\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.email.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Enter your password\"\n                    {...form.register(\"password\")}\n                    data-testid=\"input-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n                {form.formState.errors.password && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.password.message}</p>\n                )}\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-sign-in\"\n              >\n                {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n              </Button>\n            </form>\n\n            <Separator className=\"my-6\" />\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-600\">\n                Don't have an account?{\" \"}\n                <Link href=\"/register\">\n                  <Button variant=\"link\" className=\"p-0\" data-testid=\"link-register\">\n                    Sign up here\n                  </Button>\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5514},"client/src/pages/auth/register.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation, useSearch } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Eye, EyeOff, ArrowLeft, Users, Search } from \"lucide-react\";\nimport { registerSchema, type RegisterRequest } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const search = useSearch();\n  const { login } = useAuth();\n  const [showPassword, setShowPassword] = useState(false);\n  \n  const urlParams = new URLSearchParams(search);\n  const roleFromUrl = urlParams.get(\"role\") as \"seeker\" | \"recruiter\" | null;\n\n  const form = useForm<RegisterRequest>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      full_name: \"\",\n      email: \"\",\n      password: \"\",\n      role: roleFromUrl || \"seeker\",\n      headline: \"\",\n      skills: [],\n      location: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterRequest) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      login(data.user, data.token);\n      const role = data.user.role;\n      setLocation(role === \"seeker\" ? \"/dashboard/job-seeker\" : \"/dashboard/recruiter\");\n    },\n    onError: (error: Error) => {\n      form.setError(\"root\", { message: error.message });\n    },\n  });\n\n  const onSubmit = (data: RegisterRequest) => {\n    registerMutation.mutate(data);\n  };\n\n  const selectedRole = form.watch(\"role\");\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"mb-8\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\" data-testid=\"button-back-home\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Home\n            </Button>\n          </Link>\n          <div className=\"text-center\">\n            <h1 className=\"text-3xl font-bold text-primary mb-2\">AI Talent Match</h1>\n            <p className=\"text-gray-600\">Create your account</p>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Get Started</CardTitle>\n            <CardDescription>\n              Join thousands of users finding the perfect match\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              {form.formState.errors.root && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{form.formState.errors.root.message}</AlertDescription>\n                </Alert>\n              )}\n\n              <div className=\"space-y-3\">\n                <Label>I am a:</Label>\n                <RadioGroup\n                  value={selectedRole}\n                  onValueChange={(value) => form.setValue(\"role\", value as \"seeker\" | \"recruiter\")}\n                  className=\"grid grid-cols-2 gap-4\"\n                >\n                  <div>\n                    <RadioGroupItem value=\"seeker\" id=\"seeker\" className=\"peer sr-only\" />\n                    <Label\n                      htmlFor=\"seeker\"\n                      className=\"flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary cursor-pointer\"\n                      data-testid=\"radio-job-seeker\"\n                    >\n                      <Users className=\"mb-3 h-6 w-6\" />\n                      Job Seeker\n                    </Label>\n                  </div>\n                  <div>\n                    <RadioGroupItem value=\"recruiter\" id=\"recruiter\" className=\"peer sr-only\" />\n                    <Label\n                      htmlFor=\"recruiter\"\n                      className=\"flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary cursor-pointer\"\n                      data-testid=\"radio-recruiter\"\n                    >\n                      <Search className=\"mb-3 h-6 w-6\" />\n                      Recruiter\n                    </Label>\n                  </div>\n                </RadioGroup>\n                {form.formState.errors.role && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.role.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"full_name\">Full Name</Label>\n                <Input\n                  id=\"full_name\"\n                  placeholder=\"Enter your full name\"\n                  {...form.register(\"full_name\")}\n                  data-testid=\"input-full-name\"\n                />\n                {form.formState.errors.full_name && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.full_name.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  {...form.register(\"email\")}\n                  data-testid=\"input-email\"\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.email.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Create a secure password\"\n                    {...form.register(\"password\")}\n                    data-testid=\"input-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n                {form.formState.errors.password && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.password.message}</p>\n                )}\n              </div>\n\n              {selectedRole === \"seeker\" && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"headline\">Professional Headline (Optional)</Label>\n                  <Input\n                    id=\"headline\"\n                    placeholder=\"e.g., Senior Frontend Developer\"\n                    {...form.register(\"headline\")}\n                    data-testid=\"input-headline\"\n                  />\n                </div>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Location (Optional)</Label>\n                <Input\n                  id=\"location\"\n                  placeholder=\"e.g., San Francisco, CA\"\n                  {...form.register(\"location\")}\n                  data-testid=\"input-location\"\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={registerMutation.isPending}\n                data-testid=\"button-create-account\"\n              >\n                {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n            </form>\n\n            <Separator className=\"my-6\" />\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-600\">\n                Already have an account?{\" \"}\n                <Link href=\"/login\">\n                  <Button variant=\"link\" className=\"p-0\" data-testid=\"link-sign-in\">\n                    Sign in here\n                  </Button>\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9230},"client/src/pages/dashboard/job-seeker.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Upload, \n  Search, \n  FileText, \n  Calendar, \n  MessageSquare, \n  Star,\n  MapPin,\n  Briefcase,\n  Clock,\n  TrendingUp,\n  User,\n  Settings,\n  Bell\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Navbar from \"@/components/layout/navbar\";\nimport JobCard from \"@/components/job/job-card\";\nimport FileUpload from \"@/components/ui/file-upload\";\nimport { useFileUpload } from \"@/hooks/use-file-upload\";\nimport { Link } from \"wouter\";\nimport type { Job, Application } from \"@shared/schema\";\n\nexport default function JobSeekerDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch user profile\n  const { data: profile, isLoading: profileLoading } = useQuery({\n    queryKey: [\"/api/me\"],\n    queryFn: () => api.get(\"/api/me\"),\n    enabled: !!user,\n  });\n\n  // Fetch job recommendations\n  const { data: recommendations, isLoading: loadingRecommendations } = useQuery({\n    queryKey: [\"/api/jobs/recommendations\"],\n    queryFn: () => api.get(\"/api/jobs/recommendations\"),\n    enabled: !!user,\n  });\n\n  // Fetch applications\n  const { data: applications } = useQuery({\n    queryKey: [\"/api/applications/me\"],\n    queryFn: () => api.get(\"/api/applications/me\"),\n    enabled: !!user,\n  });\n\n  // Fetch interviews\n  const { data: interviews } = useQuery({\n    queryKey: [\"/api/interviews/me\"],\n    queryFn: () => api.get(\"/api/interviews/me\"),\n    enabled: !!user,\n  });\n\n  // File upload hook for resume\n  const {\n    file: resumeFile,\n    uploadProgress,\n    uploadStatus,\n    error: uploadError,\n    selectFile,\n    removeFile,\n    uploadFile,\n  } = useFileUpload({\n    uploadUrl: \"/api/me/resume\",\n    acceptedFileTypes: ['.pdf', '.docx'],\n    maxFileSize: 5 * 1024 * 1024,\n    onUploadComplete: () => {\n      toast({\n        title: \"Resume uploaded successfully\",\n        description: \"Your resume has been processed and skills extracted.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n    },\n    onUploadError: (error) => {\n      toast({\n        title: \"Upload failed\",\n        description: error,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Job search mutation\n  const searchJobsMutation = useMutation({\n    mutationFn: (query: string) => api.get(`/api/jobs/search?q=${encodeURIComponent(query)}`),\n  });\n\n  // Apply to job mutation\n  const applyMutation = useMutation({\n    mutationFn: (jobId: string) => api.post(`/api/jobs/${jobId}/apply`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/applications/me\"] });\n      toast({\n        title: \"Application submitted\",\n        description: \"Your application has been sent successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Application failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleResumeSelect = (file: File) => {\n    selectFile(file);\n  };\n\n  const handleResumeUpload = () => {\n    uploadFile();\n  };\n\n  const handleJobSearch = () => {\n    if (searchQuery.trim()) {\n      searchJobsMutation.mutate(searchQuery);\n    }\n  };\n\n  const handleApply = (jobId: string) => {\n    applyMutation.mutate(jobId);\n  };\n\n  if (!user) return null;\n\n  const profileCompleteness = profile?.resume_file_path ? 95 : 65;\n  const appliedJobIds = new Set(applications?.map((app: Application) => app.job_id) || []);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid lg:grid-cols-4 gap-8\">\n          {/* Profile Sidebar */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <User className=\"mr-2 h-5 w-5\" />\n                  Profile\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <div className=\"font-medium\" data-testid=\"text-profile-name\">\n                    {profile?.full_name || user.full_name}\n                  </div>\n                  <div className=\"text-sm text-gray-500\" data-testid=\"text-profile-headline\">\n                    {profile?.headline || \"Add a professional headline\"}\n                  </div>\n                </div>\n\n                {profile?.location && (\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <MapPin className=\"mr-1 h-4 w-4\" />\n                    <span data-testid=\"text-profile-location\">{profile.location}</span>\n                  </div>\n                )}\n\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Profile Completion</span>\n                    <Badge variant=\"secondary\" data-testid=\"badge-profile-completion\">\n                      {profileCompleteness}%\n                    </Badge>\n                  </div>\n                  <Progress value={profileCompleteness} className=\"h-2\" />\n                </div>\n\n                <Separator />\n\n                <div>\n                  <h4 className=\"font-medium mb-2\">Resume</h4>\n                  {profile?.resume_file_path ? (\n                    <div className=\"text-sm text-green-600 flex items-center\">\n                      <FileText className=\"mr-1 h-4 w-4\" />\n                      <span data-testid=\"text-resume-status\">Resume uploaded</span>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      <FileUpload\n                        onFileSelect={handleResumeSelect}\n                        onFileRemove={removeFile}\n                        currentFile={resumeFile}\n                        uploadProgress={uploadProgress}\n                        uploadStatus={uploadStatus}\n                        error={uploadError}\n                      />\n                      {resumeFile && uploadStatus === 'idle' && (\n                        <Button\n                          onClick={handleResumeUpload}\n                          className=\"w-full\"\n                          data-testid=\"button-upload-resume\"\n                        >\n                          Upload Resume\n                        </Button>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {profile?.skills && profile.skills.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Skills</h4>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {profile.skills.slice(0, 6).map((skill: string, index: number) => (\n                        <Badge key={index} variant=\"secondary\" className=\"text-xs\" data-testid={`badge-skill-${index}`}>\n                          {skill}\n                        </Badge>\n                      ))}\n                      {profile.skills.length > 6 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{profile.skills.length - 6} more\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"pt-4 border-t\">\n                  <Link href=\"/profile/edit\">\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-edit-profile\">\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      Edit Profile\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Quick Stats</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Applications</span>\n                  <Badge variant=\"secondary\" data-testid=\"stat-applications\">\n                    {applications?.length || 0}\n                  </Badge>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Interviews</span>\n                  <Badge variant=\"secondary\" data-testid=\"stat-interviews\">\n                    {interviews?.length || 0}\n                  </Badge>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Profile Views</span>\n                  <Badge variant=\"secondary\">12</Badge>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-3\">\n            <Tabs defaultValue=\"dashboard\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"dashboard\" data-testid=\"tab-dashboard\">Dashboard</TabsTrigger>\n                <TabsTrigger value=\"search\" data-testid=\"tab-search\">Job Search</TabsTrigger>\n                <TabsTrigger value=\"applications\" data-testid=\"tab-applications\">Applications</TabsTrigger>\n                <TabsTrigger value=\"interviews\" data-testid=\"tab-interviews\">Interviews</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"dashboard\" className=\"space-y-6\">\n                {/* Welcome Message */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Welcome back, {profile?.full_name?.split(' ')[0] || user.full_name.split(' ')[0]}!</CardTitle>\n                    <CardDescription>\n                      Here's what's happening with your job search\n                    </CardDescription>\n                  </CardHeader>\n                </Card>\n\n                {/* Job Recommendations */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <TrendingUp className=\"mr-2 h-5 w-5\" />\n                      AI Job Recommendations\n                    </CardTitle>\n                    <CardDescription>\n                      Personalized job matches based on your profile and preferences\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {loadingRecommendations ? (\n                      <div className=\"text-center py-8\">\n                        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                        <p className=\"mt-2 text-sm text-gray-600\">Loading recommendations...</p>\n                      </div>\n                    ) : recommendations?.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {recommendations.slice(0, 3).map((job: Job & { matchScore?: number }) => (\n                          <JobCard\n                            key={job.id}\n                            job={job}\n                            onApply={handleApply}\n                            showMatchScore={true}\n                            applied={appliedJobIds.has(job.id)}\n                            userRole=\"seeker\"\n                          />\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8 text-gray-500\">\n                        <TrendingUp className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                        <p>Complete your profile to get personalized job recommendations</p>\n                        {!profile?.resume_file_path && (\n                          <p className=\"text-sm mt-2\">Upload your resume to get started</p>\n                        )}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Recent Activity */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Recent Activity</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {applications?.slice(0, 3).map((application: Application & { job?: Job }) => (\n                        <div key={application.id} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                          <div className=\"flex-shrink-0\">\n                            <Badge\n                              variant={application.status === 'applied' ? 'secondary' : 'default'}\n                              className=\"text-xs\"\n                            >\n                              {application.status}\n                            </Badge>\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"text-sm font-medium text-gray-900 truncate\">\n                              Applied to {application.job?.title || 'Job'}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              {new Date(application.created_at).toLocaleDateString()}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {(!applications || applications.length === 0) && (\n                        <div className=\"text-center py-6 text-gray-500\">\n                          <p>No recent activity</p>\n                          <p className=\"text-sm mt-1\">Start applying to jobs to see your activity here</p>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"search\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Search className=\"mr-2 h-5 w-5\" />\n                      Search Jobs\n                    </CardTitle>\n                    <CardDescription>\n                      Find opportunities using our AI-powered semantic search\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex gap-2 mb-6\">\n                      <Input\n                        placeholder=\"Search for jobs, skills, or companies...\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        onKeyPress={(e) => e.key === \"Enter\" && handleJobSearch()}\n                        data-testid=\"input-job-search\"\n                      />\n                      <Button\n                        onClick={handleJobSearch}\n                        disabled={searchJobsMutation.isPending}\n                        data-testid=\"button-search-jobs\"\n                      >\n                        <Search className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n\n                    {searchJobsMutation.data && (\n                      <div className=\"space-y-4\">\n                        {searchJobsMutation.data.map((job: Job & { matchScore?: number }) => (\n                          <JobCard\n                            key={job.id}\n                            job={job}\n                            onApply={handleApply}\n                            showMatchScore={true}\n                            applied={appliedJobIds.has(job.id)}\n                            userRole=\"seeker\"\n                          />\n                        ))}\n                      </div>\n                    )}\n\n                    {searchJobsMutation.isPending && (\n                      <div className=\"text-center py-8\">\n                        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                        <p className=\"mt-2 text-sm text-gray-600\">Searching for jobs...</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"applications\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <FileText className=\"mr-2 h-5 w-5\" />\n                      My Applications\n                    </CardTitle>\n                    <CardDescription>\n                      Track the status of your job applications\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {applications?.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {applications.map((application: Application & { job?: Job }) => (\n                          <div key={application.id} className=\"border rounded-lg p-4\">\n                            <div className=\"flex justify-between items-start mb-2\">\n                              <div>\n                                <h4 className=\"font-semibold\">\n                                  {application.job?.title || \"Job Title\"}\n                                </h4>\n                                <p className=\"text-sm text-gray-600\">\n                                  {application.job?.company || \"Company\"}\n                                </p>\n                              </div>\n                              <Badge\n                                variant={\n                                  application.status === \"offered\"\n                                    ? \"default\"\n                                    : application.status === \"rejected\"\n                                    ? \"destructive\"\n                                    : \"secondary\"\n                                }\n                                data-testid={`badge-status-${application.id}`}\n                              >\n                                {application.status}\n                              </Badge>\n                            </div>\n                            <div className=\"flex items-center gap-4 text-sm text-gray-500 mb-3\">\n                              <span className=\"flex items-center\">\n                                <Clock className=\"mr-1 h-3 w-3\" />\n                                Applied {new Date(application.created_at).toLocaleDateString()}\n                              </span>\n                              {application.scores && (\n                                <span className=\"flex items-center\">\n                                  <Star className=\"mr-1 h-3 w-3\" />\n                                  Match: {Math.round(application.scores.final * 100)}%\n                                </span>\n                              )}\n                            </div>\n                            <div className=\"flex justify-end\">\n                              <Button variant=\"outline\" size=\"sm\">\n                                <MessageSquare className=\"mr-2 h-4 w-4\" />\n                                Message\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8 text-gray-500\">\n                        <FileText className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                        <p>No applications yet</p>\n                        <p className=\"text-sm mt-1\">Start applying to jobs to track them here</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"interviews\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Calendar className=\"mr-2 h-5 w-5\" />\n                      Interview Schedule\n                    </CardTitle>\n                    <CardDescription>\n                      Manage your upcoming interviews\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {interviews?.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {interviews.map((interview: any) => (\n                          <div key={interview.id} className=\"border rounded-lg p-4\">\n                            <div className=\"flex justify-between items-start mb-2\">\n                              <div>\n                                <h4 className=\"font-semibold\">\n                                  {interview.job?.title || \"Interview\"}\n                                </h4>\n                                <p className=\"text-sm text-gray-600\">\n                                  with {interview.recruiter?.full_name}\n                                </p>\n                              </div>\n                              <Badge className=\"interview-scheduled\">\n                                {interview.status}\n                              </Badge>\n                            </div>\n                            <div className=\"flex items-center gap-4 text-sm text-gray-500 mb-3\">\n                              <span className=\"flex items-center\">\n                                <Calendar className=\"mr-1 h-3 w-3\" />\n                                {new Date(interview.start_time).toLocaleDateString()}\n                              </span>\n                              <span className=\"flex items-center\">\n                                <Clock className=\"mr-1 h-3 w-3\" />\n                                {new Date(interview.start_time).toLocaleTimeString([], { \n                                  hour: '2-digit', \n                                  minute: '2-digit' \n                                })}\n                              </span>\n                            </div>\n                            {interview.meeting_link && (\n                              <div className=\"flex justify-end\">\n                                <Button size=\"sm\" asChild>\n                                  <a href={interview.meeting_link} target=\"_blank\" rel=\"noopener noreferrer\">\n                                    Join Meeting\n                                  </a>\n                                </Button>\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8 text-gray-500\">\n                        <Calendar className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                        <p>No interviews scheduled</p>\n                        <p className=\"text-sm mt-1\">Interview invitations will appear here</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":24087},"client/src/pages/dashboard/recruiter.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Plus, \n  Search, \n  Users, \n  Calendar, \n  MessageSquare, \n  Star,\n  MapPin,\n  Briefcase,\n  Clock,\n  TrendingUp,\n  BarChart3,\n  User\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Job, Application, User as UserType } from \"@shared/schema\";\n\nexport default function RecruiterDashboard() {\n  const { user, logout } = useAuth();\n  const queryClient = useQueryClient();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCreateJobOpen, setIsCreateJobOpen] = useState(false);\n\n  // Fetch recruiter's jobs\n  const { data: jobs, isLoading: loadingJobs } = useQuery({\n    queryKey: [\"/api/jobs/mine\"],\n    enabled: !!user,\n  });\n\n  // Fetch applications for recruiter's jobs\n  const { data: applications } = useQuery({\n    queryKey: [\"/api/applications/jobs\"],\n    enabled: !!user,\n  });\n\n  // Create job mutation\n  const createJobMutation = useMutation({\n    mutationFn: async (jobData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/jobs\", jobData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs/mine\"] });\n      setIsCreateJobOpen(false);\n    },\n  });\n\n  // Search candidates mutation\n  const searchCandidatesMutation = useMutation({\n    mutationFn: async (query: string) => {\n      const response = await apiRequest(\"GET\", `/api/candidates/search?q=${encodeURIComponent(query)}`);\n      return response.json();\n    },\n  });\n\n  const handleCreateJob = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    const jobData = {\n      title: formData.get(\"title\"),\n      description: formData.get(\"description\"),\n      company: formData.get(\"company\"),\n      location: formData.get(\"location\"),\n      employment_type: formData.get(\"employment_type\"),\n      skills_required: (formData.get(\"skills_required\") as string)\n        .split(\",\")\n        .map(s => s.trim())\n        .filter(Boolean),\n      min_exp: formData.get(\"min_exp\") ? Number(formData.get(\"min_exp\")) : undefined,\n    };\n    createJobMutation.mutate(jobData);\n  };\n\n  const handleCandidateSearch = () => {\n    if (searchQuery.trim()) {\n      searchCandidatesMutation.mutate(searchQuery);\n    }\n  };\n\n  if (!user) return null;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <h1 className=\"text-2xl font-bold text-primary\">AI Talent Match</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center\">\n                <User className=\"h-5 w-5 mr-2\" />\n                <span className=\"font-medium\" data-testid=\"text-user-name\">{user.full_name}</span>\n              </div>\n              <Button variant=\"outline\" onClick={logout} data-testid=\"button-logout\">\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Stats Overview */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Active Jobs</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"stat-active-jobs\">\n                    {jobs?.filter((j: Job) => j.status === \"open\").length || 0}\n                  </p>\n                </div>\n                <Briefcase className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Applications</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"stat-total-applications\">\n                    {applications?.length || 0}\n                  </p>\n                </div>\n                <Users className=\"h-8 w-8 text-accent\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Interviews</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"stat-interviews\">0</p>\n                </div>\n                <Calendar className=\"h-8 w-8 text-purple-600\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Success Rate</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"stat-success-rate\">--</p>\n                </div>\n                <TrendingUp className=\"h-8 w-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"jobs\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <TabsList className=\"grid w-full max-w-md grid-cols-4\">\n              <TabsTrigger value=\"jobs\" data-testid=\"tab-jobs\">Jobs</TabsTrigger>\n              <TabsTrigger value=\"candidates\" data-testid=\"tab-candidates\">Candidates</TabsTrigger>\n              <TabsTrigger value=\"applications\" data-testid=\"tab-applications\">Applications</TabsTrigger>\n              <TabsTrigger value=\"interviews\" data-testid=\"tab-interviews\">Interviews</TabsTrigger>\n            </TabsList>\n            \n            <Dialog open={isCreateJobOpen} onOpenChange={setIsCreateJobOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-create-job\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Create Job\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Create New Job</DialogTitle>\n                  <DialogDescription>\n                    Add a new job posting to find the perfect candidates\n                  </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleCreateJob} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"title\">Job Title</Label>\n                      <Input id=\"title\" name=\"title\" placeholder=\"e.g. Senior Frontend Developer\" required data-testid=\"input-job-title\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"company\">Company</Label>\n                      <Input id=\"company\" name=\"company\" placeholder=\"Company Name\" required data-testid=\"input-company\" />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"description\">Job Description</Label>\n                    <Textarea id=\"description\" name=\"description\" placeholder=\"Describe the role, responsibilities, and requirements...\" required data-testid=\"textarea-description\" />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"location\">Location</Label>\n                      <Input id=\"location\" name=\"location\" placeholder=\"e.g. San Francisco, CA\" data-testid=\"input-location\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"employment_type\">Employment Type</Label>\n                      <Select name=\"employment_type\">\n                        <SelectTrigger data-testid=\"select-employment-type\">\n                          <SelectValue placeholder=\"Select type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"full-time\">Full-time</SelectItem>\n                          <SelectItem value=\"part-time\">Part-time</SelectItem>\n                          <SelectItem value=\"contract\">Contract</SelectItem>\n                          <SelectItem value=\"internship\">Internship</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"skills_required\">Required Skills (comma-separated)</Label>\n                      <Input id=\"skills_required\" name=\"skills_required\" placeholder=\"React, TypeScript, Node.js\" data-testid=\"input-skills\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"min_exp\">Minimum Experience (years)</Label>\n                      <Input id=\"min_exp\" name=\"min_exp\" type=\"number\" placeholder=\"3\" data-testid=\"input-min-experience\" />\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateJobOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createJobMutation.isPending} data-testid=\"button-submit-job\">\n                      {createJobMutation.isPending ? \"Creating...\" : \"Create Job\"}\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <TabsContent value=\"jobs\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>My Job Postings</CardTitle>\n                <CardDescription>\n                  Manage your active and closed job postings\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {loadingJobs ? (\n                  <div className=\"text-center py-8\">Loading jobs...</div>\n                ) : jobs?.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {jobs.map((job: Job & { applicantCount?: number }) => (\n                      <div key={job.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <div>\n                            <h4 className=\"font-semibold\" data-testid={`text-job-title-${job.id}`}>{job.title}</h4>\n                            <p className=\"text-sm text-gray-600\" data-testid={`text-job-company-${job.id}`}>{job.company}</p>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant={job.status === \"open\" ? \"default\" : \"secondary\"} data-testid={`badge-job-status-${job.id}`}>\n                              {job.status}\n                            </Badge>\n                            {job.applicantCount && (\n                              <Badge variant=\"outline\" data-testid={`badge-applicant-count-${job.id}`}>\n                                {job.applicantCount} applicants\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-4 text-sm text-gray-500 mb-3\">\n                          {job.location && (\n                            <span className=\"flex items-center\">\n                              <MapPin className=\"mr-1 h-3 w-3\" />\n                              {job.location}\n                            </span>\n                          )}\n                          <span className=\"flex items-center\">\n                            <Clock className=\"mr-1 h-3 w-3\" />\n                            Posted {new Date(job.created_at).toLocaleDateString()}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-700 mb-3 line-clamp-2\">\n                          {job.description}\n                        </p>\n                        <div className=\"flex justify-between items-center\">\n                          <div className=\"flex flex-wrap gap-1\">\n                            {job.skills_required.slice(0, 4).map((skill, index) => (\n                              <Badge key={index} variant=\"outline\" className=\"text-xs\" data-testid={`badge-skill-${job.id}-${index}`}>\n                                {skill}\n                              </Badge>\n                            ))}\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-applicants-${job.id}`}>\n                              View Applicants\n                            </Button>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-edit-job-${job.id}`}>\n                              Edit\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    No jobs posted yet. Create your first job posting!\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"candidates\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Search className=\"mr-2 h-5 w-5\" />\n                  Candidate Search\n                </CardTitle>\n                <CardDescription>\n                  Find the perfect candidates using AI-powered search\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex gap-2 mb-6\">\n                  <Input\n                    placeholder=\"Search by skills, experience, location...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    onKeyPress={(e) => e.key === \"Enter\" && handleCandidateSearch()}\n                    data-testid=\"input-candidate-search\"\n                  />\n                  <Button\n                    onClick={handleCandidateSearch}\n                    disabled={searchCandidatesMutation.isPending}\n                    data-testid=\"button-search-candidates\"\n                  >\n                    <Search className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n\n                {searchCandidatesMutation.data && (\n                  <div className=\"space-y-4\">\n                    {searchCandidatesMutation.data.map((candidate: UserType & { matchScore?: number }) => (\n                      <div key={candidate.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <div>\n                            <h4 className=\"font-semibold\" data-testid={`text-candidate-name-${candidate.id}`}>\n                              {candidate.full_name}\n                            </h4>\n                            <p className=\"text-sm text-gray-600\" data-testid={`text-candidate-headline-${candidate.id}`}>\n                              {candidate.headline || \"Professional\"}\n                            </p>\n                          </div>\n                          {candidate.matchScore && (\n                            <Badge variant=\"secondary\" className=\"text-accent font-bold\">\n                              <span data-testid={`text-candidate-match-${candidate.id}`}>\n                                {Math.round(candidate.matchScore)}%\n                              </span>\n                            </Badge>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-4 text-sm text-gray-500 mb-3\">\n                          {candidate.location && (\n                            <span className=\"flex items-center\">\n                              <MapPin className=\"mr-1 h-3 w-3\" />\n                              {candidate.location}\n                            </span>\n                          )}\n                          {candidate.experience_years && (\n                            <span className=\"flex items-center\">\n                              <Briefcase className=\"mr-1 h-3 w-3\" />\n                              {candidate.experience_years} years exp.\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <div className=\"flex flex-wrap gap-1\">\n                            {candidate.skills.slice(0, 4).map((skill, index) => (\n                              <Badge key={index} variant=\"outline\" className=\"text-xs\" data-testid={`badge-candidate-skill-${candidate.id}-${index}`}>\n                                {skill}\n                              </Badge>\n                            ))}\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-profile-${candidate.id}`}>\n                              View Profile\n                            </Button>\n                            <Button size=\"sm\" data-testid={`button-contact-${candidate.id}`}>\n                              <MessageSquare className=\"mr-2 h-4 w-4\" />\n                              Contact\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {searchCandidatesMutation.isPending && (\n                  <div className=\"text-center py-8\">Searching for candidates...</div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"applications\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Users className=\"mr-2 h-5 w-5\" />\n                  Applications\n                </CardTitle>\n                <CardDescription>\n                  Review and manage job applications\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {applications?.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {applications.map((application: Application & { job?: Job; seeker?: UserType }) => (\n                      <div key={application.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <div>\n                            <h4 className=\"font-semibold\" data-testid={`text-applicant-name-${application.id}`}>\n                              {application.seeker?.full_name || \"Applicant\"}\n                            </h4>\n                            <p className=\"text-sm text-gray-600\" data-testid={`text-application-job-${application.id}`}>\n                              Applied for {application.job?.title || \"Job\"}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge\n                              variant={\n                                application.status === \"shortlisted\"\n                                  ? \"default\"\n                                  : application.status === \"rejected\"\n                                  ? \"destructive\"\n                                  : \"secondary\"\n                              }\n                              data-testid={`badge-application-status-${application.id}`}\n                            >\n                              {application.status}\n                            </Badge>\n                            {application.scores && (\n                              <Badge variant=\"outline\" data-testid={`badge-application-score-${application.id}`}>\n                                <Star className=\"mr-1 h-3 w-3\" />\n                                {Math.round(application.scores.final * 100)}%\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-4 text-sm text-gray-500 mb-3\">\n                          <span className=\"flex items-center\">\n                            <Clock className=\"mr-1 h-3 w-3\" />\n                            {new Date(application.created_at).toLocaleDateString()}\n                          </span>\n                          {application.seeker?.location && (\n                            <span className=\"flex items-center\">\n                              <MapPin className=\"mr-1 h-3 w-3\" />\n                              {application.seeker.location}\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"flex justify-end gap-2\">\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-resume-${application.id}`}>\n                            View Resume\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-schedule-interview-${application.id}`}>\n                            <Calendar className=\"mr-2 h-4 w-4\" />\n                            Schedule Interview\n                          </Button>\n                          <Button size=\"sm\" data-testid={`button-shortlist-${application.id}`}>\n                            Shortlist\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    No applications yet. Post some jobs to start receiving applications!\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"interviews\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"mr-2 h-5 w-5\" />\n                  Interview Schedule\n                </CardTitle>\n                <CardDescription>\n                  Manage upcoming and completed interviews\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8 text-gray-500\">\n                  No interviews scheduled yet.\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":24366},"client/src/pages/profile/edit-profile.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { ArrowLeft, User, MapPin, Briefcase, Plus, X, Save, AlertCircle } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport FileUpload from \"@/components/ui/file-upload\";\nimport { useFileUpload } from \"@/hooks/use-file-upload\";\n\nconst profileSchema = z.object({\n  full_name: z.string().min(2, \"Name must be at least 2 characters\"),\n  headline: z.string().optional(),\n  location: z.string().optional(),\n  experience_years: z.number().optional(),\n});\n\ntype ProfileData = z.infer<typeof profileSchema>;\n\nexport default function EditProfile() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [newSkill, setNewSkill] = useState(\"\");\n\n  const { data: profile, isLoading: profileLoading } = useQuery({\n    queryKey: [\"/api/me\"],\n    enabled: !!user,\n  });\n\n  const form = useForm<ProfileData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      full_name: profile?.full_name || \"\",\n      headline: profile?.headline || \"\",\n      location: profile?.location || \"\",\n      experience_years: profile?.experience_years || undefined,\n    },\n  });\n\n  // Update form when profile data loads\n  React.useEffect(() => {\n    if (profile) {\n      form.reset({\n        full_name: profile.full_name || \"\",\n        headline: profile.headline || \"\",\n        location: profile.location || \"\",\n        experience_years: profile.experience_years || undefined,\n      });\n      setSkills(profile.skills || []);\n    }\n  }, [profile, form]);\n\n  const [skills, setSkills] = useState<string[]>(profile?.skills || []);\n\n  const {\n    file: resumeFile,\n    uploadProgress,\n    uploadStatus,\n    error: uploadError,\n    selectFile,\n    removeFile,\n    uploadFile,\n  } = useFileUpload({\n    uploadUrl: \"/api/me/resume\",\n    acceptedFileTypes: ['.pdf', '.docx'],\n    maxFileSize: 5 * 1024 * 1024,\n    onUploadComplete: () => {\n      toast({\n        title: \"Resume uploaded successfully\",\n        description: \"Your resume has been processed and skills extracted.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n    },\n    onUploadError: (error) => {\n      toast({\n        title: \"Upload failed\",\n        description: error,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileData & { skills: string[] }) => {\n      const response = await apiRequest(\"PUT\", \"/api/me/update\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been successfully updated.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getUserInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(part => part[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const addSkill = () => {\n    if (newSkill.trim() && !skills.includes(newSkill.trim())) {\n      setSkills([...skills, newSkill.trim()]);\n      setNewSkill(\"\");\n    }\n  };\n\n  const removeSkill = (skillToRemove: string) => {\n    setSkills(skills.filter(skill => skill !== skillToRemove));\n  };\n\n  const onSubmit = (data: ProfileData) => {\n    updateProfileMutation.mutate({\n      ...data,\n      skills,\n    });\n  };\n\n  const handleResumeSelect = (file: File) => {\n    selectFile(file);\n  };\n\n  const handleResumeUpload = () => {\n    uploadFile();\n  };\n\n  if (!user) return null;\n\n  if (profileLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-sm text-gray-600\">Loading profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(user.role === \"seeker\" ? \"/dashboard/job-seeker\" : \"/dashboard/recruiter\")}\n            className=\"mb-4\"\n            data-testid=\"back-button\"\n          >\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Dashboard\n          </Button>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Avatar className=\"h-16 w-16\">\n              <AvatarFallback className=\"bg-primary text-white text-xl font-bold\">\n                {getUserInitials(profile?.full_name || user.full_name)}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Edit Profile</h1>\n              <p className=\"text-gray-600\">Update your information and preferences</p>\n            </div>\n          </div>\n        </div>\n\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Basic Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <User className=\"mr-2 h-5 w-5\" />\n                Basic Information\n              </CardTitle>\n              <CardDescription>\n                Your personal details and professional headline\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"full_name\">Full Name</Label>\n                  <Input\n                    id=\"full_name\"\n                    {...form.register(\"full_name\")}\n                    data-testid=\"input-full-name\"\n                  />\n                  {form.formState.errors.full_name && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.full_name.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"location\">Location</Label>\n                  <Input\n                    id=\"location\"\n                    placeholder=\"e.g., San Francisco, CA\"\n                    {...form.register(\"location\")}\n                    data-testid=\"input-location\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"headline\">Professional Headline</Label>\n                <Input\n                  id=\"headline\"\n                  placeholder=\"e.g., Senior Software Engineer\"\n                  {...form.register(\"headline\")}\n                  data-testid=\"input-headline\"\n                />\n              </div>\n\n              {user.role === 'seeker' && (\n                <div>\n                  <Label htmlFor=\"experience_years\">Years of Experience</Label>\n                  <Input\n                    id=\"experience_years\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"50\"\n                    placeholder=\"e.g., 5\"\n                    {...form.register(\"experience_years\", { valueAsNumber: true })}\n                    data-testid=\"input-experience-years\"\n                  />\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Skills */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Briefcase className=\"mr-2 h-5 w-5\" />\n                Skills\n              </CardTitle>\n              <CardDescription>\n                Add your technical and professional skills\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex space-x-2\">\n                <Input\n                  value={newSkill}\n                  onChange={(e) => setNewSkill(e.target.value)}\n                  placeholder=\"Add a skill\"\n                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addSkill())}\n                  data-testid=\"input-new-skill\"\n                />\n                <Button\n                  type=\"button\"\n                  onClick={addSkill}\n                  disabled={!newSkill.trim()}\n                  data-testid=\"add-skill-button\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                </Button>\n              </div>\n\n              {skills.length > 0 && (\n                <div className=\"flex flex-wrap gap-2\">\n                  {skills.map((skill, index) => (\n                    <Badge\n                      key={index}\n                      variant=\"secondary\"\n                      className=\"flex items-center space-x-1\"\n                      data-testid={`skill-badge-${index}`}\n                    >\n                      <span>{skill}</span>\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-4 w-4 p-0 hover:bg-transparent\"\n                        onClick={() => removeSkill(skill)}\n                        data-testid={`remove-skill-${index}`}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </Badge>\n                  ))}\n                </div>\n              )}\n\n              {skills.length === 0 && (\n                <p className=\"text-sm text-gray-500\">No skills added yet</p>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Resume Upload (Job Seekers only) */}\n          {user.role === 'seeker' && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Resume</CardTitle>\n                <CardDescription>\n                  Upload your resume to improve job matching accuracy\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {profile?.resume_file_path ? (\n                  <div className=\"space-y-4\">\n                    <Alert data-testid=\"current-resume\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        Current resume uploaded. You can upload a new one to replace it.\n                      </AlertDescription>\n                    </Alert>\n                    \n                    <FileUpload\n                      onFileSelect={handleResumeSelect}\n                      onFileRemove={removeFile}\n                      currentFile={resumeFile}\n                      uploadProgress={uploadProgress}\n                      uploadStatus={uploadStatus}\n                      error={uploadError}\n                    />\n                    \n                    {resumeFile && uploadStatus === 'idle' && (\n                      <Button\n                        type=\"button\"\n                        onClick={handleResumeUpload}\n                        data-testid=\"upload-resume-button\"\n                      >\n                        Upload New Resume\n                      </Button>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <FileUpload\n                      onFileSelect={handleResumeSelect}\n                      onFileRemove={removeFile}\n                      currentFile={resumeFile}\n                      uploadProgress={uploadProgress}\n                      uploadStatus={uploadStatus}\n                      error={uploadError}\n                    />\n                    \n                    {resumeFile && uploadStatus === 'idle' && (\n                      <Button\n                        type=\"button\"\n                        onClick={handleResumeUpload}\n                        data-testid=\"upload-resume-button\"\n                      >\n                        Upload Resume\n                      </Button>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Form Actions */}\n          <div className=\"flex justify-end space-x-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setLocation(user.role === \"seeker\" ? \"/dashboard/job-seeker\" : \"/dashboard/recruiter\")}\n              data-testid=\"cancel-button\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={updateProfileMutation.isPending}\n              data-testid=\"save-profile-button\"\n            >\n              {updateProfileMutation.isPending ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Saving...\n                </>\n              ) : (\n                <>\n                  <Save className=\"mr-2 h-4 w-4\" />\n                  Save Changes\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14186},"client/src/hooks/use-auth.tsx":{"content":"import { useState, useEffect, createContext, useContext } from \"react\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  login: (user: User, token: string) => void;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing auth data on mount\n    const storedToken = localStorage.getItem(\"auth_token\");\n    const storedUser = localStorage.getItem(\"auth_user\");\n    \n    if (storedToken && storedUser) {\n      setToken(storedToken);\n      setUser(JSON.parse(storedUser));\n    }\n    \n    setIsLoading(false);\n  }, []);\n\n  const login = (userData: User, authToken: string) => {\n    setUser(userData);\n    setToken(authToken);\n    localStorage.setItem(\"auth_token\", authToken);\n    localStorage.setItem(\"auth_user\", JSON.stringify(userData));\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem(\"auth_token\");\n    localStorage.removeItem(\"auth_user\");\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, token, login, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":1658}}}